# Multi-stage Dockerfile for browser-specific testing environments
# Stage 1: Golden Base Image (stable dependencies, NO source code)
FROM node:22-slim AS golden-base

# Common environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    NODE_ENV=test \
    PLAYWRIGHT_BROWSERS_PATH=/opt/playwright

# Install common system dependencies (shared by all browsers)
RUN apt-get update && apt-get install -y --no-install-recommends \
    fonts-liberation \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libasound2 \
    libgtk-3-0 \
    libgbm-dev \
    libnss3 \
    libgconf-2-4 \
    libxtst6 \
    libpangocairo-1.0-0 \
    libatk1.0-0 \
    libcairo-gobject2 \
    libgdk-pixbuf2.0-0 \
    make \
    git \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && mkdir -p /opt/playwright

WORKDIR /app

# Copy ONLY package files and install npm dependencies (stable layer)
COPY package*.json Makefile ./
RUN npm ci --ignore-scripts && npm cache clean --force

# Create static hello world test (doesn't change)
RUN mkdir -p /app/tests/hello-world && \
    cat > /app/tests/hello-world/hello-world.spec.js << 'EOF'
const { test, expect } = require('@playwright/test');

test.describe('Hello World Browser Test', () => {
  test('should load a simple page and verify browser functionality', async ({ page, browserName }) => {
    console.log(`ðŸ§ª Running Hello World test for ${browserName}`);

    // Create a simple HTML page
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Hello World Test - ${browserName}</title>
        </head>
        <body>
          <h1 id="greeting">Hello World from ${browserName}!</h1>
          <p id="status">Browser is working correctly</p>
          <button id="test-btn">Click me</button>
          <script>
            document.getElementById('test-btn').onclick = function() {
              document.getElementById('status').textContent = 'Button clicked successfully!';
            };
          </script>
        </body>
      </html>
    `);

    // Verify page loaded
    await expect(page.locator('#greeting')).toHaveText(`Hello World from ${browserName}!`);

    // Test basic interactivity
    await page.click('#test-btn');
    await expect(page.locator('#status')).toHaveText('Button clicked successfully!');

    console.log(`âœ… Hello World test passed for ${browserName}`);
  });
});
EOF

# Create test user and set permissions
RUN groupadd -g 1001 testuser && \
    useradd -u 1001 -g testuser -m testuser && \
    chown -R testuser:testuser /app && \
    chown -R testuser:testuser /home/testuser

# ===== CHROMIUM STAGE (golden-base + source code + browser) =====
FROM golden-base AS chromium

# Copy source code (this layer changes per PR - after golden base)
COPY . .
RUN chown -R testuser:testuser /app

# Install Chromium-specific system packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    chromium \
    && rm -rf /var/lib/apt/lists/*

# Set Chromium-specific environment
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

# Install ONLY Playwright Chromium browser (fast)
RUN npx playwright install chromium && \
    npx playwright install-deps chromium

# Set permissions for browser directories
RUN chmod -R 755 /opt/playwright || true && \
    chown -R testuser:testuser /opt/playwright || true

USER testuser
CMD ["npx", "playwright", "test", "tests/hello-world/hello-world.spec.js"]

# ===== FIREFOX STAGE (golden-base + source code + browser) =====
FROM golden-base AS firefox

# Copy source code (this layer changes per PR - after golden base)
COPY . .
RUN chown -R testuser:testuser /app

# Install Firefox-specific system packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    firefox-esr \
    libdbus-glib-1-2 \
    && rm -rf /var/lib/apt/lists/*

# Install ONLY Playwright Firefox browser (fast)
RUN npx playwright install firefox && \
    npx playwright install-deps firefox

# Set permissions for browser directories
RUN chmod -R 755 /opt/playwright || true && \
    chown -R testuser:testuser /opt/playwright || true

USER testuser
CMD ["npx", "playwright", "test", "tests/hello-world/hello-world.spec.js"]

# ===== PRODUCTION BUILDER STAGE (golden-base + production tools) =====
FROM golden-base AS production-builder

# Accept build arguments
ARG GITHUB_SHA=dev-local
ARG GITHUB_REF_NAME=main
ARG NODE_ENV=production

# Set production environment
ENV NODE_ENV=${NODE_ENV} \
    GITHUB_SHA=${GITHUB_SHA} \
    GITHUB_REF_NAME=${GITHUB_REF_NAME} \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

# Install production-specific browser (Chromium for PDF generation)
RUN apt-get update && apt-get install -y --no-install-recommends \
    chromium \
    && rm -rf /var/lib/apt/lists/*

# Copy source code and build
COPY . .
RUN chown -R testuser:testuser /app

USER testuser
RUN npm run build

# Production runtime stage
FROM node:22-slim AS production

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    chromium fonts-liberation dumb-init wget \
    && rm -rf /var/lib/apt/lists/* \
    && adduser --disabled-password --gecos '' --uid 1001 resume

ENV NODE_ENV=production \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

WORKDIR /app

# Copy built application and dependencies
COPY --from=production-builder --chown=resume:resume /app/dist ./dist
COPY --from=production-builder --chown=resume:resume /app/package*.json ./
COPY --from=production-builder --chown=resume:resume /app/node_modules ./node_modules

USER resume
EXPOSE 3000
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "run", "serve"]

# ===== WEBKIT STAGE (golden-base + source code + browser) =====
FROM golden-base AS webkit

# Copy source code (this layer changes per PR - after golden base)
COPY . .
RUN chown -R testuser:testuser /app

# Install WebKit-specific dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libopus0 \
    libwebp7 \
    libenchant-2-2 \
    libgudev-1.0-0 \
    libsecret-1-0 \
    libhyphen0 \
    libegl1 \
    libnotify4 \
    libxslt1.1 \
    libevent-2.1-7 \
    libgles2-mesa \
    && rm -rf /var/lib/apt/lists/*

# Install ONLY Playwright WebKit browser (fast)
RUN npx playwright install webkit && \
    npx playwright install-deps webkit

# Set permissions for browser directories
RUN chmod -R 755 /opt/playwright || true && \
    chown -R testuser:testuser /opt/playwright || true

USER testuser
CMD ["npx", "playwright", "test", "tests/hello-world/hello-world.spec.js"]
