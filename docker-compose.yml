# =============================================================================
# üê≥ STREAMLINED DOCKER COMPOSE - State-of-the-Art CI/CD Architecture
# =============================================================================
# Simple, fast, reliable - focused on essential workflows only
# Chromium-only testing for speed, optimized GitHub Actions cache integration
# =============================================================================

version: '3.8'

networks:
  resume-network:
    driver: bridge

volumes:
  node_modules_cache:
    name: resume-node-modules-cache
  build_cache:
    name: resume-build-cache

services:
  # =============================================
  # üöÄ Development Server - Hot Reload
  # =============================================
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: resume-dev
    ports:
      - "3000:3000"    # Development server
      - "35729:35729"  # LiveReload
    volumes:
      - .:/app:cached
      - node_modules_cache:/app/node_modules
      - ./dist:/app/dist:delegated
    environment:
      - NODE_ENV=dev
      - CHOKIDAR_USEPOLLING=true
      - BUILD_MODE=draft
      - HOST=0.0.0.0    # Listen on all interfaces for mobile testing
    networks:
      - resume-network
    restart: unless-stopped
    profiles: ["dev", "development"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health || http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================
  # üèóÔ∏è Production Build - Generate artifacts
  # =============================================
  build:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        - GITHUB_SHA=${GITHUB_SHA:-local-build}
        - GITHUB_REF_NAME=${GITHUB_REF_NAME:-main}
        - NODE_ENV=prod
        - PREVIEW_URL=${PREVIEW_URL:-}
    container_name: resume-build
    volumes:
      - ./dist:/tmp/dist:delegated
      - build_cache:/app/.cache
    environment:
      - NODE_ENV=prod
      - BUILD_MODE=${BUILD_MODE:-prod}
    networks:
      - resume-network
    profiles: ["build", "prod"]
    command: sh -c "npm run build && cp -r /app/dist/* /tmp/dist/ && echo '‚úÖ Build completed and artifacts copied'"

  # =============================================
  # üåê Production Server - Built files
  # =============================================
  serve:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        - GITHUB_SHA=${GITHUB_SHA:-local-serve}
        - GITHUB_REF_NAME=${GITHUB_REF_NAME:-main}
    container_name: resume-serve
    ports:
      - "3001:80"
    networks:
      - resume-network
    profiles: ["serve", "prod"]
    depends_on:
      - build
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================
  # üß™ Essential Testing - Chromium only
  # =============================================
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: resume-test
    volumes:
      - ./test-results:/app/test-results:delegated
      - ./playwright-report:/app/playwright-report:delegated
    environment:
      - NODE_ENV=test
      - CI=true
    networks:
      - resume-network
    profiles: ["test", "ci"]
    command: >
      sh -c "
        mkdir -p test-results playwright-report &&
        echo 'üß™ Running essential Chromium tests...' &&
        npx playwright test tests/essential/smoke.spec.js --project=chromium --reporter=html &&
        echo '‚úÖ Essential tests completed'
      "

  # =============================================
  # üìä CI Complete - Production parity testing
  # =============================================
  ci:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: resume-ci
    volumes:
      - ./test-results:/app/test-results:delegated
      - ./coverage:/app/coverage:delegated
      - ./playwright-report:/app/playwright-report:delegated
    environment:
      - NODE_ENV=test
      - CI=true
      - HOST_UID=${HOST_UID:-1000}
      - HOST_GID=${HOST_GID:-1000}
    networks:
      - resume-network
    profiles: ["ci", "full-test"]
    depends_on:
      - build
    command: >
      sh -c "
        echo 'üìä Running CI test suite (Chromium-focused for speed)...' &&
        mkdir -p test-results coverage playwright-report &&
        echo 'üî• Essential smoke tests...' &&
        npx playwright test tests/essential/smoke.spec.js --project=chromium --reporter=line &&
        echo 'üèóÔ∏è Validating build artifacts...' &&
        ls -la dist/ && test -f dist/index.html &&
        echo '‚úÖ CI validation completed (fast & focused)'
      "

# =============================================================================
# üìã USAGE - Streamlined Development Workflow
# =============================================================================
#
# DEVELOPMENT:
#   docker-compose --profile dev up -d        # Background dev server
#   docker-compose --profile dev logs -f      # Watch dev logs
#   docker-compose down                        # Stop all services
#
# PRODUCTION BUILD & TEST:
#   docker-compose --profile build up         # Build production assets
#   docker-compose --profile serve up -d      # Serve production site
#   docker-compose --profile test up          # Run essential tests
#
# CI/CD VALIDATION:
#   docker-compose --profile ci up build test # Full CI pipeline
#
# QUICK COMMANDS:
#   make dev          # Start development (uses docker-compose)
#   make build        # Production build (uses docker-compose)
#   make serve        # Production server (uses docker-compose)
#   make test-fast    # Essential tests (uses docker-compose)
#
# PORTS:
#   3000 - Development server (hot reload + mobile LAN access)
#   3001 - Production server (nginx with built files)
#
# =============================================================================
