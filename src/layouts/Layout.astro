---
import '../styles/global.css';
import GoogleTagManager from '../components/GoogleTagManager.astro';
import GTMEvents from '../components/GTMEvents.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'Professional resume of Rafael Bernardo Sathler - Infrastructure Engineer, DevOps, Platform Engineer, AWS/GCP Cloud Architect' } = Astro.props;
---

<!doctype html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Critical resource preloading for LCP optimization (Astro best practices) -->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="dns-prefetch" href="https://www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://api.qrserver.com">
    
    <!-- Preload critical profile image for faster LCP -->
    <link rel="preload" as="image" href="/assets/images/profile-optimized.jpg">
    <link rel="preload" as="image" href="/assets/images/profile-sm.avif" media="(max-width: 768px)">
    
    <!-- Astro will automatically handle CSS optimization with inlineStylesheets: 'auto' -->
    
    <!-- Google Tag Manager -->
    <GoogleTagManager />
    
    <!-- Liquid Glass Background -->
    <style>
      body {
        background: linear-gradient(135deg, 
          hsl(230, 30%, 95%) 0%,
          hsl(220, 25%, 92%) 25%,
          hsl(210, 20%, 89%) 50%,
          hsl(200, 25%, 92%) 75%,
          hsl(230, 30%, 95%) 100%);
        min-height: 100vh;
      }
      
      :global(.dark) body {
        background: linear-gradient(135deg,
          hsl(230, 15%, 8%) 0%,
          hsl(220, 20%, 12%) 25%,
          hsl(210, 25%, 15%) 50%,
          hsl(200, 20%, 12%) 75%,
          hsl(230, 15%, 8%) 100%);
      }
      
      .glass-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px) saturate(180%);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      }
      
      :global(.dark) .glass-card {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      }
      
      .glass-button {
        background: rgba(37, 99, 235, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(37, 99, 235, 0.2);
        transition: all 0.2s ease;
      }
      
      .glass-button:hover {
        background: rgba(37, 99, 235, 0.2);
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 12px 24px rgba(37, 99, 235, 0.2);
      }
    </style>
  </head>
  <body>
    <!-- Theme Toggle -->
    <div class="fixed top-4 right-4 z-50">
      <button id="theme-toggle" class="glass-button rounded-full p-3 text-2xl">
        <span class="theme-icon">🌙</span>
      </button>
    </div>
    
    <slot />
    
    <!-- GTM Event Tracking -->
    <GTMEvents />
    
    <script is:inline>
      // Astro built-in theme switching with system preference detection
      const theme = (() => {
        const localStorageTheme = localStorage?.getItem("theme") ?? '';
        if (['dark', 'light'].includes(localStorageTheme)) {
          return localStorageTheme;
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();

      // Apply theme using CSS classes (Astro built-in approach)
      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }

      window.localStorage.setItem('theme', theme);
      
      // Update theme toggle icon
      function updateThemeIcon() {
        const themeIcon = document.querySelector('.theme-icon');
        if (themeIcon) {
          const isDark = document.documentElement.classList.contains('dark');
          themeIcon.textContent = isDark ? '☀️' : '🌙';
        }
      }
      
      // Initialize icon
      updateThemeIcon();

      // Theme toggle handler using Astro's built-in class approach
      const handleToggleClick = () => {
        const element = document.documentElement;
        element.classList.toggle("dark");
        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
        updateThemeIcon();
      }

      document.getElementById("theme-toggle")?.addEventListener("click", handleToggleClick);
    </script>
  </body>
</html>