#!/bin/bash
# Pre-commit hook to enforce semantic versioning consistency
# This prevents manual version changes and ensures CI handles version bumps

set -e

echo "üìã Checking semantic versioning consistency..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if package.json is being modified
STAGED_FILES=$(git diff --cached --name-only)
PACKAGE_MODIFIED=0

for file in $STAGED_FILES; do
    if [[ "$file" == "package.json" ]]; then
        PACKAGE_MODIFIED=1
        break
    fi
done

if [[ $PACKAGE_MODIFIED -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ package.json not modified, version check passed${NC}"
    exit 0
fi

echo -e "${BLUE}üì¶ package.json modified, checking version consistency...${NC}"

# Get current version from HEAD (before changes)
CURRENT_VERSION=""
if git show HEAD:package.json >/dev/null 2>&1; then
    CURRENT_VERSION=$(git show HEAD:package.json | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).version" 2>/dev/null || echo "")
fi

# Get new version from staged changes
NEW_VERSION=$(node -p "JSON.parse(require('fs').readFileSync('package.json', 'utf8')).version" 2>/dev/null || echo "")

if [[ -z "$CURRENT_VERSION" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No previous version found, allowing initial version${NC}"
    exit 0
fi

if [[ -z "$NEW_VERSION" ]]; then
    echo -e "${RED}‚ùå Cannot read version from package.json${NC}"
    exit 1
fi

if [[ "$CURRENT_VERSION" != "$NEW_VERSION" ]]; then
    # Check if this is an automated version bump commit
    COMMIT_MSG=$(git log --format=%B -n 1 HEAD 2>/dev/null || echo "")
    
    if [[ "$COMMIT_MSG" =~ ^chore\(release\): ]]; then
        echo -e "${GREEN}‚úÖ Automated version bump detected, allowing version change${NC}"
        exit 0
    fi
    
    # Check if we're in a CI environment
    if [[ -n "$CI" || -n "$GITHUB_ACTIONS" ]]; then
        echo -e "${GREEN}‚úÖ CI environment detected, allowing version change${NC}"
        exit 0
    fi
    
    echo -e "${RED}‚ùå Manual version change detected!${NC}"
    echo -e "${RED}   Current: $CURRENT_VERSION${NC}"
    echo -e "${RED}   New:     $NEW_VERSION${NC}"
    echo ""
    echo -e "${YELLOW}üîß Version changes should be handled automatically by CI.${NC}"
    echo -e "${YELLOW}   Please revert the version change and let the CI system handle versioning.${NC}"
    echo ""
    echo -e "${BLUE}üí° How to fix:${NC}"
    echo -e "${BLUE}   1. Revert package.json version to: $CURRENT_VERSION${NC}"
    echo -e "${BLUE}   2. Use conventional commit messages (feat:, fix:, etc.)${NC}"
    echo -e "${BLUE}   3. Let CI automatically bump version based on commits${NC}"
    echo ""
    echo -e "${BLUE}üìö Examples of conventional commits:${NC}"
    echo -e "${BLUE}   feat: add new feature     ‚Üí minor version bump${NC}"
    echo -e "${BLUE}   fix: resolve bug         ‚Üí patch version bump${NC}"
    echo -e "${BLUE}   feat!: breaking change   ‚Üí major version bump${NC}"
    
    exit 1
fi

echo -e "${GREEN}‚úÖ Version consistency check passed${NC}"
exit 0