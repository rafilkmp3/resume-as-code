#!/bin/bash
# Pre-commit hook to validate JSON and YAML files

set -e

echo "üîç Running pre-commit validation checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to validate JSON files
validate_json() {
    local file="$1"
    echo "üîç Validating JSON: $file"

    if node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8')); console.log('‚úÖ Valid JSON')"; then
        echo -e "${GREEN}‚úÖ $file is valid JSON${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $file has invalid JSON syntax${NC}"
        return 1
    fi
}

# Function to validate YAML files
validate_yaml() {
    local file="$1"
    echo "üîç Validating YAML: $file"

    # Try to validate with yamllint if available
    if command -v yamllint >/dev/null 2>&1; then
        if yamllint -d "{extends: default, rules: {line-length: disable, trailing-spaces: disable, truthy: disable, document-start: disable, empty-lines: disable, brackets: disable}}" "$file" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $file is valid YAML${NC}"
            return 0
        else
            echo -e "${RED}‚ùå $file has YAML issues${NC}"
            yamllint -d "{extends: default, rules: {line-length: disable, trailing-spaces: disable, truthy: disable, document-start: disable, empty-lines: disable, brackets: disable}}" "$file" 2>&1 | head -5
            return 1
        fi
    elif command -v python3 >/dev/null 2>&1; then
        if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ $file is valid YAML${NC}"
            return 0
        else
            echo -e "${RED}‚ùå $file has invalid YAML syntax${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No YAML validator available, skipping validation for $file${NC}"
        return 0
    fi
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Track validation status
VALIDATION_FAILED=0

# Check JSON files
echo "üìã Checking JSON files..."
for file in $STAGED_FILES; do
    if [[ "$file" =~ \.(json)$ ]]; then
        if [[ -f "$file" ]]; then
            if ! validate_json "$file"; then
                VALIDATION_FAILED=1
            fi
        fi
    fi
done

# Check YAML files
echo "üìã Checking YAML files..."
for file in $STAGED_FILES; do
    if [[ "$file" =~ \.(yml|yaml)$ ]]; then
        if [[ -f "$file" ]]; then
            if ! validate_yaml "$file"; then
                VALIDATION_FAILED=1
            fi
        fi
    fi
done

# Check for common issues
echo "üìã Checking for common issues..."

# Check for passwords and sensitive information
echo "üîí Checking for sensitive information..."
SENSITIVE_PATTERNS=(
    "password\s*[:=]\s*['\"][^'\"]*['\"]"
    "api[_-]?key\s*[:=]\s*['\"][^'\"]*['\"]"
    "secret\s*[:=]\s*['\"][^'\"]*['\"]"
    "token\s*[:=]\s*['\"][^'\"]*['\"]"
    "private[_-]?key"
    "-----BEGIN.*PRIVATE KEY-----"
    "AKIA[0-9A-Z]{16}"  # AWS Access Key
    "AIza[0-9A-Za-z_-]{35}"  # Google API Key
    "sk_live_[0-9a-zA-Z]{24}"  # Stripe Live Key
    "sk_test_[0-9a-zA-Z]{24}"  # Stripe Test Key
    "ghp_[a-zA-Z0-9]{36}"  # GitHub Token
    "xoxb-[0-9]{11}-[0-9]{11}-[a-zA-Z0-9]{24}"  # Slack Bot Token
)

SENSITIVE_FOUND=0
for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    MATCHES=$(echo "$STAGED_FILES" | xargs grep -iE "$pattern" 2>/dev/null || true)
    if [[ -n "$MATCHES" ]]; then
        echo -e "${RED}‚ùå Potential sensitive information found:${NC}"
        echo "$MATCHES"
        SENSITIVE_FOUND=1
        VALIDATION_FAILED=1
    fi
done

if [[ $SENSITIVE_FOUND -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ No sensitive information detected${NC}"
fi

# Check for hardcoded URLs/endpoints that might contain secrets
HARDCODED_URLS=$(echo "$STAGED_FILES" | xargs grep -iE "https?://[^/]*:[^@]*@" 2>/dev/null || true)
if [[ -n "$HARDCODED_URLS" ]]; then
    echo -e "${RED}‚ùå URLs with embedded credentials found:${NC}"
    echo "$HARDCODED_URLS"
    VALIDATION_FAILED=1
fi

# Check for debug statements (console.log, debugger, etc.)
DEBUG_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|ts)$' | xargs grep -l "console\.log\|debugger" 2>/dev/null || true)
if [[ -n "$DEBUG_FILES" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Debug statements found in:${NC}"
    echo "$DEBUG_FILES"
    echo -e "${YELLOW}   Consider removing debug statements before committing${NC}"
fi

# Check for TODO comments
TODO_FILES=$(echo "$STAGED_FILES" | xargs grep -l "TODO\|FIXME\|XXX" 2>/dev/null || true)
if [[ -n "$TODO_FILES" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  TODO/FIXME comments found in:${NC}"
    echo "$TODO_FILES"
    echo -e "${YELLOW}   Consider addressing these before committing${NC}"
fi

# Run version consistency check
echo "üîç Running version consistency check..."
if [[ -f ".githooks/pre-commit-version" ]]; then
    if ! .githooks/pre-commit-version; then
        VALIDATION_FAILED=1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Version consistency hook not found, skipping version check${NC}"
fi

# Run Git LFS compliance check
echo "üîç Running Git LFS compliance check..."
if [[ -f ".githooks/pre-commit-lfs" ]]; then
    if ! .githooks/pre-commit-lfs; then
        VALIDATION_FAILED=1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Git LFS pre-commit hook not found, skipping LFS check${NC}"
fi

# Final result
if [[ $VALIDATION_FAILED -eq 0 ]]; then
    echo -e "\n${GREEN}üéâ All validation checks passed!${NC}"
    echo -e "${GREEN}‚úÖ Ready to commit${NC}"
    exit 0
else
    echo -e "\n${RED}‚ùå Validation checks failed!${NC}"
    echo -e "${RED}Please fix the issues above before committing${NC}"
    exit 1
fi
