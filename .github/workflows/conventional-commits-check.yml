---
name: Conventional Commits Check

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: conventional-commits-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  conventional-commits-check:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # Fetch full history to check all commits in the PR
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install commitlint (same as local)
        run: |
          # Use same installation method as local development
          if command -v brew &> /dev/null; then
            brew install commitlint
          else
            # Fallback for non-macOS runners
            npm install -g @commitlint/cli @commitlint/config-conventional
          fi

      - name: Create commitlint config
        run: |
          cat > commitlint.config.js << 'EOF'
          module.exports = {
            extends: ['@commitlint/config-conventional'],
            rules: {
              'type-enum': [
                2,
                'always',
                [
                  'feat',     // New features
                  'fix',      // Bug fixes
                  'chore',    // Maintenance, dependencies
                  'docs',     // Documentation
                  'style',    // Code formatting (hidden in changelog)
                  'refactor', // Code refactoring
                  'perf',     // Performance improvements
                  'test',     // Test changes (hidden in changelog)
                  'ci',       // CI/CD changes
                  'build',    // Build system changes
                  'revert'    // Revert commits
                ]
              ],
              'scope-case': [2, 'always', 'lower-case'],
              'subject-case': [2, 'always', 'lower-case'],
              'subject-empty': [2, 'never'],
              'subject-full-stop': [2, 'never', '.'],
              'header-max-length': [2, 'always', 100]
            }
          };
          EOF

      - name: Get PR commits
        id: commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all commit messages in this PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "üîç Checking commits from $BASE_SHA to $HEAD_SHA"

          # Get commit messages (excluding merge commits)
          git log --format="%H|%s" $BASE_SHA..$HEAD_SHA --no-merges > commits.txt

          echo "üìã Commits to validate:"
          cat commits.txt

          # Count commits
          COMMIT_COUNT=$(wc -l < commits.txt)
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "‚ö†Ô∏è No commits found to validate"
            echo "has_commits=false" >> $GITHUB_OUTPUT
          else
            echo "has_commits=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate conventional commits
        if: steps.commits.outputs.has_commits == 'true'
        run: |
          echo "üéØ Validating conventional commits format..."

          VALIDATION_FAILED=false
          INVALID_COMMITS=""
          VALID_COMMITS=""
          DETAILED_ERRORS=""

          while IFS='|' read -r hash message; do
            echo ""
            echo "üîç Checking: $message"

            # Capture detailed error output
            ERROR_OUTPUT=$(echo "$message" | npx commitlint --config commitlint.config.js 2>&1) || COMMIT_FAILED=true

            if [ -z "$COMMIT_FAILED" ]; then
              echo "‚úÖ Valid: $message"
              VALID_COMMITS="$VALID_COMMITS\n- ‚úÖ \`$message\`"
            else
              echo "‚ùå Invalid: $message"
              echo "üìã Error details: $ERROR_OUTPUT"
              VALIDATION_FAILED=true

              # Extract specific rule violations for AI-friendly messages
              RULE_DETAILS=""
              if echo "$ERROR_OUTPUT" | grep -q "subject-case"; then
                RULE_DETAILS="$RULE_DETAILS\n  üîß **Rule**: subject-case - Subject must be lowercase\n  üìñ **Fix**: Change \`Fix Bug\` to \`fix bug\`\n  üîó **Reference**: https://commitlint.js.org/#/reference-rules?id=subject-case"
              fi
              if echo "$ERROR_OUTPUT" | grep -q "type-enum"; then
                RULE_DETAILS="$RULE_DETAILS\n  üîß **Rule**: type-enum - Invalid commit type\n  üìñ **Fix**: Use feat|fix|chore|docs|style|refactor|perf|test|ci|build|revert\n  üîó **Reference**: https://commitlint.js.org/#/reference-rules?id=type-enum"
              fi
              if echo "$ERROR_OUTPUT" | grep -q "subject-empty"; then
                RULE_DETAILS="$RULE_DETAILS\n  üîß **Rule**: subject-empty - Subject cannot be empty\n  üìñ **Fix**: Add description after colon: \`feat: add new feature\`\n  üîó **Reference**: https://commitlint.js.org/#/reference-rules?id=subject-empty"
              fi
              if echo "$ERROR_OUTPUT" | grep -q "header-max-length"; then
                RULE_DETAILS="$RULE_DETAILS\n  üîß **Rule**: header-max-length - Header too long (max 100 chars)\n  üìñ **Fix**: Shorten commit message to under 100 characters\n  üîó **Reference**: https://commitlint.js.org/#/reference-rules?id=header-max-length"
              fi

              INVALID_COMMITS="$INVALID_COMMITS\n- ‚ùå \`$message\`$RULE_DETAILS"
              DETAILED_ERRORS="$DETAILED_ERRORS\n\n**Commit**: \`$message\`\n$RULE_DETAILS"
            fi
            unset COMMIT_FAILED
          done < commits.txt

          echo ""
          echo "üìä Validation Summary:"
          echo "Valid commits: $(echo -e "$VALID_COMMITS" | grep -c '‚úÖ' || echo 0)"
          echo "Invalid commits: $(echo -e "$INVALID_COMMITS" | grep -c '‚ùå' || echo 0)"

          # Save detailed errors for PR comment
          {
            echo "DETAILED_ERRORS<<EOF"
            echo -e "$DETAILED_ERRORS"
            echo "EOF"
          } >> $GITHUB_ENV

          # Save results for comment
          {
            echo "VALID_COMMITS<<EOF"
            echo -e "$VALID_COMMITS"
            echo "EOF"
          } >> $GITHUB_ENV

          {
            echo "INVALID_COMMITS<<EOF"
            echo -e "$INVALID_COMMITS"
            echo "EOF"
          } >> $GITHUB_ENV

          if [ "$VALIDATION_FAILED" = true ]; then
            echo "validation_failed=true" >> $GITHUB_ENV
            echo ""
            echo "‚ùå CONVENTIONAL COMMITS VALIDATION FAILED"
            echo "Please fix the invalid commit messages above."
            echo ""
            echo "Valid formats:"
            echo "  feat: add new feature"
            echo "  fix: resolve bug"
            echo "  chore(deps): bump package version"
            echo "  docs: update documentation"
            echo ""
            exit 1
          else
            echo "validation_failed=false" >> $GITHUB_ENV
            echo "‚úÖ All commits follow conventional commits format!"
          fi

      - name: Add PR comment with validation results
        if: always() && steps.commits.outputs.has_commits == 'true'
        uses: actions/github-script@v7
        env:
          VALIDATION_FAILED: ${{ env.validation_failed }}
          VALID_COMMITS: ${{ env.VALID_COMMITS }}
          INVALID_COMMITS: ${{ env.INVALID_COMMITS }}
          COMMIT_COUNT: ${{ steps.commits.outputs.commit_count }}
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const validationFailed = process.env.VALIDATION_FAILED === 'true';
            const validCommits = process.env.VALID_COMMITS || '';
            const invalidCommits = process.env.INVALID_COMMITS || '';
            const commitCount = process.env.COMMIT_COUNT || '0';

            const status = validationFailed ? '‚ùå FAILED' : '‚úÖ PASSED';
            const statusEmoji = validationFailed ? '‚ùå' : '‚úÖ';

            let commentBody = `## ${statusEmoji} Conventional Commits Validation

            **Status**: ${status}
            **Commits Checked**: ${commitCount}

            `;

            if (validationFailed) {
              const detailedErrors = process.env.DETAILED_ERRORS || '';

              commentBody += `### ‚ùå Invalid Commits

            The following commits do NOT follow conventional commits format:
            ${invalidCommits}

            ### ü§ñ AI-Friendly Error Details

            ${detailedErrors}

            ### üìã Required Format

            All commits must follow [Conventional Commits](https://www.conventionalcommits.org/) specification:

            \`\`\`
            <type>(<scope>): <description>
            \`\`\`

            **Valid types**: \`feat\`, \`fix\`, \`chore\`, \`docs\`, \`style\`, \`refactor\`, \`perf\`, \`test\`, \`ci\`, \`build\`, \`revert\`

            **Examples** (note lowercase subjects):
            - \`feat: add new resume section for certifications\`
            - \`fix: resolve qr code url mismatch in preview environments\`
            - \`chore(deps): bump playwright from 1.40.0 to 1.41.0\`
            - \`docs: update api documentation\`

            ### üîß Quick Fix Commands

            **Option 1: Amend last commit**
            \`\`\`bash
            git commit --amend -m "feat: your description here (lowercase)"
            git push --force-with-lease
            \`\`\`

            **Option 2: Interactive rebase for multiple commits**
            \`\`\`bash
            git rebase -i HEAD~2  # Adjust number for commits to fix
            # Change 'pick' to 'reword' for commits to fix
            # Save and edit each commit message
            git push --force-with-lease
            \`\`\`

            **Option 3: Squash all commits into one**
            \`\`\`bash
            git reset --soft HEAD~2  # Adjust number for commits to squash
            git commit -m "feat: descriptive commit message here"
            git push --force-with-lease
            \`\`\`

            ### üìö Documentation Links

            - üìñ [Conventional Commits Specification](https://www.conventionalcommits.org/)
            - üîß [Commitlint Rules Reference](https://commitlint.js.org/#/reference-rules)
            - üéØ [Project CLAUDE.md Guidelines](https://github.com/rafilkmp3/resume-as-code/blob/main/CLAUDE.md#-conventional-commits-implementation)

            `;
            } else {
              commentBody += `### ‚úÖ All Commits Valid

            All commits in this PR follow conventional commits format:
            ${validCommits}

            **Great job!** üéâ Your commits are properly formatted and will:
            - Generate accurate changelogs
            - Trigger appropriate version bumps
            - Create organized GitHub releases

            ### üìä Validation Complete
            All commits validated successfully in this workflow run.

            `;
            }

            if (validCommits && validationFailed) {
              commentBody += `### ‚úÖ Valid Commits
            ${validCommits}

            `;
            }

            commentBody += `---
            *This check ensures all commits follow [Conventional Commits](https://www.conventionalcommits.org/) for automated versioning and changelog generation.*`;

            // Check if we already have a conventional commits comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('Conventional Commits Validation')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
              console.log('Updated existing conventional commits comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
              console.log('Created new conventional commits comment');
            }

      - name: Generate step summary
        if: always()
        run: |
          if [ "${{ steps.commits.outputs.has_commits }}" = "false" ]; then
            echo "## ‚ö†Ô∏è No commits to validate" >> $GITHUB_STEP_SUMMARY
            echo "This PR has no new commits to validate." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          if [ "${{ env.validation_failed }}" = "true" ]; then
            echo "## ‚ùå Conventional Commits Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Invalid commits found**: This PR contains commits that do not follow conventional commits format." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ü§ñ AI-Friendly Error Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo -e "${{ env.DETAILED_ERRORS }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß Quick Fix Commands" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Most common fix (lowercase subject)**:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "git commit --amend -m \"feat: your description here (lowercase)\"" >> $GITHUB_STEP_SUMMARY
            echo "git push --force-with-lease" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìö References" >> $GITHUB_STEP_SUMMARY
            echo "- [Conventional Commits](https://www.conventionalcommits.org/)" >> $GITHUB_STEP_SUMMARY
            echo "- [Commitlint Rules](https://commitlint.js.org/#/reference-rules)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ Conventional Commits Validation Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**All commits validated**: All ${{ steps.commits.outputs.commit_count }} commits follow conventional commits format." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Benefits" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Automated version bumping" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Generated changelogs" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Organized GitHub releases" >> $GITHUB_STEP_SUMMARY
          fi
