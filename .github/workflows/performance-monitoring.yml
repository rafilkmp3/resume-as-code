---
name: 🎯 Performance & Quality Monitoring

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**'
      - 'template.html'
      - 'resume-data.json'
      - 'scripts/**'
      - 'package*.json'
      - '*.css'
      - '*.scss'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**'
      - 'template.html'
      - 'resume-data.json'
      - 'scripts/**'
      - 'package*.json'
      - '*.css'
      - '*.scss'
  schedule:
    # Run performance monitoring daily
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all performance tests (full monitoring suite)'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Build once, test many - efficient CI architecture
  build-site:
    name: 🏗️ Build Site for Testing
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production site
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-site-${{ github.sha }}
          path: |
            dist/
            .lighthouserc.json
            package.json
            jest.config.js
          retention-days: 1

  lighthouse-check:
    name: 🚀 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build-site
    if: github.event_name != 'schedule' && (github.event.inputs.run_all_tests == 'true' || github.event_name == 'push')
    steps:
      - name: Download built site
        uses: actions/download-artifact@v4
        with:
          name: built-site-${{ github.sha }}
          path: ./

      - name: Setup Node.js and serve site
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Start development server
        run: |
          npm install -g serve
          echo "🚀 Starting production server on port 3000..."
          
          # Check if dist directory exists
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "❌ dist directory is missing or empty"
            exit 1
          fi
          
          # Start server in background
          serve -s dist -l 3000 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to be ready
          echo "⏳ Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -f -s http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Server is ready!"
              break
            fi
            echo "Attempt $i/30: Server not ready yet, waiting 2s..."
            sleep 2
          done
          
          # Verify server is actually serving content
          CONTENT_LENGTH=$(curl -s http://localhost:3000 | wc -c)
          if [ "$CONTENT_LENGTH" -gt 1000 ]; then
            echo "✅ Content validation passed (${CONTENT_LENGTH} bytes)"
          else
            echo "❌ Content seems too small (${CONTENT_LENGTH} bytes)"
            exit 1
          fi

      - name: Run Lighthouse Check
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: false
          
      - name: Cleanup server
        if: always()
        run: |
          if [ -n "$SERVER_PID" ]; then
            kill $SERVER_PID || echo "Server process already terminated"
          fi

  bundle-analysis:
    name: 📦 Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: build-site
    if: github.event_name == 'pull_request' && github.event.inputs.run_all_tests == 'true'
    steps:
      - name: Download built site and config
        uses: actions/download-artifact@v4
        with:
          name: built-site-${{ github.sha }}
          path: ./

      - name: Analyze Bundle Size
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: './dist/**/*.{js,css,html}'
          strip-hash: "\\b\\w{8}\\."

  # Use shared comprehensive testing workflow for real URL testing
  staging-comprehensive-testing:
    name: 🧪 Comprehensive Testing (Real Staging URL)
    needs: build-site
    if: github.event.inputs.run_all_tests == 'true' || github.event_name == 'schedule'
    uses: ./.github/workflows/shared-comprehensive-testing.yml
    permissions:
      contents: read
      pull-requests: write
      checks: write
    with:
      target_url: 'https://resume-as-code.netlify.app/'
      environment_name: 'performance-monitoring'
      environment_context: 'Scheduled performance monitoring'
      test_types: 'lighthouse,accessibility,performance'
      lighthouse_budget_path: './budget.json'
      artifact_retention_days: 14
      post_pr_comment: false

  core-web-vitals:
    name: 📊 Core Web Vitals
    runs-on: ubuntu-latest
    needs: build-site
    if: github.event_name != 'schedule' && (github.event.inputs.run_all_tests == 'true' || github.event_name == 'push')
    steps:
      - name: Download built site and config
        uses: actions/download-artifact@v4
        with:
          name: built-site-${{ github.sha }}
          path: ./

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Playwright
        run: |
          echo "📦 Installing Playwright with chromium..."
          npm install playwright
          echo "🔍 Installing browser dependencies only (no system deps)..."
          timeout 600 npx playwright install chromium || {
            echo "❌ PLAYWRIGHT INSTALLATION FAILED OR TIMED OUT"
            echo "PLAYWRIGHT_STATUS=failed" >> $GITHUB_ENV
            exit 1
          }
          echo "✅ Playwright installation completed"

      - name: Measure Core Web Vitals
        run: |
          # Start local server
          npm install -g serve
          serve -s dist -l 3000 &
          SERVER_PID=$!
          
          # Wait for server to be ready with health check
          echo "Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Server is ready!"
              break
            fi
            echo "Attempt $i/30: Server not ready yet, waiting..."
            sleep 2
          done
          
          # Run Web Vitals measurement
          cat > measure-vitals.js << 'EOF'
          const { chromium } = require('playwright');
          
          (async () => {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            
            // Collect performance metrics
            await page.goto('http://localhost:3000');
            await page.waitForLoadState('networkidle');
            
            const vitals = await page.evaluate(() => {
              return new Promise((resolve) => {
                new PerformanceObserver((list) => {
                  const entries = list.getEntries();
                  const vitals = {};
                  
                  entries.forEach((entry) => {
                    if (entry.name === 'FCP') vitals.fcp = entry.value;
                    if (entry.name === 'LCP') vitals.lcp = entry.value;
                    if (entry.name === 'CLS') vitals.cls = entry.value;
                  });
                  
                  resolve(vitals);
                }).observe({ entryTypes: ['largest-contentful-paint', 'first-contentful-paint', 'layout-shift'] });
                
                // Fallback timeout
                setTimeout(() => resolve({}), 5000);
              });
            });
            
            console.log('Core Web Vitals:', JSON.stringify(vitals, null, 2));
            await browser.close();
          })();
          EOF
          
          if node measure-vitals.js; then
            echo "✅ Core Web Vitals measurement completed successfully"
            echo "VITALS_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ CORE WEB VITALS MEASUREMENT FAILED"
            echo "VITALS_STATUS=failed" >> $GITHUB_ENV
            exit 1  # Fail the job properly
          fi
          
          # Cleanup
          kill $SERVER_PID || true

  quality-summary:
    name: 📈 Enterprise Quality Summary
    runs-on: ubuntu-latest
    needs: [lighthouse-check, bundle-analysis, staging-comprehensive-testing, core-web-vitals]
    if: always()
    steps:
      - name: Quality Gates Summary
        run: |
          echo "## 📈 Enterprise Quality & Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | Status | Tool | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Lighthouse Check Status
          if [ "${{ needs.lighthouse-check.result }}" = "success" ]; then
            LIGHTHOUSE_STATUS="✅ Passed"
          elif [ "${{ needs.lighthouse-check.result }}" = "skipped" ]; then
            LIGHTHOUSE_STATUS="⏭️ Skipped"
          else
            LIGHTHOUSE_STATUS="❌ FAILED"
          fi
          echo "| 🚀 Performance | $LIGHTHOUSE_STATUS | Lighthouse (foo-software) | Performance, Best Practices, SEO |" >> $GITHUB_STEP_SUMMARY
          
          # Bundle Analysis Status
          if [ "${{ needs.bundle-analysis.result }}" = "success" ]; then
            BUNDLE_STATUS="✅ Passed"
          elif [ "${{ needs.bundle-analysis.result }}" = "skipped" ]; then
            BUNDLE_STATUS="⏭️ Skipped"
          else
            BUNDLE_STATUS="❌ FAILED"
          fi
          echo "| 📦 Bundle Size | $BUNDLE_STATUS | Asset size tracking |" >> $GITHUB_STEP_SUMMARY
          
          # Comprehensive Testing Status (Real URL)
          if [ "${{ needs.staging-comprehensive-testing.result }}" = "success" ]; then
            COMPREHENSIVE_STATUS="✅ Passed"
          elif [ "${{ needs.staging-comprehensive-testing.result }}" = "skipped" ]; then
            COMPREHENSIVE_STATUS="⏭️ Skipped"
          else
            COMPREHENSIVE_STATUS="❌ FAILED"
          fi
          echo "| 🧪 Comprehensive Testing | $COMPREHENSIVE_STATUS | Real URL Testing | Lighthouse + Accessibility + Performance on Staging |" >> $GITHUB_STEP_SUMMARY
          
          # Core Web Vitals Status
          if [ "${{ needs.core-web-vitals.result }}" = "success" ]; then
            VITALS_STATUS="✅ Passed"
          else
            VITALS_STATUS="❌ FAILED"
          fi
          echo "| 📊 Web Vitals | $VITALS_STATUS | Core performance metrics |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          FAILED_TESTS=0
          if [ "${{ needs.lighthouse-check.result }}" != "success" ] && [ "${{ needs.lighthouse-check.result }}" != "skipped" ]; then
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          if [ "${{ needs.staging-comprehensive-testing.result }}" != "success" ] && [ "${{ needs.staging-comprehensive-testing.result }}" != "skipped" ]; then
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          if [ "${{ needs.core-web-vitals.result }}" != "success" ]; then
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          if [ $FAILED_TESTS -eq 0 ]; then
            echo "🎉 **All quality gates passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **$FAILED_TESTS quality gate(s) failed - see logs above for details**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Performance Target**: All quality gates should pass for optimal user experience." >> $GITHUB_STEP_SUMMARY
