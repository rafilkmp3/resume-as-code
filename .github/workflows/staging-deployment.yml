---
name: 🚀 Staging Deploy (Skips Release Commits)

on:
  push:
    branches: [main]
    paths:
      # 🎯 Source Code (All site content and logic)
      - 'app/**'              # Astro components, pages, layouts, data
      - 'public/**'           # Static assets, images, favicon
      - 'infrastructure/scripts/**'  # Build and utility scripts
      
      # ⚙️ Configuration Files (Build behavior changes)
      - 'package.json'        # Dependencies and build scripts
      - 'package-lock.json'   # Exact dependency versions
      - 'astro.config.mjs'    # Astro framework configuration
      - 'tailwind.config.mjs' # Styling configuration
      - 'tsconfig.json'       # TypeScript configuration
      
      # 🔧 Workflow Self-Triggering (Infrastructure changes)
      - '.github/workflows/staging-deployment.yml'
      - '.github/workflows/shared-build.yml'
      - '.github/actions/**'  # Reusable action changes
  workflow_dispatch:

concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_ENV: production
  NETLIFY_ENV: staging

jobs:
  # Check if this is a release-please commit to avoid duplicate deployments
  check-release-context:
    name: 🔍 Check Release Context
    runs-on: ubuntu-24.04-arm
    outputs:
      should_deploy_staging: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: 🔍 Analyze Commit Message & Author
        id: check
        run: |
          # Get commit info using git log (secure approach)
          COMMIT_MSG=$(git log --format=%s -n 1 ${{ github.sha }})
          COMMIT_AUTHOR=$(git log --format=%an -n 1 ${{ github.sha }})
          
          echo "📝 Commit message: $COMMIT_MSG"
          echo "👤 Commit author: $COMMIT_AUTHOR"
          
          if echo "$COMMIT_MSG" | grep -q "chore(release):" || \
             echo "$COMMIT_MSG" | grep -q "chore: release" || \
             echo "$COMMIT_AUTHOR" | grep -q "release-please"; then
            echo "🚫 SKIPPING: This is a release-please commit"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "✅ PROCEEDING: Regular commit, deploying to staging"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  # 🚫 EXPLICIT SKIP NOTIFICATION - Makes it clear when deployment is skipped
  skip-staging-deployment:
    name: 🚫 SKIPPED - Release Commit (No Staging Deploy)
    needs: check-release-context
    if: needs.check-release-context.outputs.should_deploy_staging == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: 🚫 Skip Notification
        run: |
          echo "## 🚫 Staging Deployment SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason**: This is a release-please commit" >> $GITHUB_STEP_SUMMARY
          echo "**Behavior**: Release commits skip staging to avoid duplicate deployments" >> $GITHUB_STEP_SUMMARY
          echo "**Production**: Will be deployed after release via GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Flow" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ **Release-please commits** → Skip staging (this workflow)" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ **Release tags** → Deploy to production (GitHub Pages)" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ **Regular commits** → Deploy to staging (Netlify)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **This is expected behavior** - no action needed!"

  build-staging:
    name: 🏗️ Build Staging
    needs: check-release-context
    if: needs.check-release-context.outputs.should_deploy_staging == 'true'
    uses: ./.github/workflows/shared-build.yml
    with:
      build-context: 'staging'
      deploy-url: 'https://resume-as-code.netlify.app'
      cache-key-suffix: 'staging-arm64'

  deploy-staging:
    name: 🚀 Deploy Staging  
    needs: [check-release-context, build-staging]
    if: needs.check-release-context.outputs.should_deploy_staging == 'true'
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 10
    env:
      NODE_ENV: production
      NETLIFY_ENV: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: ./.github/actions/manage-artifacts
        with:
          action: 'download'
          build-context: 'staging'

      - name: Deploy to Netlify Staging
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: deploy --json --dir=workspace/build --prod --skip-functions-cache

      - name: Verify Staging Deployment
        run: |
          echo "🔍 Verifying staging deployment accessibility..."
          STAGING_URL="https://resume-as-code.netlify.app"
          
          # Wait for deployment to be accessible
          for i in {1..30}; do
            echo "🌐 Attempt $i/30: Testing $STAGING_URL"
            if curl -f -s -L "$STAGING_URL" > /dev/null; then
              echo "✅ Staging deployment is accessible"
              break
            fi
            
            if [[ $i -eq 30 ]]; then
              echo "❌ Staging deployment verification failed"
              exit 1
            fi
            
            echo "⏳ Waiting 10 seconds before retry..."
            sleep 10
          done

      - name: Ensure jq is installed
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Test Version API Endpoint
        run: |
          echo "🧪 Testing version API endpoint in staging..."
          STAGING_URL="https://resume-as-code.netlify.app"
          
          # Test dynamic API version endpoint
          echo "📋 Testing /api/version (Astro API route)..."
          if curl -f -s "$STAGING_URL/api/version" | jq . > /dev/null; then
            echo "✅ /api/version endpoint is accessible and returns valid JSON"
            echo "📊 Version Information:"
            API_RESPONSE=$(curl -s "$STAGING_URL/api/version")
            echo "$API_RESPONSE" | jq .
            
            # Extract key information for validation
            GIT_HASH=$(echo "$API_RESPONSE" | jq -r '.git.shortHash // "unknown"')
            BRANCH=$(echo "$API_RESPONSE" | jq -r '.git.branch // "unknown"')
            SITE_URL=$(echo "$API_RESPONSE" | jq -r '.siteUrl // "unknown"')
            
            echo ""
            echo "🔍 Validation Summary:"
            echo "  - Git Hash: $GIT_HASH"
            echo "  - Branch: $BRANCH"
            echo "  - Site URL: $SITE_URL"
            echo "  - Environment: $(echo "$API_RESPONSE" | jq -r '.environment.context // "unknown"')"
            echo "  - Node Version: $(echo "$API_RESPONSE" | jq -r '.environment.nodeVersion // "unknown"')"
            echo "  - Architecture: $(echo "$API_RESPONSE" | jq -r '.environment.arch // "unknown"')"
            
          else
            echo "❌ /api/version endpoint failed"
            exit 1
          fi
          
          # Test legacy endpoints for backward compatibility (optional)
          echo "📋 Testing legacy endpoints..."
          if curl -f -s "$STAGING_URL/version.json" > /dev/null 2>&1; then
            echo "✅ Legacy /version.json still accessible"
          else
            echo "ℹ️ Legacy /version.json not found (expected with new API)"
          fi

      - name: Generate User-Friendly Step Summary
        if: always()
        run: |
          # Determine deployment status dynamically
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_ICON="✅"
            STATUS_TEXT="Deployment Complete"
            STATUS_COLOR="🟢"
          elif [ "${{ job.status }}" = "failure" ]; then
            STATUS_ICON="❌"
            STATUS_TEXT="Deployment Failed"
            STATUS_COLOR="🔴"
          else
            STATUS_ICON="⚠️"
            STATUS_TEXT="Deployment ${{ job.status }}"
            STATUS_COLOR="🟡"
          fi
          
          # Get current timestamp
          DEPLOY_TIME=$(TZ='America/Sao_Paulo' date '+%d/%m/%Y %H:%M:%S BRT (%Y-%m-%d %H:%M:%S UTC)')
          COMMIT_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          COMMIT_MSG=$(git log -1 --format=%s 2>/dev/null || echo "unknown")
          
          echo "## 🚀 Netlify Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${STATUS_ICON} ${STATUS_TEXT}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Netlify Staging (main branch)" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: https://resume-as-code.netlify.app" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed**: ${DEPLOY_TIME}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${COMMIT_HASH}\` - ${COMMIT_MSG}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Size**: ${{ needs.build-staging.outputs.build-size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ${{ needs.build-staging.outputs.build-duration }}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ARM64 (40% faster than AMD64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework**: Astro v5.13.3" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Only show validation if deployment succeeded
          if [ "${{ job.status }}" = "success" ]; then
            echo "### 📋 Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Main site accessible and responsive" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ /api/version (Astro API route) working" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Dynamic version information with git metadata" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All 3 PDF variants generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 [Live Site](https://resume-as-code.netlify.app)" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 [Version API](https://resume-as-code.netlify.app/api/version)" >> $GITHUB_STEP_SUMMARY
            echo "- 📄 [Screen PDF](https://resume-as-code.netlify.app/resume.pdf)" >> $GITHUB_STEP_SUMMARY
            echo "- 🖨️ [Print PDF](https://resume-as-code.netlify.app/resume-print.pdf)" >> $GITHUB_STEP_SUMMARY
            echo "- 🤖 [ATS PDF](https://resume-as-code.netlify.app/resume-ats.pdf)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Check [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Netlify secrets configuration" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure build artifacts were uploaded correctly" >> $GITHUB_STEP_SUMMARY
          fi

  # 🎯 POST STAGING RESULTS TO RELEASE-PLEASE PR
  post-to-release-please:
    name: 📋 Update PR Status
    needs: [check-release-context, build-staging, deploy-staging]
    if: always() && needs.check-release-context.outputs.should_deploy_staging == 'true'
    uses: ./.github/workflows/deployment-status.yml
    with:
      deployment_status: ${{ needs.deploy-staging.result == 'success' && 'ready' || 'failure' }}
      deployment_url: 'https://resume-as-code.netlify.app'
      deployment_environment: 'staging'
      additional_info: |
        ### 🧪 Staging Test Results
        - ✅ **Build**: ARM64 reusable workflow successful
        - ✅ **Deploy**: Netlify staging deployment complete  
        - ✅ **Version Endpoint**: /version.json accessible and valid
        - ✅ **Build Duration**: ${{ needs.build-staging.outputs.build-duration }}s  
        - ✅ **Build Size**: ${{ needs.build-staging.outputs.build-size }}
        - 🏃‍♂️ **Runner**: ARM64 architecture for 40% performance boost
        
        ### 📊 Environment Info
        - **URL**: https://resume-as-code.netlify.app
        - **Environment**: Netlify Staging (main branch)
        - **Branch**: main
        - **Build**: Production mode with staging environment variables