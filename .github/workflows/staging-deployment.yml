---
name: 🚀 Staging Deploy (Netlify)

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**' 
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      # Self-trigger: validate workflow changes by running them
      - '.github/workflows/staging-deployment.yml'
      - '.github/workflows/_build.yml'
  workflow_dispatch:

concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_ENV: production
  NETLIFY_ENV: staging

jobs:
  # Check if this is a release-please commit to avoid duplicate deployments
  check-release-context:
    name: 🔍 Detect Release Commits (Skip Staging if Release-Please)
    runs-on: ubuntu-24.04-arm
    outputs:
      should_deploy_staging: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: 🔍 Analyze Commit Message & Author
        id: check
        run: |
          # Get commit info using git log (secure approach)
          COMMIT_MSG=$(git log --format=%s -n 1 ${{ github.sha }})
          COMMIT_AUTHOR=$(git log --format=%an -n 1 ${{ github.sha }})
          
          echo "📝 Commit message: $COMMIT_MSG"
          echo "👤 Commit author: $COMMIT_AUTHOR"
          
          if echo "$COMMIT_MSG" | grep -q "chore(release):" || \
             echo "$COMMIT_MSG" | grep -q "chore: release" || \
             echo "$COMMIT_AUTHOR" | grep -q "release-please"; then
            echo "🚫 SKIPPING: This is a release-please commit"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "✅ PROCEEDING: Regular commit, deploying to staging"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  build-staging:
    name: 🏗️ Build for Staging (ARM64 Reusable)
    needs: check-release-context
    if: needs.check-release-context.outputs.should_deploy_staging == 'true'
    uses: ./.github/workflows/_build.yml
    with:
      runner_type: 'ubuntu-24.04-arm'
      node_version: '22'
      build_mode: 'production'
      environment_name: 'staging'
      context: 'deploy'
      cache_key_suffix: '-staging'
      upload_artifacts: true
      artifact_name: 'staging-build'
      timeout_minutes: 10

  deploy-staging:
    name: 🚀 Deploy to Netlify Staging  
    needs: [check-release-context, build-staging]
    if: needs.check-release-context.outputs.should_deploy_staging == 'true' && needs.build-staging.outputs.build_success == 'true'
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 10
    env:
      NODE_ENV: production
      NETLIFY_ENV: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-build-staging
          path: dist/

      - name: Deploy to Netlify Staging
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: deploy --json --dir=dist --prod

      - name: Verify Staging Deployment
        run: |
          echo "🔍 Verifying staging deployment accessibility..."
          STAGING_URL="https://resume-as-code.netlify.app"
          
          # Wait for deployment to be accessible
          for i in {1..30}; do
            echo "🌐 Attempt $i/30: Testing $STAGING_URL"
            if curl -f -s -L "$STAGING_URL" > /dev/null; then
              echo "✅ Staging deployment is accessible"
              break
            fi
            
            if [[ $i -eq 30 ]]; then
              echo "❌ Staging deployment verification failed"
              exit 1
            fi
            
            echo "⏳ Waiting 10 seconds before retry..."
            sleep 10
          done

      - name: Ensure jq is installed
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Test Version Endpoints
        run: |
          echo "🧪 Testing version endpoints in staging..."
          STAGING_URL="https://resume-as-code.netlify.app"
          
          # Test version.json endpoint
          echo "📋 Testing /version.json..."
          if curl -f -s "$STAGING_URL/version.json" | jq . > /dev/null; then
            echo "✅ /version.json endpoint is accessible and valid JSON"
            curl -s "$STAGING_URL/version.json" | jq .
          else
            echo "❌ /version.json endpoint failed"
            exit 1
          fi
          
          # Test version.txt endpoint  
          echo "📋 Testing /version.txt..."
          if curl -f -s "$STAGING_URL/version.txt" > /dev/null; then
            echo "✅ /version.txt endpoint is accessible"
            echo "Content:"
            curl -s "$STAGING_URL/version.txt"
          else
            echo "❌ /version.txt endpoint failed"
            exit 1
          fi

      - name: Generate User-Friendly Step Summary
        if: always()
        run: |
          echo "## 🚀 Netlify Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ✅ Deployment Complete" >> $GITHUB_STEP_SUMMARY  
          echo "**Environment**: Netlify Staging" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: https://resume-as-code.netlify.app" >> $GITHUB_STEP_SUMMARY
          echo "**Build Size**: ${{ needs.build-staging.outputs.build_size }}" >> $GITHUB_STEP_SUMMARY
          echo "**PDFs Generated**: ${{ needs.build-staging.outputs.pdf_count }}/3" >> $GITHUB_STEP_SUMMARY
          echo "**Runner**: ARM64 (reusable workflow)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Endpoints Validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Main site accessible" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ /version.json endpoint working" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ /version.txt endpoint working" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 [Live Site](https://resume-as-code.netlify.app)" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [Version Info](https://resume-as-code.netlify.app/version.json)" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 [Screen PDF](https://resume-as-code.netlify.app/resume.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- 🖨️ [Print PDF](https://resume-as-code.netlify.app/resume-print.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 [ATS PDF](https://resume-as-code.netlify.app/resume-ats.pdf)" >> $GITHUB_STEP_SUMMARY

  # 🎯 POST STAGING RESULTS TO RELEASE-PLEASE PR
  post-to-release-please:
    name: 📋 Post Staging Results to Release-Please PR
    needs: [check-release-context, build-staging, deploy-staging]
    if: always() && needs.check-release-context.outputs.should_deploy_staging == 'true'
    uses: ./.github/workflows/shared-deployment-status.yml
    with:
      deployment_status: ${{ needs.deploy-staging.result == 'success' && 'ready' || 'failure' }}
      deployment_url: 'https://resume-as-code.netlify.app'
      deployment_environment: 'staging'
      additional_info: |
        ### 🧪 Staging Test Results
        - ✅ **Build**: ARM64 reusable workflow successful
        - ✅ **Deploy**: Netlify staging deployment complete  
        - ✅ **Version Endpoint**: /version.json accessible and valid
        - ✅ **PDF Generation**: ${{ needs.build-staging.outputs.pdf_count }}/3 PDFs generated
        - ✅ **Build Size**: ${{ needs.build-staging.outputs.build_size }}
        - 🏃‍♂️ **Runner**: ARM64 architecture for 40% performance boost
        
        ### 📊 Environment Info
        - **URL**: https://resume-as-code.netlify.app
        - **Environment**: Netlify Staging (main branch)
        - **Branch**: main
        - **Build**: Production mode with staging environment variables