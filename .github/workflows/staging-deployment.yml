---
name: üöÄ Staging Deploy (Netlify)

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**' 
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  NODE_ENV: production
  NETLIFY_ENV: staging

jobs:
  # Check if this is a release-please commit to avoid duplicate deployments
  check-release-context:
    name: üîç Detect Release Commits (Skip Staging if Release-Please)
    runs-on: ubuntu-24.04-arm
    outputs:
      should_deploy_staging: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: üîç Analyze Commit Message & Author
        id: check
        run: |
          # Get commit info using git log (secure approach)
          COMMIT_MSG=$(git log --format=%s -n 1 ${{ github.sha }})
          COMMIT_AUTHOR=$(git log --format=%an -n 1 ${{ github.sha }})
          
          echo "üìù Commit message: $COMMIT_MSG"
          echo "üë§ Commit author: $COMMIT_AUTHOR"
          
          if echo "$COMMIT_MSG" | grep -q "chore(release):" || \
             echo "$COMMIT_MSG" | grep -q "chore: release" || \
             echo "$COMMIT_AUTHOR" | grep -q "release-please"; then
            echo "üö´ SKIPPING: This is a release-please commit"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ PROCEEDING: Regular commit, deploying to staging"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  build-and-deploy-staging:
    name: üöÄ Build & Deploy to Netlify Staging  
    needs: check-release-context
    if: needs.check-release-context.outputs.should_deploy_staging == 'true'
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 10
    env:
      NODE_ENV: production
      NETLIFY_ENV: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build for Staging
        env:
          NETLIFY: 'true'
          CONTEXT: 'deploy'
          URL: 'https://resume-as-code.netlify.app'
          DEPLOY_URL: 'https://resume-as-code.netlify.app'
        run: npm run build

      - name: Deploy to Netlify Staging
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: deploy --json --dir=dist --prod

      - name: Verify Staging Deployment
        run: |
          echo "üîç Verifying staging deployment accessibility..."
          STAGING_URL="https://resume-as-code.netlify.app"
          
          # Wait for deployment to be accessible
          for i in {1..30}; do
            echo "üåê Attempt $i/30: Testing $STAGING_URL"
            if curl -f -s -L "$STAGING_URL" > /dev/null; then
              echo "‚úÖ Staging deployment is accessible"
              break
            fi
            
            if [[ $i -eq 30 ]]; then
              echo "‚ùå Staging deployment verification failed"
              exit 1
            fi
            
            echo "‚è≥ Waiting 10 seconds before retry..."
            sleep 10
          done

      - name: Test Version Endpoints
        run: |
          echo "üß™ Testing version endpoints in staging..."
          STAGING_URL="https://resume-as-code.netlify.app"
          
          # Test version.json endpoint
          echo "üìã Testing /version.json..."
          if curl -f -s "$STAGING_URL/version.json" | jq . > /dev/null; then
            echo "‚úÖ /version.json endpoint is accessible and valid JSON"
            curl -s "$STAGING_URL/version.json" | jq .
          else
            echo "‚ùå /version.json endpoint failed"
            exit 1
          fi
          
          # Test version.txt endpoint  
          echo "üìã Testing /version.txt..."
          if curl -f -s "$STAGING_URL/version.txt" > /dev/null; then
            echo "‚úÖ /version.txt endpoint is accessible"
            echo "Content:"
            curl -s "$STAGING_URL/version.txt"
          else
            echo "‚ùå /version.txt endpoint failed"
            exit 1
          fi