---
name: Staging Deployment Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**' 
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'docker/**'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual staging deployment reason'
        required: false
        type: string

concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  pull-requests: write
  checks: write
  security-events: write

env:
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  # Staging environment variables
  NETLIFY: true
  NETLIFY_ENV: staging
  CONTEXT: staging
  NODE_ENV: production
  GITHUB_PAGES: false

jobs:
  deploy-staging:
    name: Deploy to Netlify Staging
    runs-on: ubuntu-24.04-arm  # Free ARM64 runner (40% performance boost + 37% cost savings)
    timeout-minutes: 15
    environment:
      name: netlify-staging
      url: https://resume-as-code.netlify.app
    outputs:
      staging_version: ${{ env.STAGING_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure Git for CI
        run: |
          git config --global init.defaultBranch main
          git config --global advice.defaultBranchName false
          git config --global advice.detachedHead false
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"

      - name: Calculate version and commit info
        run: |
          echo "🔍 Calculating STAGING version and commit information..."
          
          # Get current version from package.json but mark as staging
          BASE_VERSION=$(node -p "require('./package.json').version")
          
          # Find the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # No tags found, count all commits
            COMMITS_SINCE_RELEASE=$(git rev-list --count HEAD)
            echo "📊 No previous releases found"
            echo "📊 Total commits: ${COMMITS_SINCE_RELEASE}"
            STAGING_VERSION="${BASE_VERSION}-staging.${COMMITS_SINCE_RELEASE}"
          else
            # Count commits since last tag
            COMMITS_SINCE_TAG=$(git rev-list --count ${LAST_TAG}..HEAD)
            echo "📊 Last release tag: ${LAST_TAG}"
            echo "📊 Commits since release: ${COMMITS_SINCE_TAG}"
            STAGING_VERSION="${BASE_VERSION}-staging.${COMMITS_SINCE_TAG}"
          fi
          
          # Export staging environment variables
          echo "STAGING_VERSION=${STAGING_VERSION}" >> $GITHUB_ENV
          echo "URL=https://resume-as-code.netlify.app/" >> $GITHUB_ENV
          echo "DEPLOY_PRIME_URL=https://resume-as-code.netlify.app/" >> $GITHUB_ENV
          echo "DEPLOY_URL=https://resume-as-code.netlify.app/" >> $GITHUB_ENV
          
          echo "🏷️ Staging version: ${STAGING_VERSION}"
          echo "🌐 Staging URL: https://resume-as-code.netlify.app/"

      - name: Setup Node.js (ARM64 optimized)
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 🚀 Aggressive Caching Setup (Speedlight Builds)
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache
            .next/cache
            node_modules/.cache
            dist/assets/images
            dist/assets/optimized
          key: ${{ runner.os }}-arm64-speedlight-${{ hashFiles('package-lock.json', 'src/**', 'assets/**') }}
          restore-keys: |
            ${{ runner.os }}-arm64-speedlight-
            ${{ runner.os }}-arm64-

      - name: 📦 Fast Dependency Installation (ARM64)
        run: |
          echo "🚀 SPEEDLIGHT BUILD: Leveraging aggressive caching for ultra-fast builds"
          echo "💡 Docker-free advantage: Can cache everything without container limitations"
          
          # Check cache hit status
          if [ -d "node_modules" ] && [ -f "node_modules/.package-lock.json" ]; then
            echo "✅ CACHE HIT: node_modules already exists from cache"
            # Verify cache integrity
            npm ls --depth=0 > /dev/null 2>&1 && echo "✅ Cache integrity verified" || npm ci
          else
            echo "🔄 CACHE MISS: Installing dependencies"
            time npm ci
          fi
          
          echo "📊 Dependency installation completed"

      # Energy monitoring temporarily disabled - investigating measurement data issues
      # - name: Start Energy Consumption Monitoring
      #   uses: green-coding-solutions/eco-ci-energy-estimation@v4
      #   with:
      #     task: start-measurement
      #     label: speedlight-build

      - name: 🚀 Speedlight Build with Intelligent Caching (ARM64)
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          APP_VERSION: ${{ env.STAGING_VERSION }}
          NODE_ENV: production
          GITHUB_PAGES: false
          NETLIFY: true
          NETLIFY_ENV: staging
          CONTEXT: staging
          DEPLOY_URL: https://resume-as-code.netlify.app/
          URL: https://resume-as-code.netlify.app/
        run: |
          echo "🚀 SPEEDLIGHT BUILD: ARM64 Docker-Free with Aggressive Caching"
          echo "🌐 Target: Netlify Staging (resume-as-code.netlify.app)"
          echo "⚡ Using ARM64 native Node.js build (40% performance boost + 37% cost savings)"
          echo "🌱 Energy-efficient ARM64 architecture (30-40% less power consumption)"
          
          # Display ARM64 system info
          echo "📊 ARM64 System Information:"
          echo "  - Architecture: $(uname -m)"
          echo "  - CPU Cores: $(nproc)"
          echo "  - Node.js Arch: $(node -p 'process.arch')"
          echo "  - Platform: $(node -p 'process.platform')"
          
          # Smart build with cache awareness
          echo "🔍 Checking for cached build artifacts..."
          
          # Check if we can skip expensive operations
          BUILD_CACHE_VALID=false
          if [ -d "dist" ] && [ -f "dist/index.html" ]; then
            echo "✅ Previous build artifacts found in cache"
            
            # Check if source files changed (simple heuristic)
            if [ "src/resume-data.json" -ot "dist/index.html" ] && [ "src/templates/template.html" -ot "dist/index.html" ]; then
              echo "✅ Source files unchanged - using cached build artifacts"
              BUILD_CACHE_VALID=true
            else
              echo "🔄 Source files changed - rebuilding required"
            fi
          else
            echo "🔄 No cached build artifacts - full build required"
          fi
          
          # Execute build (full or incremental)
          if [ "$BUILD_CACHE_VALID" = "true" ]; then
            echo "⚡ SPEEDLIGHT: Skipping expensive build operations"
            echo "📦 Verifying cached artifacts..."
            ls -la dist/ | head -10
          else
            echo "🏗️ Executing full ARM64 native build..."
            time npm run build
          fi
          
          echo "✅ ARM64 Speedlight build completed successfully!"
          
          # Cache performance metrics
          echo "📊 Build Performance Summary:"
          echo "  - Cache Strategy: Aggressive multi-layer caching"
          echo "  - Architecture: Native ARM64 (no emulation)"
          echo "  - Dependencies: $([ -d 'node_modules' ] && echo 'Cached' || echo 'Fresh')"
          echo "  - Build Artifacts: $([ '$BUILD_CACHE_VALID' = 'true' ] && echo 'Cache Hit' || echo 'Cache Miss')"

      # Energy monitoring temporarily disabled - investigating measurement data issues
      # - name: Display Energy Results
      #   uses: green-coding-solutions/eco-ci-energy-estimation@v4
      #   with:
      #     task: display-results

      - name: 💾 Save Build Artifacts to Cache (Speedlight Strategy)
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            dist/
            node_modules/.cache
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-arm64-build-artifacts-${{ github.sha }}-${{ hashFiles('package-lock.json', 'src/**', 'assets/**') }}

      - name: Verify staging artifacts
        run: |
          echo "📁 Staging build artifacts:"
          ls -la dist/
          echo "📋 Build manifest:"
          find dist/ -name "*.html" -o -name "*.pdf" -o -name "*.json" | head -10
          echo "✅ Staging artifacts ready for deployment"

      - name: Upload Staging Artifacts  
        uses: actions/upload-artifact@v4
        with:
          name: staging-build-${{ github.sha }}
          path: dist/
          retention-days: 7

      - name: Deploy to Netlify Staging
        uses: South-Paw/action-netlify-cli@v2
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        with:
          args: 'deploy --prod --dir=dist --message="Staging deployment ${{ env.STAGING_VERSION }} (commit: ${{ github.sha }})"'

      - name: Staging Deployment Summary
        run: |
          echo "# 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ env.STAGING_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🌐 Live Staging Site" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 [**View Resume (Staging)**](https://resume-as-code.netlify.app)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging (Netlify)" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://resume-as-code.netlify.app" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

  call-comprehensive-tests:
    name: Comprehensive Staging Tests
    uses: ./.github/workflows/shared-comprehensive-testing.yml
    needs: deploy-staging
    if: success()
    with:
      target_url: 'https://resume-as-code.netlify.app'
      environment_name: 'staging'
      environment_context: 'Main Branch - Staging Deployment'
      test_types: 'lighthouse,accessibility,performance'
      lighthouse_budget_path: './budget.json'
      artifact_retention_days: 7
      post_pr_comment: false
    secrets: inherit

  staging-summary:
    name: Staging Test Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging, call-comprehensive-tests]
    if: always()
    steps:
      - name: Create Comprehensive Staging Summary
        run: |
          echo "# 🚀 Staging Deployment & Testing Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.deploy-staging.outputs.staging_version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** 🌐 [Staging (Netlify)](https://resume-as-code.netlify.app)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lighthouse Performance Results
          echo "## 🚀 Lighthouse Performance" >> $GITHUB_STEP_SUMMARY
          PERF_SCORE="${{ needs.call-comprehensive-tests.outputs.performance_score }}"
          ACCESS_SCORE="${{ needs.call-comprehensive-tests.outputs.accessibility_score }}"
          BEST_PRACTICES_SCORE="${{ needs.call-comprehensive-tests.outputs.best_practices_score }}"
          SEO_SCORE="${{ needs.call-comprehensive-tests.outputs.seo_score }}"
          
          if [ -n "$PERF_SCORE" ] && [ "$PERF_SCORE" != "N/A" ]; then
            echo "- **Performance:** $PERF_SCORE/100" >> $GITHUB_STEP_SUMMARY
            echo "- **Accessibility:** $ACCESS_SCORE/100" >> $GITHUB_STEP_SUMMARY  
            echo "- **Best Practices:** $BEST_PRACTICES_SCORE/100" >> $GITHUB_STEP_SUMMARY
            echo "- **SEO:** $SEO_SCORE/100" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Core Web Vitals with Performance Status
            FCP="${{ needs.call-comprehensive-tests.outputs.fcp }}"
            LCP="${{ needs.call-comprehensive-tests.outputs.lcp }}"
            CLS="${{ needs.call-comprehensive-tests.outputs.cls }}"
            SPEED_INDEX="${{ needs.call-comprehensive-tests.outputs.speed_index }}"
            
            if [ -n "$FCP" ] && [ "$FCP" != "N/A" ] && [ "$FCP" != "" ]; then
              echo "### ⚡ Core Web Vitals Performance" >> $GITHUB_STEP_SUMMARY
              echo "- **First Contentful Paint (FCP):** $FCP $([ "${FCP%ms*}" -le "1800" ] 2>/dev/null && echo "✅ Good" || echo "⚠️ Needs Improvement")" >> $GITHUB_STEP_SUMMARY
              echo "- **Largest Contentful Paint (LCP):** $LCP $([ "${LCP%ms*}" -le "2500" ] 2>/dev/null && echo "✅ Good" || echo "⚠️ Needs Improvement")" >> $GITHUB_STEP_SUMMARY
              echo "- **Cumulative Layout Shift (CLS):** $CLS $(echo "$CLS" | awk '{if($1 <= 0.1) print "✅ Good"; else print "⚠️ Needs Improvement"}')" >> $GITHUB_STEP_SUMMARY
              if [ -n "$SPEED_INDEX" ] && [ "$SPEED_INDEX" != "N/A" ]; then
                echo "- **Speed Index:** $SPEED_INDEX $([ "${SPEED_INDEX%ms*}" -le "3400" ] 2>/dev/null && echo "✅ Good" || echo "⚠️ Needs Improvement")" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Overall Performance Assessment
              FCP_NUM="${FCP%ms*}"
              LCP_NUM="${LCP%ms*}" 
              CLS_NUM="$CLS"
              
              if [ "${FCP_NUM:-9999}" -le "1800" ] 2>/dev/null && [ "${LCP_NUM:-9999}" -le "2500" ] 2>/dev/null && echo "$CLS_NUM" | awk '{exit !($1 <= 0.1)}'; then
                echo "🎉 **Overall Performance:** ✅ EXCELLENT - All Core Web Vitals targets met!" >> $GITHUB_STEP_SUMMARY
              elif [ "${FCP_NUM:-0}" -le "3000" ] 2>/dev/null && [ "${LCP_NUM:-0}" -le "4000" ] 2>/dev/null; then
                echo "📈 **Overall Performance:** ⚠️ GOOD - Minor optimizations recommended" >> $GITHUB_STEP_SUMMARY
              else
                echo "🚨 **Overall Performance:** ❌ NEEDS IMPROVEMENT - Significant optimization required" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 📊 Performance Analysis" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ Core Web Vitals data not available - using alternative performance metrics from Lighthouse" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Lighthouse results not available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Accessibility Results  
          echo "## ♿ Accessibility Analysis" >> $GITHUB_STEP_SUMMARY
          VIOLATION_COUNT="${{ needs.call-comprehensive-tests.outputs.violation_count }}"
          PASSES_COUNT="${{ needs.call-comprehensive-tests.outputs.passes_count }}"
          
          if [ -n "$VIOLATION_COUNT" ] && [ "$VIOLATION_COUNT" != "N/A" ]; then
            echo "- **Violations Found:** $VIOLATION_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed Checks:** $PASSES_COUNT" >> $GITHUB_STEP_SUMMARY
            
            if [ "$VIOLATION_COUNT" -eq 0 ]; then
              echo "- **Status:** ✅ EXCELLENT - No accessibility violations detected!" >> $GITHUB_STEP_SUMMARY
            elif [ "$VIOLATION_COUNT" -lt 10 ]; then
              echo "- **Status:** ⚠️ GOOD - Minor accessibility issues found" >> $GITHUB_STEP_SUMMARY
            elif [ "$VIOLATION_COUNT" -lt 50 ]; then
              echo "- **Status:** ⚠️ NEEDS IMPROVEMENT - Multiple accessibility issues" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status:** ❌ POOR - Significant accessibility improvements needed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Accessibility results not available" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse reports and performance data available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility JSON reports with detailed violation information" >> $GITHUB_STEP_SUMMARY
          echo "- Core Web Vitals analysis and recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🔗 Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [View Staging Site](https://resume-as-code.netlify.app)" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Test Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
