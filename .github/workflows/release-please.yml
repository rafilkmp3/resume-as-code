name: Release Please

on:
  push:
    branches:
      - main

concurrency:
  group: release-please-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: write  # Required for label management

jobs:
  # Automatic resume data updates before release
  update-resume-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Git for automated updates
        run: |
          git config --global user.name "resume-auto-updater[bot]"
          git config --global user.email "noreply@anthropic.com"
          
      - name: Run Resume Auto-Updater
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          echo "ü§ñ Running Resume Auto-Updater..."
          node scripts/resume-auto-updater.js
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "üìù Changes detected, committing updates..."
            git add src/resume-data.json
            git commit -m "chore: automatic resume data updates for release
            
            - Updated lastUpdated timestamp
            - Refreshed project highlights with latest achievements  
            - Ensured production URLs are current
            - Applied configured automatic updates
            
            ü§ñ Generated by resume-auto-updater"
            
            git push
            echo "‚úÖ Resume data automatically updated and pushed"
          else
            echo "‚ú® No resume updates needed"
          fi

  release-please:
    runs-on: ubuntu-latest
    needs: update-resume-data
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to GitHub Pages when a release is created
  deploy:
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for uploading release assets
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build resume
        env:
          GITHUB_PAGES: 'true'
          NODE_ENV: 'production'
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          echo "üèóÔ∏è Building resume without docker-compose (CI-compatible)..."

          # Create backup of package.json and resume-data.json for recovery
          cp package.json package.json.backup 2>/dev/null || echo "‚ö†Ô∏è Could not backup package.json"
          cp resume-data.json resume-data.json.backup 2>/dev/null || echo "‚ö†Ô∏è Could not backup resume-data.json"

          # Resilient build with retry mechanism
          BUILD_SUCCESS=false
          for attempt in 1 2 3; do
            echo "üîÑ Build attempt $attempt/3..."

            if timeout 300 npm run build; then
              echo "‚úÖ Build successful on attempt $attempt"
              BUILD_SUCCESS=true
              break
            else
              BUILD_EXIT_CODE=$?
              echo "‚ö†Ô∏è Build failed on attempt $attempt (exit code: $BUILD_EXIT_CODE)"

              if [ $attempt -lt 3 ]; then
                echo "üîÑ Retrying in 10 seconds..."
                sleep 10

                # Restore backups if they exist
                if [ -f package.json.backup ]; then
                  cp package.json.backup package.json
                  echo "üîß Restored package.json from backup"
                fi
                if [ -f resume-data.json.backup ]; then
                  cp resume-data.json.backup resume-data.json
                  echo "üîß Restored resume-data.json from backup"
                fi
              fi
            fi
          done

          # Cleanup backups
          rm -f package.json.backup resume-data.json.backup

          if [ "$BUILD_SUCCESS" = "false" ]; then
            echo "‚ùå All build attempts failed"
            echo "::error::Build process failed after 3 attempts"
            exit 1
          fi

          # Verify critical build outputs exist
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Critical build output missing: dist/index.html"
            echo "::error::Build verification failed - missing HTML output"
            exit 1
          fi

          if [ ! -f "dist/resume.pdf" ]; then
            echo "‚ö†Ô∏è PDF output missing, but continuing deployment"
            echo "::warning::PDF generation may have failed"
          else
            echo "‚úÖ Both HTML and PDF outputs generated successfully"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create versioned PDF asset
        run: |
          echo "üìÑ Creating versioned PDF asset..."

          # Verify PDF exists before processing
          if [ ! -f "dist/resume.pdf" ]; then
            echo "‚ö†Ô∏è dist/resume.pdf not found, checking for alternative formats"

            # Look for any PDF in dist directory
            PDF_FILES=$(find dist -name "*.pdf" -type f | head -1)
            if [ -n "$PDF_FILES" ]; then
              echo "‚úÖ Found alternative PDF: $PDF_FILES"
              cp "$PDF_FILES" "rafael-sathler-${{ needs.release-please.outputs.tag_name }}.pdf"
            else
              echo "‚ùå No PDF files found in dist directory"
              echo "üîß Creating placeholder asset to maintain release integrity"
              echo "PDF generation failed during build process" > "rafael-sathler-${{ needs.release-please.outputs.tag_name }}-ERROR.txt"
              echo "::warning::PDF asset creation failed - placeholder created instead"
            fi
          else
            # Create versioned PDF with cleaner naming
            echo "‚úÖ Creating versioned PDF: rafael-sathler-${{ needs.release-please.outputs.tag_name }}.pdf"
            cp dist/resume.pdf "rafael-sathler-${{ needs.release-please.outputs.tag_name }}.pdf"
          fi

      - name: Upload versioned PDF to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì§ Uploading assets to release..."

          TAG_NAME="${{ needs.release-please.outputs.tag_name }}"
          PDF_FILE="rafael-sathler-${TAG_NAME}.pdf"
          ERROR_FILE="rafael-sathler-${TAG_NAME}-ERROR.txt"

          # Upload with retry mechanism and comprehensive error handling
          UPLOAD_SUCCESS=false
          for attempt in 1 2 3; do
            echo "üîÑ Upload attempt $attempt/3..."

            # Upload PDF if it exists
            if [ -f "$PDF_FILE" ]; then
              if gh release upload "$TAG_NAME" "$PDF_FILE" --clobber 2>/dev/null; then
                echo "‚úÖ Successfully uploaded $PDF_FILE"
                UPLOAD_SUCCESS=true
                break
              else
                echo "‚ö†Ô∏è Failed to upload $PDF_FILE (attempt $attempt)"
              fi
            # Upload error placeholder if PDF failed
            elif [ -f "$ERROR_FILE" ]; then
              if gh release upload "$TAG_NAME" "$ERROR_FILE" --clobber 2>/dev/null; then
                echo "‚ö†Ô∏è Successfully uploaded error placeholder $ERROR_FILE"
                UPLOAD_SUCCESS=true
                break
              else
                echo "‚ö†Ô∏è Failed to upload error file (attempt $attempt)"
              fi
            else
              echo "‚ùå No files to upload found"
              break
            fi

            if [ $attempt -lt 3 ]; then
              echo "üîÑ Retrying upload in 5 seconds..."
              sleep 5
            fi
          done

          if [ "$UPLOAD_SUCCESS" = "false" ]; then
            echo "‚ö†Ô∏è Asset upload failed after all attempts"
            echo "::warning::PDF asset could not be uploaded to release"
            # Don't fail the workflow - deployment should still succeed
          else
            echo "‚úÖ Asset upload completed successfully"
          fi

          # Verify the release was created properly
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "‚úÖ Release $TAG_NAME verified and accessible"
          else
            echo "‚ö†Ô∏è Release verification failed, but deployment continues"
          fi
