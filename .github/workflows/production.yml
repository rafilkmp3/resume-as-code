---
name: Production Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      emergency_reason:
        description: 'Emergency production deployment reason'
        required: false
        type: string

concurrency:
  group: production-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy-production:
    name: Deploy to Production (GitHub Pages)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      DOCKER_BUILDKIT: 1
      BUILDX_NO_DEFAULT_ATTESTATIONS: 1
      # Production environment variables
      URL: 'https://rafilkmp3.github.io/resume-as-code/'
      NODE_ENV: 'production'
      GITHUB_PAGES: 'true'
      NETLIFY: 'false'
      CONTEXT: 'production'
      DEPLOY_PRIME_URL: 'https://rafilkmp3.github.io/resume-as-code/'
      DEPLOY_URL: 'https://rafilkmp3.github.io/resume-as-code/'

    steps:
      - name: Checkout Release
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Configure Git for CI
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main
          git config --global advice.defaultBranchName false
          git config --global advice.detachedHead false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Configure Node.js for CI
        run: |
          echo "NODE_OPTIONS=--no-deprecation --no-warnings" >> "$GITHUB_ENV"
          echo "NODE_NO_WARNINGS=1" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry for cache
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Production Release
        env:
          GITHUB_SHA: ${{ github.event.release.target_commitish }}
          GITHUB_REF_NAME: ${{ github.event.release.tag_name }}
          APP_VERSION: ${{ github.event.release.tag_name }}
        run: |
          echo "🏗️ Building production release ${{ github.event.release.tag_name }}"
          
          docker buildx build \
            --file docker/Dockerfile \
            --target builder \
            --platform linux/amd64 \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF_NAME="${GITHUB_REF_NAME}" \
            --build-arg APP_VERSION="${APP_VERSION}" \
            --build-arg BUILD_CONTEXT=production \
            --build-arg NODE_ENV=production \
            --build-arg GITHUB_PAGES=true \
            --build-arg NETLIFY=false \
            --build-arg CONTEXT=production \
            --build-arg DEPLOY_URL=https://rafilkmp3.github.io/resume-as-code/ \
            --build-arg URL=https://rafilkmp3.github.io/resume-as-code/ \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --output type=local,dest=dist \
            .

      - name: Upload Production Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-release-${{ github.event.release.tag_name }}
          path: dist/
          retention-days: 30

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Production Deployment Summary
        run: |
          echo "# 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Notes:** [View Release](${{ github.event.release.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🌐 Live Production Site" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 [**View Resume**](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production (GitHub Pages)" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** \`${{ github.event.release.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Target Commit:** [\`${{ github.event.release.target_commitish }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.event.release.target_commitish }})" >> $GITHUB_STEP_SUMMARY
          echo "**Published by:** ${{ github.event.release.author.login }}" >> $GITHUB_STEP_SUMMARY

  production-smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    timeout-minutes: 5
    env:
      CI: true
      NODE_ENV: production
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        continue-on-error: true
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        continue-on-error: true
        with:
          node-version: '22'

      - name: Production Site Health Check
        continue-on-error: true
        run: |
          echo "🏥 Running production health checks..."
          
          # Wait for deployment to be available
          sleep 30
          
          # Check site is accessible
          SITE_URL="https://rafilkmp3.github.io/resume-as-code/"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Production site is accessible (HTTP $HTTP_STATUS)"
          else
            echo "⚠️ Production site returned HTTP $HTTP_STATUS"
          fi
          
          # Check basic content
          CONTENT_CHECK=$(curl -s "$SITE_URL" | grep -i "resume\|portfolio\|cv" | wc -l || echo "0")
          
          if [ "$CONTENT_CHECK" -gt "0" ]; then
            echo "✅ Resume content detected"
          else
            echo "⚠️ Resume content not detected"
          fi
          
          echo "🎉 Production deployment health check complete"

      - name: Production Test Summary
        if: always()
        run: |
          echo "## 🧪 Production Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Site accessibility check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Content validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Basic functionality test" >> $GITHUB_STEP_SUMMARY