name: Post Artifact Image to PR

on:
  workflow_call:
    inputs:
      artifact-name:
        description: 'Name of the artifact containing the image'
        required: true
        type: string
      image-path:
        description: 'Path to the image file within the artifact'
        required: true
        type: string
      pr-number:
        description: 'PR number to post comment to'
        required: true
        type: string
      comment-title:
        description: 'Title for the PR comment'
        required: false
        type: string
        default: 'ðŸ“Š Test Results'
      workflow-name:
        description: 'Name of the workflow that generated the artifact'
        required: false
        type: string
        default: 'Test Workflow'

jobs:
  post-artifact-image:
    name: Post Artifact Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ./artifacts
      
      - name: Upload image to GitHub
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: pr-comment-image-${{ inputs.pr-number }}
          path: ./artifacts/${{ inputs.image-path }}
          retention-days: 1
      
      - name: Post image to PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const prNumber = ${{ inputs.pr-number }};
            const artifactName = '${{ inputs.artifact-name }}';
            const imagePath = './artifacts/${{ inputs.image-path }}';
            const commentTitle = '${{ inputs.comment-title }}';
            const workflowName = '${{ inputs.workflow-name }}';
            
            // Check if image exists
            if (!fs.existsSync(imagePath)) {
              console.log(`Image not found at ${imagePath}`);
              return;
            }
            
            // Read image as base64
            const imageBuffer = fs.readFileSync(imagePath);
            const imageBase64 = imageBuffer.toString('base64');
            const imageExt = path.extname(imagePath).toLowerCase();
            
            // Determine MIME type
            let mimeType = 'image/png';
            if (imageExt === '.jpg' || imageExt === '.jpeg') {
              mimeType = 'image/jpeg';
            } else if (imageExt === '.svg') {
              mimeType = 'image/svg+xml';
            }
            
            const commentBody = `## ${commentTitle}
            
            Generated by **${workflowName}** workflow:
            
            ![${artifactName}](data:${mimeType};base64,${imageBase64})
            
            ---
            *Artifact: \`${artifactName}\` â€¢ Image: \`${{ inputs.image-path }}\`*`;
            
            // Check if we already have a comment for this workflow
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes(commentTitle) &&
              comment.body.includes(workflowName)
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
              console.log(`Updated existing comment for ${workflowName}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
              console.log(`Created new comment for ${workflowName}`);
            }