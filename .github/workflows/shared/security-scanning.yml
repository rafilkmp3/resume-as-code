name: 🔒 Security Scanning

on:
  workflow_call:
    inputs:
      scan_target:
        description: 'Target for security scanning (repository, dependencies, secrets, containers)'
        required: false
        default: 'dependencies'
        type: string
      severity_threshold:
        description: 'Minimum severity level to report (low, medium, high, critical)'
        required: false
        default: 'medium'
        type: string
      artifact_retention_days:
        description: 'How many days to retain security scan artifacts'
        required: false
        type: number
        default: 30
    outputs:
      vulnerabilities_found:
        description: 'Number of vulnerabilities found'
        value: ${{ jobs.security-scan.outputs.vulnerabilities_found }}
      critical_count:
        description: 'Number of critical vulnerabilities'
        value: ${{ jobs.security-scan.outputs.critical_count }}
      high_count:
        description: 'Number of high severity vulnerabilities'
        value: ${{ jobs.security-scan.outputs.high_count }}
      scan_status:
        description: 'Overall security scan status (pass/fail)'
        value: ${{ jobs.security-scan.outputs.scan_status }}

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      vulnerabilities_found: ${{ steps.security-results.outputs.vulnerabilities_found }}
      critical_count: ${{ steps.security-results.outputs.critical_count }}
      high_count: ${{ steps.security-results.outputs.high_count }}
      scan_status: ${{ steps.security-results.outputs.scan_status }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: NPM Security Audit
        id: npm-audit
        run: |
          echo "🔍 Running NPM security audit..."
          
          # Create security results directory
          mkdir -p security-results
          
          # Run npm audit with JSON output
          npm audit --audit-level=low --json > security-results/npm-audit.json 2>&1 || true
          
          # Parse results
          if [[ -f "security-results/npm-audit.json" ]]; then
            VULNERABILITIES=$(jq -r '.metadata.vulnerabilities.total // 0' security-results/npm-audit.json 2>/dev/null || echo "0")
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' security-results/npm-audit.json 2>/dev/null || echo "0")
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' security-results/npm-audit.json 2>/dev/null || echo "0")
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' security-results/npm-audit.json 2>/dev/null || echo "0")
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' security-results/npm-audit.json 2>/dev/null || echo "0")
            
            echo "📊 NPM Audit Results:"
            echo "  Total vulnerabilities: $VULNERABILITIES"
            echo "  Critical: $CRITICAL"
            echo "  High: $HIGH" 
            echo "  Moderate: $MODERATE"
            echo "  Low: $LOW"
            
            # Store for later aggregation
            echo "$VULNERABILITIES" > security-results/npm-total.txt
            echo "$CRITICAL" > security-results/npm-critical.txt
            echo "$HIGH" > security-results/npm-high.txt
          fi

      - name: OSV Scanner (Open Source Vulnerabilities)
        id: osv-scan
        run: |
          echo "🔍 Running OSV Scanner..."
          
          # Install OSV Scanner
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          
          # Run OSV scan with JSON output
          ./osv-scanner --format json --output security-results/osv-results.json . || true
          
          if [[ -f "security-results/osv-results.json" ]]; then
            OSV_VULNS=$(jq '.results[].packages[].vulnerabilities // [] | length' security-results/osv-results.json 2>/dev/null | awk '{sum += $1} END {print sum+0}')
            echo "📊 OSV Scanner found: $OSV_VULNS vulnerabilities"
            echo "$OSV_VULNS" > security-results/osv-total.txt
          else
            echo "0" > security-results/osv-total.txt
          fi

      - name: TruffleHog Secret Detection
        id: truffleHog-scan
        run: |
          echo "🔍 Running TruffleHog secret detection..."
          
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Context-aware scanning based on GitHub event
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "🔄 PR Mode: Scanning changes from base to head"
            truffleHog git --base=${{ github.event.pull_request.base.sha }} --head=${{ github.event.pull_request.head.sha }} --json > security-results/trufflehog-results.json 2>/dev/null || true
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "🔄 Push Mode: Scanning last commit"
            truffleHog git --since-commit=${{ github.sha }}~1 --json > security-results/trufflehog-results.json 2>/dev/null || true
          else
            echo "🔄 Full Repository Scan"
            truffleHog filesystem . --json > security-results/trufflehog-results.json 2>/dev/null || true
          fi
          
          # Count secrets found
          if [[ -f "security-results/trufflehog-results.json" ]]; then
            SECRETS_FOUND=$(jq -s 'length' security-results/trufflehog-results.json 2>/dev/null || echo "0")
            echo "📊 TruffleHog found: $SECRETS_FOUND potential secrets"
            echo "$SECRETS_FOUND" > security-results/secrets-total.txt
          else
            echo "0" > security-results/secrets-total.txt
          fi

      - name: Trivy Container Security Scanning
        id: trivy-scan
        if: inputs.scan_target == 'containers' || inputs.scan_target == 'repository'
        run: |
          echo "🔍 Running Trivy security scan..."
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan filesystem for vulnerabilities
          trivy fs --format json --output security-results/trivy-results.json . || true
          
          if [[ -f "security-results/trivy-results.json" ]]; then
            TRIVY_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' security-results/trivy-results.json 2>/dev/null || echo "0")
            echo "📊 Trivy found: $TRIVY_VULNS high/critical vulnerabilities"
            echo "$TRIVY_VULNS" > security-results/trivy-total.txt
          else
            echo "0" > security-results/trivy-total.txt
          fi

      - name: Aggregate Security Results
        id: security-results
        run: |
          echo "📊 Aggregating security scan results..."
          
          # Read individual scan results
          NPM_TOTAL=$(cat security-results/npm-total.txt 2>/dev/null || echo "0")
          NPM_CRITICAL=$(cat security-results/npm-critical.txt 2>/dev/null || echo "0")
          NPM_HIGH=$(cat security-results/npm-high.txt 2>/dev/null || echo "0")
          OSV_TOTAL=$(cat security-results/osv-total.txt 2>/dev/null || echo "0")
          SECRETS_TOTAL=$(cat security-results/secrets-total.txt 2>/dev/null || echo "0")
          TRIVY_TOTAL=$(cat security-results/trivy-total.txt 2>/dev/null || echo "0")
          
          # Calculate totals
          TOTAL_VULNERABILITIES=$((NPM_TOTAL + OSV_TOTAL + TRIVY_TOTAL))
          TOTAL_CRITICAL=$((NPM_CRITICAL))
          TOTAL_HIGH=$((NPM_HIGH))
          
          # Determine scan status based on severity threshold
          SCAN_STATUS="pass"
          case "${{ inputs.severity_threshold }}" in
            "critical")
              if [[ $TOTAL_CRITICAL -gt 0 ]]; then
                SCAN_STATUS="fail"
              fi
              ;;
            "high")
              if [[ $TOTAL_CRITICAL -gt 0 ]] || [[ $TOTAL_HIGH -gt 0 ]]; then
                SCAN_STATUS="fail"
              fi
              ;;
            "medium"|"moderate")
              if [[ $TOTAL_VULNERABILITIES -gt 0 ]]; then
                SCAN_STATUS="fail"
              fi
              ;;
            "low")
              if [[ $TOTAL_VULNERABILITIES -gt 0 ]] || [[ $SECRETS_TOTAL -gt 0 ]]; then
                SCAN_STATUS="fail"
              fi
              ;;
          esac
          
          # Output results
          echo "vulnerabilities_found=$TOTAL_VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "critical_count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo "scan_status=$SCAN_STATUS" >> $GITHUB_OUTPUT
          
          echo "🔒 Security Scan Summary:"
          echo "  Total vulnerabilities: $TOTAL_VULNERABILITIES"
          echo "  Critical: $TOTAL_CRITICAL"
          echo "  High: $TOTAL_HIGH"
          echo "  Secrets found: $SECRETS_TOTAL"
          echo "  Scan status: $SCAN_STATUS"

      - name: Create Security Summary
        run: |
          echo "# 🔒 Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Target:** ${{ inputs.scan_target }}" >> $GITHUB_STEP_SUMMARY
          echo "**Severity Threshold:** ${{ inputs.severity_threshold }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_VULNS="${{ steps.security-results.outputs.vulnerabilities_found }}"
          CRITICAL="${{ steps.security-results.outputs.critical_count }}"
          HIGH="${{ steps.security-results.outputs.high_count }}"
          STATUS="${{ steps.security-results.outputs.scan_status }}"
          
          echo "## 📊 Security Results" >> $GITHUB_STEP_SUMMARY
          echo "| Scanner | Vulnerabilities | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Audit | $(cat security-results/npm-total.txt 2>/dev/null || echo "0") | $([ "$(cat security-results/npm-total.txt 2>/dev/null || echo "0")" == "0" ] && echo "✅ Clean" || echo "⚠️ Issues") |" >> $GITHUB_STEP_SUMMARY
          echo "| OSV Scanner | $(cat security-results/osv-total.txt 2>/dev/null || echo "0") | $([ "$(cat security-results/osv-total.txt 2>/dev/null || echo "0")" == "0" ] && echo "✅ Clean" || echo "⚠️ Issues") |" >> $GITHUB_STEP_SUMMARY
          echo "| TruffleHog | $(cat security-results/secrets-total.txt 2>/dev/null || echo "0") secrets | $([ "$(cat security-results/secrets-total.txt 2>/dev/null || echo "0")" == "0" ] && echo "✅ Clean" || echo "🚨 Secrets") |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy | $(cat security-results/trivy-total.txt 2>/dev/null || echo "0") | $([ "$(cat security-results/trivy-total.txt 2>/dev/null || echo "0")" == "0" ] && echo "✅ Clean" || echo "⚠️ Issues") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🎯 Overall Assessment" >> $GITHUB_STEP_SUMMARY
          if [[ "$STATUS" == "pass" ]]; then
            echo "🎉 **SECURITY SCAN PASSED** - No issues above threshold detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚨 **SECURITY SCAN FAILED** - Issues found above ${{ inputs.severity_threshold }} threshold" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Critical Issues:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "**High Severity:** $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "**Total Vulnerabilities:** $TOTAL_VULNS" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: security-results/
          retention-days: ${{ inputs.artifact_retention_days }}