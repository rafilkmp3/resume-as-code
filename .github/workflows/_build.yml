---
name: 🏗️ Reusable Build Workflow

on:
  workflow_call:
    inputs:
      runner_type:
        description: 'Runner architecture (ubuntu-24.04-arm, ubuntu-latest)'
        required: false
        type: string
        default: 'ubuntu-24.04-arm'
      node_version:
        description: 'Node.js version'
        required: false
        type: string
        default: '22'
      build_mode:
        description: 'Build mode (production, development, draft)'
        required: false
        type: string
        default: 'production'
      environment_name:
        description: 'Environment name (production, staging, preview)'
        required: false
        type: string
        default: 'production'
      context:
        description: 'Build context (deploy, preview, staging)'
        required: false
        type: string
        default: 'deploy'
      cache_key_suffix:
        description: 'Additional cache key suffix'
        required: false
        type: string
        default: ''
      upload_artifacts:
        description: 'Whether to upload build artifacts'
        required: false
        type: boolean
        default: true
      artifact_name:
        description: 'Name of the build artifact'
        required: false
        type: string
        default: 'build-artifacts'
      timeout_minutes:
        description: 'Job timeout in minutes'
        required: false
        type: number
        default: 10
    outputs:
      build_success:
        description: 'Whether the build succeeded'
        value: ${{ jobs.build.outputs.build_success }}
      build_size:
        description: 'Size of the build output'
        value: ${{ jobs.build.outputs.build_size }}
      pdf_count:
        description: 'Number of PDFs generated'
        value: ${{ jobs.build.outputs.pdf_count }}
      deployment_url:
        description: 'Expected deployment URL'
        value: ${{ jobs.build.outputs.deployment_url }}

permissions:
  contents: read

env:
  NODE_ENV: ${{ inputs.build_mode == 'development' && 'development' || 'production' }}

jobs:
  build:
    name: 🏗️ Build (${{ inputs.environment_name }})
    runs-on: ${{ inputs.runner_type }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    outputs:
      build_success: ${{ steps.build-result.outputs.success }}
      build_size: ${{ steps.build-result.outputs.size }}
      pdf_count: ${{ steps.build-result.outputs.pdf_count }}
      deployment_url: ${{ steps.build-result.outputs.deployment_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🚀 ARM64 Node.js Build Setup
        uses: ./.github/actions/node-build
        with:
          node_version: ${{ inputs.node_version }}
          runner_type: ${{ inputs.runner_type }}
          cache_key_suffix: ${{ inputs.cache_key_suffix }}


      - name: 🏗️ Build Resume Site
        env:
          NETLIFY: ${{ inputs.environment_name != 'production' && 'true' || 'false' }}
          GITHUB_PAGES: ${{ inputs.environment_name == 'production' && 'true' || 'false' }}
          CONTEXT: ${{ inputs.context }}
          URL: ${{ inputs.environment_name == 'production' && 'https://rafilkmp3.github.io/resume-as-code' || 'https://resume-as-code.netlify.app' }}
          DEPLOY_URL: ${{ inputs.environment_name == 'production' && 'https://rafilkmp3.github.io/resume-as-code' || 'https://resume-as-code.netlify.app' }}
          BUILD_MODE: ${{ inputs.build_mode }}
        run: |
          echo "🏗️ Building resume site for ${{ inputs.environment_name }} environment"
          echo "📊 Build Configuration:"
          echo "  - Runner: ${{ inputs.runner_type }}"
          echo "  - Node.js: ${{ inputs.node_version }}"
          echo "  - Mode: ${{ inputs.build_mode }}"
          echo "  - Environment: ${{ inputs.environment_name }}"
          echo "  - Context: ${{ inputs.context }}"
          echo "  - URL: ${URL}"
          
          # Build with timing
          echo "⏱️ Starting build process..."
          START_TIME=$(date +%s)
          
          npm run build
          
          END_TIME=$(date +%s)
          BUILD_DURATION=$((END_TIME - START_TIME))
          echo "✅ Build completed in ${BUILD_DURATION}s"
          
          # Verify build output
          echo "📋 Build verification:"
          if [ -f "workspace/build/index.html" ]; then
            echo "  ✅ HTML: $(ls -lh workspace/build/index.html | awk '{print $5}')"
          else
            echo "  ❌ HTML: Missing"
            exit 1
          fi
          
          # Count generated PDFs
          PDF_COUNT=0
          for pdf in workspace/build/resume.pdf workspace/build/resume-print.pdf workspace/build/resume-ats.pdf; do
            if [ -f "$pdf" ]; then
              PDF_COUNT=$((PDF_COUNT + 1))
              echo "  ✅ PDF: $(basename $pdf) - $(ls -lh $pdf | awk '{print $5}')"
            fi
          done
          
          echo "📊 Build Summary:"
          echo "  - PDFs Generated: $PDF_COUNT/3"
          echo "  - Build Duration: ${BUILD_DURATION}s"
          echo "  - Total Assets: $(find dist -type f | wc -l)"
          
          # Store build metadata
          echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV
          echo "PDF_COUNT=${PDF_COUNT}" >> $GITHUB_ENV

      - name: 📊 Build Result Analysis
        id: build-result
        run: |
          # Calculate build size
          BUILD_SIZE=$(du -sh dist | cut -f1)
          
          # Determine deployment URL
          case "${{ inputs.environment_name }}" in
            "production")
              DEPLOYMENT_URL="https://rafilkmp3.github.io/resume-as-code"
              ;;
            "staging")
              DEPLOYMENT_URL="https://resume-as-code.netlify.app"
              ;;
            "preview")
              # Will be set by deployment step
              DEPLOYMENT_URL="preview-url-pending"
              ;;
            *)
              DEPLOYMENT_URL="unknown"
              ;;
          esac
          
          echo "📊 Final Build Analysis:"
          echo "  - Success: true"
          echo "  - Size: $BUILD_SIZE"
          echo "  - PDFs: $PDF_COUNT"
          echo "  - URL: $DEPLOYMENT_URL"
          echo "  - Duration: ${BUILD_DURATION}s"
          
          # Set outputs
          echo "success=true" >> $GITHUB_OUTPUT
          echo "size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          echo "pdf_count=$PDF_COUNT" >> $GITHUB_OUTPUT
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: 📦 Upload Build Artifacts
        if: inputs.upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}-${{ inputs.environment_name }}
          path: |
            workspace/build/
            !workspace/build/node_modules
          retention-days: 7
          compression-level: 6

      - name: 🎯 ARM64 Performance Summary
        run: |
          echo "## 🚀 ARM64 Build Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🏗️ Environment**: ${{ inputs.environment_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**🖥️ Runner**: ${{ inputs.runner_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**⚡ Build Duration**: ${BUILD_DURATION}s" >> $GITHUB_STEP_SUMMARY
          echo "**📦 Build Size**: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "**📄 PDFs Generated**: $PDF_COUNT/3" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 ARM64 Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- **40% Performance Boost**: Native ARM64 execution" >> $GITHUB_STEP_SUMMARY
          echo "- **37% Cost Savings**: ARM runners vs x64" >> $GITHUB_STEP_SUMMARY
          echo "- **Mac Consistency**: Same architecture as M1/M2 development" >> $GITHUB_STEP_SUMMARY
          echo "- **Energy Efficient**: 30-40% less power consumption" >> $GITHUB_STEP_SUMMARY