name: 🚀 Lighthouse Performance Testing

on:
  workflow_call:
    inputs:
      target_url:
        description: 'URL to test for performance'
        required: true
        type: string
      environment_name:
        description: 'Environment name (preview, staging, production)'
        required: true
        type: string
      budget_path:
        description: 'Path to Lighthouse budget.json file'
        required: false
        type: string
        default: './budget.json'
      artifact_retention_days:
        description: 'How many days to retain lighthouse artifacts'
        required: false
        type: number
        default: 7
    outputs:
      performance_score:
        description: 'Lighthouse performance score'
        value: ${{ jobs.lighthouse-test.outputs.performance_score }}
      accessibility_score:
        description: 'Lighthouse accessibility score'
        value: ${{ jobs.lighthouse-test.outputs.accessibility_score }}
      best_practices_score:
        description: 'Lighthouse best practices score'
        value: ${{ jobs.lighthouse-test.outputs.best_practices_score }}
      seo_score:
        description: 'Lighthouse SEO score'
        value: ${{ jobs.lighthouse-test.outputs.seo_score }}
      fcp:
        description: 'First Contentful Paint'
        value: ${{ jobs.lighthouse-test.outputs.fcp }}
      lcp:
        description: 'Largest Contentful Paint'
        value: ${{ jobs.lighthouse-test.outputs.lcp }}
      cls:
        description: 'Cumulative Layout Shift'
        value: ${{ jobs.lighthouse-test.outputs.cls }}
      speed_index:
        description: 'Speed Index'
        value: ${{ jobs.lighthouse-test.outputs.speed_index }}

permissions:
  contents: read

jobs:
  lighthouse-test:
    name: 🚀 Lighthouse Analysis
    runs-on: ubuntu-24.04-arm  # ARM64 compatible
    timeout-minutes: 10
    outputs:
      performance_score: ${{ steps.lighthouse-results.outputs.performance_score }}
      accessibility_score: ${{ steps.lighthouse-results.outputs.accessibility_score }}
      best_practices_score: ${{ steps.lighthouse-results.outputs.best_practices_score }}
      seo_score: ${{ steps.lighthouse-results.outputs.seo_score }}
      fcp: ${{ steps.lighthouse-results.outputs.fcp }}
      lcp: ${{ steps.lighthouse-results.outputs.lcp }}
      cls: ${{ steps.lighthouse-results.outputs.cls }}
      speed_index: ${{ steps.lighthouse-results.outputs.speed_index }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Wait for site availability
        run: |
          echo "🌐 Testing site availability: ${{ inputs.target_url }}"
          
          # Wait up to 5 minutes for site to be available
          timeout 300 bash -c 'until curl -f -s "${{ inputs.target_url }}" > /dev/null; do 
            echo "⏳ Waiting for site to be available..."
            sleep 10
          done'
          
          echo "✅ Site is available and ready for testing"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: 🌐 Setup Chrome (ARM64 Compatible)
        uses: ./.github/actions/setup-chrome-arm64

      - name: Run Lighthouse CI
        id: lighthouse-ci
        run: |
          echo "🚀 Installing and running Lighthouse CI with ARM64 stability improvements..."
          
          # Install Lighthouse CI with specific version for stability
          npm install -g @lhci/cli@0.15.x
          
          echo "📊 Running Lighthouse CI autorun for: ${{ inputs.target_url }}"
          
          # ARM64-optimized Chrome flags for better stability
          CHROME_FLAGS="--no-sandbox --disable-setuid-sandbox --headless=new --disable-dev-shm-usage --disable-extensions --disable-gpu --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-features=TranslateUI --no-first-run --disable-default-apps --disable-popup-blocking --disable-background-networking --disable-sync --metrics-recording-only --no-pings --mute-audio --disable-ipc-flooding-protection --memory-pressure-off --disable-software-rasterizer --disable-background-media-suspend"
          
          echo "🔧 Using ARM64-optimized Chrome flags for stability"
          echo "Chrome flags: $CHROME_FLAGS"
          
          # Create lighthouse config for better reliability
          cat > lighthouse-config.json << 'EOF'
          {
            "extends": "lighthouse:default",
            "settings": {
              "maxWaitForFcp": 30000,
              "maxWaitForLoad": 35000,
              "networkQuietThresholdMs": 5000,
              "cpuQuietThresholdMs": 5000,
              "formFactor": "desktop",
              "throttling": {
                "rttMs": 40,
                "throughputKbps": 10240,
                "cpuSlowdownMultiplier": 1,
                "requestLatencyMs": 0,
                "downloadThroughputKbps": 0,
                "uploadThroughputKbps": 0
              },
              "screenEmulation": {
                "mobile": false,
                "width": 1350,
                "height": 940,
                "deviceScaleFactor": 1,
                "disabled": false
              },
              "emulatedUserAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
          }
          EOF
          
          # Run with improved error handling and retry logic
          set +e  # Don't exit on error, capture output
          
          for attempt in 1 2 3; do
            echo "🔄 Attempt $attempt/3: Running Lighthouse CI..."
            
            LHCI_OUTPUT=$(lhci autorun \
              --upload.target=temporary-public-storage \
              --collect.url="${{ inputs.target_url }}" \
              --collect.settings.chromeFlags="$CHROME_FLAGS" \
              --collect.numberOfRuns=1 \
              --collect.settings.output=json \
              --collect.settings.outputPath=./lighthouse-reports \
              --collect.settings.configPath=./lighthouse-config.json \
              --collect.settings.throttlingMethod=provided \
              --collect.startServerCommand="" \
              --collect.startServerReadyPattern="" \
              --collect.startServerTimeout=0 2>&1)
            LHCI_EXIT_CODE=$?
            
            echo "$LHCI_OUTPUT"
            
            # Check if we got valid results
            if [[ $LHCI_EXIT_CODE -eq 0 ]] && [[ -d "./lighthouse-reports" ]]; then
              echo "✅ Lighthouse CI succeeded on attempt $attempt"
              break
            elif [[ $attempt -eq 3 ]]; then
              echo "⚠️ Lighthouse CI failed after 3 attempts, but continuing with available data..."
            else
              echo "⚠️ Attempt $attempt failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          set -e  # Re-enable exit on error
          
          # Extract the report URL from LHCI output
          REPORT_URL=$(echo "$LHCI_OUTPUT" | grep -o 'https://storage.googleapis.com/lighthouse-infrastructure.appspot.com/reports/[^[:space:]]*' | head -1)
          if [[ -n "$REPORT_URL" ]]; then
            echo "🌐 Lighthouse Report URL: $REPORT_URL"
            echo "lighthouse_report_url=$REPORT_URL" >> $GITHUB_OUTPUT
          fi

      - name: Extract Lighthouse Results
        id: lighthouse-results
        run: |
          echo "📊 Extracting Lighthouse performance metrics..."
          
          # Look for reports in multiple locations
          RESULTS_FILE=""
          
          # First, try the new outputPath location
          if [[ -d "./lighthouse-reports" ]]; then
            RESULTS_FILE=$(find ./lighthouse-reports -name "*.json" | head -1)
          fi
          
          # Then try .lighthouseci directory for lhr-*.json files
          if [[ ! -f "$RESULTS_FILE" ]]; then
            RESULTS_FILE=$(find .lighthouseci -name "lhr-*.json" 2>/dev/null | head -1)
          fi
          
          # Try other patterns in .lighthouseci
          if [[ ! -f "$RESULTS_FILE" ]]; then
            RESULTS_FILE=$(find .lighthouseci -name "*.report.json" 2>/dev/null | head -1)
          fi
          
          # Find any JSON with categories data (excluding links.json)
          if [[ ! -f "$RESULTS_FILE" ]]; then
            for dir in ./lighthouse-reports .lighthouseci; do
              if [[ -d "$dir" ]]; then
                for file in $(find "$dir" -name "*.json" 2>/dev/null | grep -v links.json); do
                  if jq -e '.categories' "$file" >/dev/null 2>&1; then
                    RESULTS_FILE="$file"
                    break
                  fi
                done
                if [[ -f "$RESULTS_FILE" ]]; then break; fi
              fi
            done
          fi
          
          if [[ -f "$RESULTS_FILE" ]] && jq -e '.categories' "$RESULTS_FILE" >/dev/null 2>&1; then
            echo "📄 Processing results from: $RESULTS_FILE"
            
            # Extract scores (0-100) with better error handling
            PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$RESULTS_FILE" 2>/dev/null || echo "N/A")
            ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$RESULTS_FILE" 2>/dev/null || echo "N/A")
            BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "$RESULTS_FILE" 2>/dev/null || echo "N/A")
            SEO=$(jq -r '.categories.seo.score * 100 | floor' "$RESULTS_FILE" 2>/dev/null || echo "N/A")
            
            # Extract Core Web Vitals
            FCP=$(jq -r '.audits["first-contentful-paint"].numericValue' "$RESULTS_FILE" 2>/dev/null | awk '{printf "%.0fms", $1}' || echo "N/A")
            LCP=$(jq -r '.audits["largest-contentful-paint"].numericValue' "$RESULTS_FILE" 2>/dev/null | awk '{printf "%.0fms", $1}' || echo "N/A")
            CLS=$(jq -r '.audits["cumulative-layout-shift"].numericValue' "$RESULTS_FILE" 2>/dev/null || echo "N/A")
            SPEED_INDEX=$(jq -r '.audits["speed-index"].numericValue' "$RESULTS_FILE" 2>/dev/null | awk '{printf "%.0fms", $1}' || echo "N/A")
            
            # Output results
            echo "performance_score=$PERFORMANCE" >> $GITHUB_OUTPUT
            echo "accessibility_score=$ACCESSIBILITY" >> $GITHUB_OUTPUT
            echo "best_practices_score=$BEST_PRACTICES" >> $GITHUB_OUTPUT
            echo "seo_score=$SEO" >> $GITHUB_OUTPUT
            echo "fcp=$FCP" >> $GITHUB_OUTPUT
            echo "lcp=$LCP" >> $GITHUB_OUTPUT
            echo "cls=$CLS" >> $GITHUB_OUTPUT
            echo "speed_index=$SPEED_INDEX" >> $GITHUB_OUTPUT
            
            echo "📊 Lighthouse Results Summary:"
            echo "  Performance: $PERFORMANCE/100"
            echo "  Accessibility: $ACCESSIBILITY/100"
            echo "  Best Practices: $BEST_PRACTICES/100"
            echo "  SEO: $SEO/100"
            echo "  FCP: $FCP"
            echo "  LCP: $LCP"
            echo "  CLS: $CLS"
            echo "  Speed Index: $SPEED_INDEX"
          else
            echo "⚠️ No valid Lighthouse results file found with categories data"
            echo "🔍 Debug: Files found in lighthouse directories:"
            
            for dir in ./lighthouse-reports .lighthouseci; do
              if [[ -d "$dir" ]]; then
                echo "📁 Directory: $dir"
                find "$dir" -type f -name "*.json" 2>/dev/null | while read file; do
                  echo "  - $file ($(wc -c < "$file" 2>/dev/null || echo "0") bytes)"
                  if [[ "$file" != *"links.json" ]]; then
                    echo "    Structure: $(jq -r 'keys[]?' "$file" 2>/dev/null | head -3 | tr '\n' ' ' || echo "Invalid JSON")"
                  fi
                done
              else
                echo "📁 Directory: $dir (not found)"
              fi
            done
            
            # Set N/A values
            echo "performance_score=N/A" >> $GITHUB_OUTPUT
            echo "accessibility_score=N/A" >> $GITHUB_OUTPUT
            echo "best_practices_score=N/A" >> $GITHUB_OUTPUT
            echo "seo_score=N/A" >> $GITHUB_OUTPUT
            echo "fcp=N/A" >> $GITHUB_OUTPUT
            echo "lcp=N/A" >> $GITHUB_OUTPUT
            echo "cls=N/A" >> $GITHUB_OUTPUT
            echo "speed_index=N/A" >> $GITHUB_OUTPUT
          fi

      - name: Create Lighthouse Summary
        run: |
          echo "# 🚀 Lighthouse Performance Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ inputs.target_url }}" >> $GITHUB_STEP_SUMMARY
          
          # Add report URL if available
          if [[ -n "${{ steps.lighthouse-ci.outputs.lighthouse_report_url }}" ]]; then
            echo "**📊 Full Report:** [${{ steps.lighthouse-ci.outputs.lighthouse_report_url }}](${{ steps.lighthouse-ci.outputs.lighthouse_report_url }})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Lighthouse Scores" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Score | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ steps.lighthouse-results.outputs.performance_score }}/100 | $([ "${{ steps.lighthouse-results.outputs.performance_score }}" -ge "90" ] 2>/dev/null && echo "✅ Excellent" || echo "⚠️ Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ steps.lighthouse-results.outputs.accessibility_score }}/100 | $([ "${{ steps.lighthouse-results.outputs.accessibility_score }}" -ge "90" ] 2>/dev/null && echo "✅ Excellent" || echo "⚠️ Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
          echo "| Best Practices | ${{ steps.lighthouse-results.outputs.best_practices_score }}/100 | $([ "${{ steps.lighthouse-results.outputs.best_practices_score }}" -ge "90" ] 2>/dev/null && echo "✅ Excellent" || echo "⚠️ Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
          echo "| SEO | ${{ steps.lighthouse-results.outputs.seo_score }}/100 | $([ "${{ steps.lighthouse-results.outputs.seo_score }}" -ge "90" ] 2>/dev/null && echo "✅ Excellent" || echo "⚠️ Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ⚡ Core Web Vitals" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| First Contentful Paint | ${{ steps.lighthouse-results.outputs.fcp }} | ≤1.8s | $(echo "${{ steps.lighthouse-results.outputs.fcp }}" | sed 's/ms//' | awk '{if($1 <= 1800) print "✅ Good"; else print "⚠️ Needs Improvement"}') |" >> $GITHUB_STEP_SUMMARY
          echo "| Largest Contentful Paint | ${{ steps.lighthouse-results.outputs.lcp }} | ≤2.5s | $(echo "${{ steps.lighthouse-results.outputs.lcp }}" | sed 's/ms//' | awk '{if($1 <= 2500) print "✅ Good"; else print "⚠️ Needs Improvement"}') |" >> $GITHUB_STEP_SUMMARY
          echo "| Cumulative Layout Shift | ${{ steps.lighthouse-results.outputs.cls }} | ≤0.1 | $(echo "${{ steps.lighthouse-results.outputs.cls }}" | awk '{if($1 <= 0.1) print "✅ Good"; else print "⚠️ Needs Improvement"}') |" >> $GITHUB_STEP_SUMMARY
          echo "| Speed Index | ${{ steps.lighthouse-results.outputs.speed_index }} | ≤3.4s | $(echo "${{ steps.lighthouse-results.outputs.speed_index }}" | sed 's/ms//' | awk '{if($1 <= 3400) print "✅ Good"; else print "⚠️ Needs Improvement"}') |" >> $GITHUB_STEP_SUMMARY

      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports-${{ inputs.environment_name }}-${{ github.run_id }}
          path: |
            .lighthouseci/
            lhci_reports/
            lighthouse-reports/
          retention-days: ${{ inputs.artifact_retention_days }}
