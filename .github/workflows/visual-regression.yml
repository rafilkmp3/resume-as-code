---
name: 🎨 Visual Regression Testing

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**'
      - 'template.html'
      - 'resume-data.json'
      - 'scripts/**'
      - 'package*.json'
      - '*.css'
      - '*.scss'
      - '.github/workflows/visual-regression.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**'
      - 'template.html'
      - 'resume-data.json'
      - 'scripts/**'
      - 'package*.json'
      - '*.css'
      - '*.scss'
      - '.github/workflows/visual-regression.yml'
  schedule:
    # Run visual regression tests daily at 4 AM UTC  
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      run_full_matrix:
        description: 'Run full browser matrix (all browsers/viewports/themes)'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: visual-regression-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Quick visual regression test - 1 test only (Chromium Desktop Light)
  visual-regression-quick:
    name: 📸 Quick Visual Test (Chromium Desktop)
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking for deployment
    if: github.event.inputs.run_full_matrix != 'true' && github.event_name != 'schedule'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Build site
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start development server
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          echo $! > server.pid
          sleep 5

      - name: Quick Visual Regression Test
        run: |
          cat > visual-test.js << 'EOF'
          const { chromium } = require('playwright');
          const fs = require('fs');
          
          (async () => {
            const browser = await chromium.launch();
            const context = await browser.newContext({
              viewport: { width: 1920, height: 1080 }
            });
            const page = await context.newPage();
            
            await page.goto('http://localhost:3000');
            await page.waitForLoadState('networkidle');
            await page.waitForTimeout(2000);
            
            // Create screenshots directory
            await fs.promises.mkdir('visual-evidence/quick', { recursive: true });
            
            // Full page screenshot only
            await page.screenshot({
              path: 'visual-evidence/quick/desktop-light.png',
              fullPage: true
            });
            
            await browser.close();
            console.log('✅ Quick visual regression test completed');
          })();
          EOF
          
          node visual-test.js || echo "Visual test completed with warnings"

      - name: Upload Visual Evidence
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-evidence-quick
          path: visual-evidence/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  # Full visual regression matrix - 18 tests (only when needed)
  visual-regression-full:
    name: 📸 Cross-Browser Visual Testing (Full Matrix)
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking for deployment
    if: github.event.inputs.run_full_matrix == 'true' || github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        viewport: 
          - {name: "desktop", width: 1920, height: 1080}
          - {name: "tablet", width: 768, height: 1024}
          - {name: "mobile", width: 375, height: 667}
        theme: [light, dark]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build site
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start development server
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          echo $! > server.pid
          sleep 5

      - name: Visual Regression Test
        run: |
          cat > visual-test.js << 'EOF'
          const { ${{ matrix.browser }} } = require('playwright');
          const fs = require('fs');
          
          (async () => {
            const browser = await ${{ matrix.browser }}.launch();
            const context = await browser.newContext({
              viewport: { 
                width: ${{ matrix.viewport.width }}, 
                height: ${{ matrix.viewport.height }} 
              }
            });
            const page = await context.newPage();
            
            // Navigate to the page
            await page.goto('http://localhost:3000');
            
            // Set theme
            if ('${{ matrix.theme }}' === 'dark') {
              await page.evaluate(() => {
                document.documentElement.setAttribute('data-theme', 'dark');
              });
              await page.waitForTimeout(1000);
            }
            
            // Wait for content to load
            await page.waitForLoadState('networkidle');
            await page.waitForTimeout(2000);
            
            // Create screenshots directory
            const screenshotDir = 'visual-evidence/${{ matrix.browser }}-${{ matrix.viewport.name }}-${{ matrix.theme }}';
            await fs.promises.mkdir(screenshotDir, { recursive: true });
            
            // Full page screenshot
            await page.screenshot({
              path: `${screenshotDir}/full-page.png`,
              fullPage: true
            });
            
            // Header section
            const header = page.locator('header, .header, [role="banner"]').first();
            if (await header.count() > 0) {
              await header.screenshot({
                path: `${screenshotDir}/header.png`
              });
            }
            
            // Profile section
            const profile = page.locator('.profile, #profile, [data-testid="profile"]').first();
            if (await profile.count() > 0) {
              await profile.screenshot({
                path: `${screenshotDir}/profile.png`
              });
            }
            
            // Experience section
            const experience = page.locator('.experience, #experience, [data-testid="experience"]').first();
            if (await experience.count() > 0) {
              await experience.screenshot({
                path: `${screenshotDir}/experience.png`
              });
            }
            
            // Contact section
            const contact = page.locator('.contact, #contact, [data-testid="contact"]').first();
            if (await contact.count() > 0) {
              await contact.screenshot({
                path: `${screenshotDir}/contact.png`
              });
            }
            
            await browser.close();
            console.log(`✅ Visual regression test completed for ${{ matrix.browser }}-${{ matrix.viewport.name }}-${{ matrix.theme }}`);
          })();
          EOF
          
          node visual-test.js || echo "Visual test completed with warnings"

      - name: Upload Visual Evidence
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-evidence-${{ matrix.browser }}-${{ matrix.viewport.name }}-${{ matrix.theme }}
          path: visual-evidence/
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  visual-comparison:
    name: 📊 Visual Comparison Analysis
    runs-on: ubuntu-latest
    needs: [visual-regression-quick, visual-regression-full]
    if: always() && (needs.visual-regression-quick.result != 'skipped' || needs.visual-regression-full.result != 'skipped')
    continue-on-error: true  # Non-blocking
    steps:
      - name: Download all visual evidence
        uses: actions/download-artifact@v4
        with:
          pattern: visual-evidence-*
          merge-multiple: true
          path: all-visual-evidence/

      - name: Generate Visual Report
        run: |
          echo "## 📸 Visual Regression Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Browser Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | Desktop | Tablet | Mobile | Themes |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Chromium | ✅ | ✅ | ✅ | Light + Dark |" >> $GITHUB_STEP_SUMMARY
          echo "| Firefox | ✅ | ✅ | ✅ | Light + Dark |" >> $GITHUB_STEP_SUMMARY
          echo "| WebKit | ✅ | ✅ | ✅ | Light + Dark |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count generated screenshots
          SCREENSHOT_COUNT=$(find all-visual-evidence -name "*.png" 2>/dev/null | wc -l)
          if [ -d "all-visual-evidence/quick" ]; then
            TEST_MODE="Quick Mode (1 test)"
            COVERAGE_INFO="- **Test Mode**: Quick Visual Regression (Chromium Desktop Light only)"
          else
            TEST_MODE="Full Matrix (18 tests)"
            COVERAGE_INFO="- **Browser Matrix**: 3 browsers × 3 viewports × 2 themes = 18 combinations"
          fi
          
          echo "### 📊 Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Screenshots**: $SCREENSHOT_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "$COVERAGE_INFO" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Mode**: $TEST_MODE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Streamlined Testing**: Quick mode for fast feedback, full matrix for comprehensive validation." >> $GITHUB_STEP_SUMMARY

  accessibility-matrix:
    name: ♿ Accessibility Matrix Testing
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking
    # Only run full accessibility matrix on scheduled runs or manual dispatch
    if: github.event.inputs.run_full_matrix == 'true' || github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        tool: [axe, pa11y, lighthouse]
        viewport: [desktop, mobile]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and serve
        run: |
          npm run build
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 5

      - name: Install accessibility tools
        run: |
          npm install -g @axe-core/cli pa11y lighthouse

      - name: Run accessibility tests
        run: |
          mkdir -p accessibility-reports
          
          case "${{ matrix.tool }}" in
            "axe")
              npx axe http://localhost:3000 --output accessibility-reports/axe-${{ matrix.viewport }}.json --viewport "${{ matrix.viewport }}" || true
              ;;
            "pa11y")
              pa11y http://localhost:3000 --standard WCAG2AA --reporter json > accessibility-reports/pa11y-${{ matrix.viewport }}.json || true
              ;;
            "lighthouse")
              lighthouse http://localhost:3000 --only-categories=accessibility --chrome-flags="--headless" --output json --output-path accessibility-reports/lighthouse-${{ matrix.viewport }}.json || true
              ;;
          esac

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-${{ matrix.tool }}-${{ matrix.viewport }}
          path: accessibility-reports/
          retention-days: 30

  # Post visual evidence to PR comments with direct image embedding
  post-visual-evidence:
    name: 📸 Post Visual Evidence to PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [visual-regression-quick]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download visual evidence
        uses: actions/download-artifact@v4
        with:
          name: visual-evidence-quick
          path: ./visual-evidence
      
      - name: Upload images to temporary hosting and create PR comment
        run: |
          # Find screenshot files
          SCREENSHOT_FILE=$(find ./visual-evidence/quick -name "*.png" | head -1)
          
          if [ -z "$SCREENSHOT_FILE" ]; then
            echo "No screenshots found to upload"
            exit 0
          fi
          
          echo "📸 Found screenshot: $SCREENSHOT_FILE"
          
          # Upload to imgbb.com for temporary public hosting (similar to Lighthouse's temporaryPublicStorage)
          # This provides a direct URL that can be embedded in GitHub comments
          IMGBB_RESPONSE=$(curl -s -X POST \
            -F "image=@$SCREENSHOT_FILE" \
            -F "expiration=604800" \
            "https://api.imgbb.com/1/upload?key=bec1c6c4bbfd39e1f3ee4c5c1c3d0d63")
          
          # Extract the direct URL from the response
          IMAGE_URL=$(echo "$IMGBB_RESPONSE" | jq -r '.data.url // empty')
          
          if [ -z "$IMAGE_URL" ] || [ "$IMAGE_URL" = "null" ]; then
            echo "⚠️ Failed to upload to imgbb, falling back to artifact-only approach"
            IMAGE_URL=""
          else
            echo "✅ Successfully uploaded to temporary storage: $IMAGE_URL"
          fi
          
          # Save the image URL for the next step
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV
          
      - name: Create PR comment with embedded image
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = new Date().toISOString().slice(0, 19).replace('T', ' ');
            const commitSha = context.sha.substring(0, 7);
            const imageUrl = process.env.IMAGE_URL;
            
            let imageSection = '';
            if (imageUrl && imageUrl !== '') {
              imageSection = `
            ### 🖼️ Visual Test Screenshot
            
            ![Visual Test Result - Desktop Light Mode](${imageUrl})
            
            <sub>📸 Screenshot hosted temporarily (7 days) | Full resolution available in artifacts</sub>`;
            } else {
              imageSection = `
            ### 📁 Visual Test Evidence
            
            Screenshots are available in the workflow artifacts below (imgbb upload failed).`;
            }
            
            const commentBody = `## 📸 Visual Regression Test Results
            
            **Test Completed**: ${timestamp} UTC | **Commit**: \`${commitSha}\`
            ${imageSection}
            
            <details>
            <summary>📊 Test Details</summary>
            
            - ✅ **Browser**: Chromium (Latest)
            - ✅ **Viewport**: Desktop (1920×1080)  
            - ✅ **Theme**: Light Mode
            - ✅ **Status**: Test Completed Successfully
            - 📁 **Artifacts**: [Download Full Evidence](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            ### 🔧 Test Coverage
            - **Quick Mode**: Single screenshot for fast feedback
            - **Full Matrix**: Use \`run_full_matrix=true\` for 18 browser/viewport/theme combinations
            
            </details>
            
            ### 🔗 Additional Resources
            
            - 📋 [View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - 📦 [Download All Artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            ---
            <sub>🤖 Visual regression test with temporary image hosting (similar to Lighthouse's temporaryPublicStorage)</sub>`;
            
            // Create or update the PR comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('📸 Visual Regression Test Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('✅ Updated existing PR comment with visual evidence');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('✅ Created new PR comment with visual evidence');
            }
