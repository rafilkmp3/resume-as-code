---
name: 🧪 Test Chrome ARM64 Setup Action

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '.github/actions/setup-chrome-arm64/**'
      - '.github/workflows/test-setup-chrome-arm64.yml'
  push:
    branches: [main]
    paths:
      - '.github/actions/setup-chrome-arm64/**'

concurrency:
  group: test-chrome-arm64-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  selftest:
    name: 🧪 Chrome ARM64 Self-Test (${{ matrix.mode }})
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        mode: [chrome, puppeteer, lighthouse, chromedriver]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js for testing tools
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Use Chrome ARM64 Action
        id: chrome-setup
        uses: ./.github/actions/setup-chrome-arm64
        with:
          chrome-version: 'stable'
          install-chromedriver: ${{ matrix.mode == 'chromedriver' }}

      - name: Basic Environment Assertions
        run: |
          echo "🔍 Testing Chrome ARM64 Action Environment Setup"
          echo "=================================================="
          echo "Architecture: $(uname -m)"
          echo "Chrome Version: ${{ steps.chrome-setup.outputs.chrome-version }}"
          echo "Chrome Path: ${{ steps.chrome-setup.outputs.chrome-path }}"
          
          # Verify ARM64 architecture
          test "$(uname -m)" = "aarch64" || (echo "❌ Not running on ARM64"; exit 1)
          echo "✅ Running on ARM64 architecture"
          
          # Test required environment variables are set
          test -n "$CHROME_BIN" && echo "✅ CHROME_BIN=$CHROME_BIN"
          test -n "$PUPPETEER_EXECUTABLE_PATH" && echo "✅ PUPPETEER_EXECUTABLE_PATH=$PUPPETEER_EXECUTABLE_PATH"
          test -n "$LHCI_CHROME_PATH" && echo "✅ LHCI_CHROME_PATH=$LHCI_CHROME_PATH"
          test -n "$CHROME_PATH" && echo "✅ CHROME_PATH=$CHROME_PATH"
          
          # Verify Chrome executable exists and is executable
          test -x "$CHROME_BIN" || (echo "❌ Chrome executable not found or not executable"; exit 1)
          echo "✅ Chrome executable is accessible"
          
          # Verify CI wrapper script exists
          test -x "/usr/local/bin/chrome-ci" && echo "✅ CI wrapper script exists"
          
          echo "🎉 Basic environment assertions passed"

      - name: Chrome Headless Functionality Test
        if: matrix.mode == 'chrome'
        run: |
          echo "🌐 Testing Chrome headless functionality..."
          
          # Test basic Chrome version
          "$CHROME_BIN" --version
          
          # Test headless mode with debugging port
          echo "🚀 Starting Chrome in headless mode with remote debugging..."
          USER_DATA_DIR="$(mktemp -d)"
          "$CHROME_BIN" --headless=new --no-sandbox --disable-gpu \
            --disable-dev-shm-usage --disable-extensions \
            --remote-debugging-port=9222 \
            --user-data-dir="$USER_DATA_DIR" \
            about:blank &
          
          CHROME_PID=$!
          echo "Chrome PID: $CHROME_PID"
          
          # Wait for Chrome to be ready
          echo "⏳ Waiting for Chrome DevTools to be ready..."
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:9222/json/version >/dev/null 2>&1; then
              echo "✅ Chrome DevTools endpoint is responsive"
              break
            fi
            echo "Attempt $i/30: Waiting for Chrome..."
            sleep 1
          done
          
          # Verify DevTools API response
          if curl -sf http://127.0.0.1:9222/json/version; then
            echo "✅ Chrome DevTools API working correctly"
            curl -sf http://127.0.0.1:9222/json/version | jq '.Browser, .webSocketDebuggerUrl'
          else
            echo "❌ Chrome DevTools API not responding"
            exit 1
          fi
          
          # Test CI wrapper script
          echo "🧪 Testing CI wrapper script..."
          if /usr/local/bin/chrome-ci --version; then
            echo "✅ CI wrapper script works correctly"
          else
            echo "❌ CI wrapper script failed"
            exit 1
          fi
          
          # Cleanup
          kill $CHROME_PID 2>/dev/null || true
          rm -rf "$USER_DATA_DIR"
          
          echo "🎉 Chrome headless functionality test passed"

      - name: Puppeteer Integration Test
        if: matrix.mode == 'puppeteer'
        run: |
          echo "🎭 Testing Puppeteer integration with ARM64 Chrome..."
          
          # Install Puppeteer Core (no bundled Chrome)
          npm install puppeteer-core@latest
          
          # Test Puppeteer with our Chrome
          node -e "
          const puppeteer = require('puppeteer-core');
          
          (async () => {
            console.log('🚀 Launching Chrome via Puppeteer...');
            console.log('Using Chrome executable:', process.env.PUPPETEER_EXECUTABLE_PATH);
            
            const browser = await puppeteer.launch({
              executablePath: process.env.PUPPETEER_EXECUTABLE_PATH,
              headless: 'new',
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-extensions',
                '--disable-gpu'
              ]
            });
            
            console.log('✅ Chrome launched successfully');
            
            const page = await browser.newPage();
            console.log('📄 New page created');
            
            await page.goto('https://example.com', {
              waitUntil: 'load',
              timeout: 30000
            });
            
            const title = await page.title();
            console.log('📋 Page title:', title);
            
            if (title.includes('Example')) {
              console.log('✅ Successfully navigated to test page');
            } else {
              console.log('❌ Unexpected page title');
              process.exit(1);
            }
            
            await browser.close();
            console.log('🎉 Puppeteer integration test passed');
          })().catch(err => {
            console.error('❌ Puppeteer test failed:', err);
            process.exit(1);
          });
          "

      - name: Lighthouse CI Integration Test
        if: matrix.mode == 'lighthouse'
        run: |
          echo "🚀 Testing Lighthouse CI integration with ARM64 Chrome..."
          
          # Install Lighthouse CI
          npm install -g @lhci/cli@0.15.x
          
          echo "🌐 Using Chrome path: $LHCI_CHROME_PATH"
          echo "🧪 Running Lighthouse CI on test URL..."
          
          # Create output directory explicitly
          mkdir -p ./lighthouse-test-reports
          
          # Run Lighthouse CI with our Chrome
          # Using Context7 best practices for Chrome flags
          echo "🚀 Running LHCI collect..."
          lhci collect \
            --url=https://example.com \
            --settings.chromePath="$LHCI_CHROME_PATH" \
            --settings.chromeFlags="--no-sandbox --disable-setuid-sandbox --headless=new --disable-gpu --disable-dev-shm-usage --disable-extensions --disable-web-security" \
            --numberOfRuns=1 \
            --settings.output=json \
            --settings.outputPath=./lighthouse-test-reports \
            --settings.onlyCategories=performance,accessibility
          
          echo "📋 Lighthouse CI completed, checking results..."
          
          # Debug: Check what directories/files were created
          echo "🔍 Available directories and files:"
          find . -name "*.json" -o -name "*lighthouse*" -type d | head -10
          
          # Look for reports in multiple possible locations
          REPORT_FILE=""
          
          # First check the specified output path
          if [ -d "./lighthouse-test-reports" ] && [ -n "$(ls -A ./lighthouse-test-reports/*.json 2>/dev/null)" ]; then
            REPORT_FILE=$(ls ./lighthouse-test-reports/*.json | head -1)
          # Then check LHCI default directory
          elif [ -d "./.lighthouseci" ] && [ -n "$(ls -A ./.lighthouseci/*.json 2>/dev/null)" ]; then
            REPORT_FILE=$(ls ./.lighthouseci/*.json | head -1)
          # Check for lhci reports directory
          elif [ -d "./lhci_reports" ] && [ -n "$(ls -A ./lhci_reports/*.json 2>/dev/null)" ]; then
            REPORT_FILE=$(ls ./lhci_reports/*.json | head -1)
          fi
          
          if [ -n "$REPORT_FILE" ] && [ -f "$REPORT_FILE" ]; then
            echo "✅ Lighthouse report found: $REPORT_FILE"
            
            # Extract basic metrics if jq is available
            if command -v jq >/dev/null 2>&1; then
              # Check if the file has the expected structure
              if jq -e '.categories.performance.score' "$REPORT_FILE" >/dev/null 2>&1; then
                PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$REPORT_FILE" 2>/dev/null || echo "N/A")
                echo "📊 Performance Score: $PERFORMANCE/100"
                echo "✅ Lighthouse CI integration test passed"
              else
                echo "⚠️ Lighthouse report structure unexpected, but report exists"
                echo "📄 Report sample:"
                head -3 "$REPORT_FILE" || echo "Could not read report"
                echo "✅ Lighthouse CI integration test passed (report generated)"
              fi
            else
              echo "✅ Lighthouse report file exists (jq not available for parsing)"
            fi
          else
            echo "❌ No Lighthouse report found in any expected location"
            echo "🔍 Debug information:"
            echo "📁 lighthouse-test-reports contents:"
            ls -la ./lighthouse-test-reports/ 2>/dev/null || echo "Directory not found"
            echo "📁 .lighthouseci contents:"
            ls -la ./.lighthouseci/ 2>/dev/null || echo "Directory not found"
            echo "📁 Current directory JSON files:"
            find . -name "*.json" -type f | head -5
            exit 1
          fi

      - name: ChromeDriver Integration Test
        if: matrix.mode == 'chromedriver'
        run: |
          echo "🚗 Testing ChromeDriver integration with ARM64 Chrome..."
          
          # Verify ChromeDriver outputs
          echo "ChromeDriver Path: ${{ steps.chrome-setup.outputs.chromedriver-path }}"
          test -n "${{ steps.chrome-setup.outputs.chromedriver-path }}" || (echo "❌ ChromeDriver path not set"; exit 1)
          test -x "${{ steps.chrome-setup.outputs.chromedriver-path }}" || (echo "❌ ChromeDriver not executable"; exit 1)
          
          # Check versions
          echo "🔍 Chrome version:"
          "$CHROME_BIN" --version
          echo "🔍 ChromeDriver version:"
          "${{ steps.chrome-setup.outputs.chromedriver-path }}" --version
          
          # Extract major versions for compatibility check
          CHROME_MAJOR=$("$CHROME_BIN" --version | sed 's/.*Chromium \([0-9]*\).*/\1/')
          CHROMEDRIVER_MAJOR=$("${{ steps.chrome-setup.outputs.chromedriver-path }}" --version | sed 's/.*ChromeDriver \([0-9]*\).*/\1/')
          
          echo "Chrome major version: $CHROME_MAJOR"
          echo "ChromeDriver major version: $CHROMEDRIVER_MAJOR"
          
          if [ "$CHROME_MAJOR" = "$CHROMEDRIVER_MAJOR" ]; then
            echo "✅ Chrome and ChromeDriver versions are compatible"
          else
            echo "⚠️ Version mismatch between Chrome ($CHROME_MAJOR) and ChromeDriver ($CHROMEDRIVER_MAJOR)"
            echo "This may still work, continuing test..."
          fi
          
          # Start ChromeDriver and test HTTP API
          echo "🚀 Starting ChromeDriver..."
          "${{ steps.chrome-setup.outputs.chromedriver-path }}" \
            --port=9515 \
            --url-base=/wd/hub \
            --whitelisted-ips='' \
            >/tmp/chromedriver.log 2>&1 &
          
          CHROMEDRIVER_PID=$!
          echo "ChromeDriver PID: $CHROMEDRIVER_PID"
          
          # Wait for ChromeDriver to be ready
          echo "⏳ Waiting for ChromeDriver to be ready..."
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:9515/status >/dev/null 2>&1; then
              echo "✅ ChromeDriver is responsive"
              break
            fi
            echo "Attempt $i/30: Waiting for ChromeDriver..."
            sleep 1
          done
          
          # Test ChromeDriver status endpoint
          if curl -sf http://127.0.0.1:9515/status; then
            echo "✅ ChromeDriver HTTP API working correctly"
            STATUS_RESPONSE=$(curl -sf http://127.0.0.1:9515/status)
            echo "Status response: $STATUS_RESPONSE"
            
            if echo "$STATUS_RESPONSE" | jq -e '.value.ready' >/dev/null 2>&1; then
              echo "✅ ChromeDriver reports ready status"
            else
              echo "⚠️ ChromeDriver status response structure unexpected"
            fi
          else
            echo "❌ ChromeDriver HTTP API not responding"
            echo "📋 ChromeDriver logs:"
            cat /tmp/chromedriver.log || echo "No logs available"
            exit 1
          fi
          
          # Cleanup
          kill $CHROMEDRIVER_PID 2>/dev/null || true
          
          echo "🎉 ChromeDriver integration test passed"

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chrome-arm64-test-${{ matrix.mode }}-${{ github.run_id }}
          path: |
            lighthouse-test-reports/
            /tmp/chromedriver.log
          retention-days: 3

  guard-non-arm64:
    name: 🛡️ Non-ARM64 Architecture Guard
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    continue-on-error: true
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Test Action on x86_64 (Should Fail Gracefully)
        id: test-x64
        continue-on-error: true
        uses: ./.github/actions/setup-chrome-arm64
      
      - name: Verify Expected Failure on Non-ARM64
        run: |
          echo "🔍 Testing behavior on non-ARM64 architecture"
          echo "Architecture: $(uname -m)"
          
          if [ "$(uname -m)" != "aarch64" ]; then
            echo "✅ Running on non-ARM64 as expected: $(uname -m)"
            
            if [ "${{ steps.test-x64.outcome }}" = "failure" ]; then
              echo "✅ Action correctly failed on non-ARM64 architecture"
            else
              echo "⚠️ Action did not fail on non-ARM64 - this may be unexpected"
              echo "Outcome: ${{ steps.test-x64.outcome }}"
            fi
          else
            echo "⚠️ Unexpectedly running on ARM64 in guard test"
          fi

  integration-canary:
    name: 🐤 Integration Canary Test
    needs: [selftest]
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Use Chrome ARM64 Action
        id: chrome-setup
        uses: ./.github/actions/setup-chrome-arm64

      - name: Install Dependencies
        run: npm ci

      - name: Test Real Build with Chrome
        env:
          NETLIFY: 'false'
          BUILD_MODE: 'draft'
          NODE_ENV: 'development'
        run: |
          echo "🏗️ Testing real build process with ARM64 Chrome..."
          echo "Chrome Version: ${{ steps.chrome-setup.outputs.chrome-version }}"
          echo "PUPPETEER_EXECUTABLE_PATH: $PUPPETEER_EXECUTABLE_PATH"
          
          # Run the actual build process
          npm run build
          
          # Verify PDFs were generated
          if [ -f "dist/resume.pdf" ]; then
            echo "✅ PDF generation successful with ARM64 Chrome"
            ls -la dist/*.pdf || echo "No PDF files found"
          else
            echo "❌ PDF generation failed"
            exit 1
          fi

  test-summary:
    name: 📋 Test Summary
    needs: [selftest, guard-non-arm64, integration-canary]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate Test Summary
        run: |
          echo "# 🧪 Chrome ARM64 Action Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Chrome Headless | ${{ needs.selftest.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Puppeteer Integration | ${{ needs.selftest.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lighthouse CI | ${{ needs.selftest.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ChromeDriver | ${{ needs.selftest.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Non-ARM64 Guard | ${{ needs.guard-non-arm64.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Canary | ${{ needs.integration-canary.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.selftest.result }}" = "success" ] && [ "${{ needs.integration-canary.result }}" = "success" ]; then
            echo "✅ **All tests passed!** The Chrome ARM64 action is ready for production use." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed.** Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi