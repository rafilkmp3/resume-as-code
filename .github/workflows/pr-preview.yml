---
name: 🔍 PR Preview Deploy & Testing

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  packages: write
  id-token: write

jobs:
  build-and-deploy:
    name: Build & Deploy Preview
    runs-on: ubuntu-24.04-arm
    outputs:
      preview_url: ${{ steps.set-url.outputs.preview_url }}
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--') && !startsWith(github.head_ref, 'release-please--')
    timeout-minutes: 15
    env:
      # Speedlight preview environment variables (Docker-free)
      NETLIFY: 'true'
      NETLIFY_ENV: 'deploy-preview'
      REVIEW_ID: ${{ github.event.pull_request.number }}
      HEAD: ${{ github.event.pull_request.head.ref }}
      BRANCH: ${{ github.event.pull_request.head.ref }}
      CONTEXT: 'deploy-preview'
      DEPLOY_URL: 'https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app'
      NODE_ENV: 'production'
      GITHUB_PAGES: 'false'

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure Git for CI
        run: |
          # Configure git to suppress warnings
          git config --global init.defaultBranch main
          git config --global advice.defaultBranchName false
          git config --global advice.detachedHead false

      - name: Validate Netlify Configuration  # pragma: allowlist secret
        timeout-minutes: 1
        run: |
          echo "🔍 Validating Netlify deployment configuration..." # pragma: allowlist secret
          echo "✅ NETLIFY_AUTH_TOKEN secret configured"
          echo "✅ NETLIFY_SITE_ID secret configured"
          echo "🎉 Netlify deployment ready"

      - name: 🚀 Speedlight Caching (Dependencies + Build Artifacts)
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache
            node_modules
            node_modules/.cache
            dist/assets/images
            dist/assets/optimized
          key: ${{ runner.os }}-speedlight-preview-${{ hashFiles('package-lock.json', 'src/**', 'assets/**') }}
          restore-keys: |
            ${{ runner.os }}-speedlight-preview-
            ${{ runner.os }}-speedlight-

      - name: Setup Node.js (Speedlight)
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Configure Node.js for CI
        run: |
          echo "NODE_NO_WARNINGS=1" >> "$GITHUB_ENV"

      - name: Test Netlify CLI functionality
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}  # pragma: allowlist secret
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}  # pragma: allowlist secret
        timeout-minutes: 2
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: status --json

      - name: 🌐 Setup Chrome (Professional Action)
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable
          install-dependencies: true
        id: setup-chrome

      - name: Configure Puppeteer Chrome Path
        run: |
          echo "PUPPETEER_EXECUTABLE_PATH=${{ steps.setup-chrome.outputs.chrome-path }}" >> $GITHUB_ENV
          echo "✅ Chrome ready for PDF generation: ${{ steps.setup-chrome.outputs.chrome-version }}"

      - name: ⚡ Install Dependencies (with speedlight cache)
        run: |
          echo "📦 Installing dependencies with speedlight cache optimization..."
          if [ -d "node_modules" ] && [ -f "package-lock.json" ]; then
            echo "⚡ SPEEDLIGHT: Dependencies cached and available!"
            npm list >/dev/null 2>&1 || npm ci --prefer-offline --no-audit
          else
            npm ci --prefer-offline --no-audit
          fi

      - name: ⚡ Speedlight Build (Docker-free)
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          APP_VERSION: "preview-${{ github.event.pull_request.number }}"
          BUILD_CONTEXT: "pr"
          URL: "https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app"
          DEPLOY_URL: "https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app"
        run: |
          echo "🚀 SPEEDLIGHT BUILD: PR Preview #${PR_NUMBER}"
          echo "=========================================="
          echo "📋 Build Context: ${BUILD_CONTEXT}"
          echo "🎯 Target URL: ${DEPLOY_URL}"
          echo "📦 Chrome: ${{ steps.setup-chrome.outputs.chrome-version }}"
          echo "⚡ Strategy: Docker-free Node.js with aggressive caching"
          echo ""
          
          # Intelligent build detection
          if [ -d "dist" ] && [ -f "dist/index.html" ]; then
            SOURCE_NEWER=$(find src/ assets/ -newer dist/index.html 2>/dev/null | wc -l)
            if [ "$SOURCE_NEWER" -eq 0 ]; then
              echo "⚡ SPEEDLIGHT: Build artifacts cached and up-to-date!"
              echo "📁 Preview build artifacts (cached):"
              ls -la dist/
              exit 0
            fi
          fi
          
          # Execute build with timing
          echo "🏗️ Building preview with speedlight cache optimization..."
          time npm run build
          
          echo "📁 Preview build artifacts:"
          ls -la dist/

      - name: Start build timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}  # pragma: allowlist secret
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}  # pragma: allowlist secret
          PR_NUMBER: ${{ github.event.pull_request.number }}
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: deploy --json --dir=dist --alias=deploy-preview-${{ env.PR_NUMBER }}

      - name: Set preview URL output
        id: set-url
        run: |
          PREVIEW_URL="https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app"
          echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          echo "✅ Preview URL set: ${PREVIEW_URL}"


      - name: Calculate build duration
        if: always()
        run: |
          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          echo "BUILD_DURATION=${BUILD_DURATION}s" >> $GITHUB_ENV

      - name: Upload build artifacts
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        uses: actions/upload-artifact@v4
        with:
          name: preview-build-${{ env.PR_NUMBER }}-${{ env.HEAD_SHA }}
          path: dist/
          retention-days: 7

  # Smart URL-Based Testing - Tests real deployed URL
  smart-lighthouse-testing:
    name: 🚀 Lighthouse Performance (Real URL)
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--')
    timeout-minutes: 15
    steps:
      - name: Checkout for budget.json
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            budget.json
            
      - name: Smart Lighthouse Performance Testing
        run: |
          echo "🚀 LIGHTHOUSE PERFORMANCE TESTING - REAL DEPLOYMENT"
          echo "=================================================="
          echo "📋 PURPOSE: Test Core Web Vitals on actual deployed site"
          echo "🎯 TARGET: ${{ needs.build-and-deploy.outputs.preview_url }}"
          echo "📊 CONTEXT: PR Preview #${{ github.event.pull_request.number }}"
          echo "✅ METHODOLOGY: Google Lighthouse CI with performance budgets"
          echo "🔗 ADVANTAGE: Tests real user experience, not localhost"
          echo "💰 BUDGET: Web.dev recommended resource and timing budgets"
          echo ""
          
          # Create dynamic Lighthouse config for the deployed URL
          cat > .lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "url": ["${{ needs.build-and-deploy.outputs.preview_url }}"],
                "numberOfRuns": 3,
                "settings": {
                  "preset": "desktop",
                  "onlyCategories": ["performance", "accessibility", "best-practices", "seo"],
                  "chromeFlags": "--no-sandbox --headless=new --disable-gpu --disable-dev-shm-usage --disable-extensions --no-first-run --disable-default-apps --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-renderer-backgrounding",
                  "maxWaitForLoad": 60000,
                  "maxWaitForFcp": 20000,
                  "skipAudits": ["uses-http2"],
                  "throttling": {
                    "rttMs": 40,
                    "throughputKbps": 10240,
                    "cpuSlowdownMultiplier": 1,
                    "requestLatencyMs": 0,
                    "downloadThroughputKbps": 0,
                    "uploadThroughputKbps": 0
                  }
                }
              },
              "assert": {
                "budgetPath": "./budget.json",
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.85}],
                  "categories:accessibility": ["warn", {"minScore": 0.90}],
                  "categories:best-practices": ["warn", {"minScore": 0.85}],
                  "categories:seo": ["warn", {"minScore": 0.85}],
                  "categories:pwa": "off",
                  "first-contentful-paint": ["warn", {"maxNumericValue": 2000}],
                  "largest-contentful-paint": ["warn", {"maxNumericValue": 2500}],
                  "cumulative-layout-shift": ["warn", {"maxNumericValue": 0.1}],
                  "speed-index": ["warn", {"maxNumericValue": 3000}]
                }
              },
              "upload": {
                "target": "temporary-public-storage",
                "temporaryPublicStorage": true
              }
            }
          }
          EOF

      - name: Execute Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
        continue-on-error: true
        id: lighthouse-run
        env:
          # Enable LHCI debugging to capture report URLs
          DEBUG: 'lhci:*'

      - name: Extract Lighthouse Report URLs and Results
        id: lighthouse-results
        run: |
          echo "🔍 EXTRACTING LIGHTHOUSE REPORT URLS AND DETAILED RESULTS"
          
          # Install jq for JSON parsing if not available
          if ! command -v jq >/dev/null 2>&1; then
            echo "📦 Installing jq for JSON parsing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # EXTRACT TEMPORARY PUBLIC STORAGE URLS FROM LIGHTHOUSE CI OUTPUTS
          echo "🔗 CHECKING LIGHTHOUSE CI ACTION OUTPUTS FOR PUBLIC URLS:"
          echo "resultsPath output: '${{ steps.lighthouse-run.outputs.resultsPath }}'"
          echo "links output: '${{ steps.lighthouse-run.outputs.links }}'"
          echo "assertionResults output: '${{ steps.lighthouse-run.outputs.assertionResults }}'"
          
          # Initialize variables
          PUBLIC_REPORT_URLS=""
          HAS_PUBLIC_URLS="false"
          
          # Method 1: Extract from action outputs
          if [ -n "${{ steps.lighthouse-run.outputs.links }}" ] && [ "${{ steps.lighthouse-run.outputs.links }}" != "" ]; then
            echo "✅ Found links output from Lighthouse CI action"
            echo "🔗 Action output links: ${{ steps.lighthouse-run.outputs.links }}"
            PUBLIC_REPORT_URLS="${{ steps.lighthouse-run.outputs.links }}"
            HAS_PUBLIC_URLS="true"
          fi
          
          # Method 2: Check for links.json file
          if [ -f "links.json" ] && [ -s "links.json" ]; then
            echo "📄 Found links.json file with content"
            echo "🔍 Contents of links.json:"
            cat links.json || echo "Cannot read links.json"
            LINKS_CONTENT=$(cat links.json 2>/dev/null || echo "{}")
            if [ -z "$PUBLIC_REPORT_URLS" ]; then
              PUBLIC_REPORT_URLS="$LINKS_CONTENT"
              HAS_PUBLIC_URLS="true"
            fi
          fi
          
          # Method 3: Search LHCI directory for manifest.json (contains report URLs)
          if [ -d ".lighthouseci" ]; then
            echo "📁 Searching .lighthouseci directory for manifest with URLs..."
            if [ -f ".lighthouseci/manifest.json" ]; then
              echo "📄 Found manifest.json in .lighthouseci"
              cat .lighthouseci/manifest.json 2>/dev/null || echo "Cannot read manifest"
              # Extract URLs from manifest if they exist
              MANIFEST_URLS=$(grep -o "https://storage\.googleapis\.com[^\"]*" .lighthouseci/manifest.json 2>/dev/null || echo "")
              if [ -n "$MANIFEST_URLS" ]; then
                echo "✅ Found public storage URLs in manifest:"
                echo "$MANIFEST_URLS"
                if [ -z "$PUBLIC_REPORT_URLS" ]; then
                  PUBLIC_REPORT_URLS="$MANIFEST_URLS"
                  HAS_PUBLIC_URLS="true"
                fi
              fi
            fi
          fi
          
          # Method 4: Search all files for Google Cloud Storage URLs (last resort)
          if [ "$HAS_PUBLIC_URLS" = "false" ]; then
            echo "🔍 Last resort: Searching all files for Google Cloud Storage URLs..."
            FOUND_URLS=$(grep -r "https://storage\.googleapis\.com" . 2>/dev/null | grep -o "https://storage\.googleapis\.com[^\"'[:space:]]*" | head -3 || echo "")
            if [ -n "$FOUND_URLS" ]; then
              echo "✅ Found Google Cloud Storage URLs via global search:"
              echo "$FOUND_URLS"
              PUBLIC_REPORT_URLS="$FOUND_URLS"
              HAS_PUBLIC_URLS="true"
            fi
          fi
          
          # Set final outputs
          echo "public_report_links=$PUBLIC_REPORT_URLS" >> $GITHUB_OUTPUT
          echo "has_public_urls=$HAS_PUBLIC_URLS" >> $GITHUB_OUTPUT
          
          if [ "$HAS_PUBLIC_URLS" = "true" ]; then
            echo "✅ SUCCESSFULLY CAPTURED PUBLIC LIGHTHOUSE REPORTS:"
            echo "$PUBLIC_REPORT_URLS"
          else
            echo "⚠️ No public Lighthouse report URLs found in any location"
          fi
          
          # Debug: Check what files the treosh/lighthouse-ci-action created
          echo "🔍 DEBUG: Looking for Lighthouse results..."
          echo "Current directory contents:"
          ls -la
          
          if [ -d ".lighthouseci" ]; then
            echo "📁 Found .lighthouseci directory contents:"
            find .lighthouseci -type f | head -10
            echo "📊 JSON files in .lighthouseci:"
            find .lighthouseci -name "*.json" -type f | head -5
          else
            echo "❌ No .lighthouseci directory found"
          fi
          
          # Check for lighthouse reports elsewhere
          echo "🔍 Searching for lighthouse reports in current directory:"
          find . -name "*lighthouse*" -type f | head -10
          
          # Look for Lighthouse CI outputs (URLs should be in GITHUB_STEP_SUMMARY or outputs)
          echo "📊 Lighthouse CI Action Outputs:"
          echo "outcome: ${{ steps.lighthouse-run.outcome }}"
          
          # Parse any available Lighthouse report URLs from logs or outputs
          # The temporaryPublicStorage should provide URLs - let's capture them
          # Note: Extract metrics even if Lighthouse CI "fails" due to budget violations
          if [ "${{ steps.lighthouse-run.outcome }}" = "success" ] || [ "${{ steps.lighthouse-run.outcome }}" = "failure" ]; then
            if [ "${{ steps.lighthouse-run.outcome }}" = "success" ]; then
              echo "✅ LIGHTHOUSE ANALYSIS COMPLETED SUCCESSFULLY"
            else
              echo "⚠️ LIGHTHOUSE ANALYSIS COMPLETED WITH BUDGET VIOLATIONS"
            fi
            echo "📊 Performance, accessibility, and SEO scores measured"
            echo "🔗 Public reports should be available via temporaryPublicStorage"
            
            # Try to extract metrics from local results if available
            echo "📁 Looking for Lighthouse results in .lighthouseci directory..."
            if [ -d ".lighthouseci" ]; then
              echo "✅ .lighthouseci directory exists"
              echo "📂 Directory contents:"
              ls -la .lighthouseci/ || echo "❌ Cannot list directory contents"
              
              JSON_FILES=$(find .lighthouseci -name "*.json" -type f 2>/dev/null)
              if [ -n "$JSON_FILES" ]; then
                LIGHTHOUSE_JSON=$(echo "$JSON_FILES" | head -1)
                echo "📄 Found Lighthouse JSON report: $LIGHTHOUSE_JSON"
                echo "📊 File size: $(wc -c < "$LIGHTHOUSE_JSON" 2>/dev/null || echo "unknown") bytes"
                
                # Verify the JSON file has actual content
                if [ -f "$LIGHTHOUSE_JSON" ] && [ -s "$LIGHTHOUSE_JSON" ]; then
                  echo "✅ JSON file exists and has content"
                  echo "🔍 First 200 chars of JSON file:"
                  head -c 200 "$LIGHTHOUSE_JSON" || echo "❌ Cannot read file"
                
                # Extract key metrics using jq
                if command -v jq >/dev/null 2>&1; then
                  # Parse categories with proper null handling
                  PERFORMANCE_SCORE=$(jq -r 'if .categories.performance.score then (.categories.performance.score * 100 | floor) else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
                  ACCESSIBILITY_SCORE=$(jq -r 'if .categories.accessibility.score then (.categories.accessibility.score * 100 | floor) else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A") 
                  BEST_PRACTICES_SCORE=$(jq -r 'if .categories["best-practices"].score then (.categories["best-practices"].score * 100 | floor) else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
                  SEO_SCORE=$(jq -r 'if .categories.seo.score then (.categories.seo.score * 100 | floor) else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
                  
                  # Parse audits with proper null handling
                  FCP=$(jq -r 'if .audits["first-contentful-paint"].displayValue then .audits["first-contentful-paint"].displayValue else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
                  LCP=$(jq -r 'if .audits["largest-contentful-paint"].displayValue then .audits["largest-contentful-paint"].displayValue else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A") 
                  CLS=$(jq -r 'if .audits["cumulative-layout-shift"].displayValue then .audits["cumulative-layout-shift"].displayValue else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
                  SPEED_INDEX=$(jq -r 'if .audits["speed-index"].displayValue then .audits["speed-index"].displayValue else "N/A" end' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
                  
                  # ALWAYS export metrics to GitHub outputs (even if some are N/A)
                  echo "performance_score=${PERFORMANCE_SCORE}" >> $GITHUB_OUTPUT
                  echo "accessibility_score=${ACCESSIBILITY_SCORE}" >> $GITHUB_OUTPUT  
                  echo "best_practices_score=${BEST_PRACTICES_SCORE}" >> $GITHUB_OUTPUT
                  echo "seo_score=${SEO_SCORE}" >> $GITHUB_OUTPUT
                  echo "fcp=${FCP}" >> $GITHUB_OUTPUT
                  echo "lcp=${LCP}" >> $GITHUB_OUTPUT
                  echo "cls=${CLS}" >> $GITHUB_OUTPUT
                  echo "speed_index=${SPEED_INDEX}" >> $GITHUB_OUTPUT
                  
                  echo "📊 EXTRACTED LIGHTHOUSE METRICS (RAW VALUES):"
                  echo "Performance: ${PERFORMANCE_SCORE}% (raw)"
                  echo "Accessibility: ${ACCESSIBILITY_SCORE}% (raw)"
                  echo "Best Practices: ${BEST_PRACTICES_SCORE}% (raw)"
                  echo "SEO: ${SEO_SCORE}% (raw)"
                  echo "FCP: ${FCP} (raw)"
                  echo "LCP: ${LCP} (raw)"
                  echo "CLS: ${CLS} (raw)"
                  echo "Speed Index: ${SPEED_INDEX} (raw)"
                  
                  # Check if we have ANY valid metrics (more lenient condition)
                  if [ "$PERFORMANCE_SCORE" != "N/A" ] || [ "$ACCESSIBILITY_SCORE" != "N/A" ] || [ "$BEST_PRACTICES_SCORE" != "N/A" ] || [ "$SEO_SCORE" != "N/A" ] || [ "$FCP" != "N/A" ] || [ "$LCP" != "N/A" ]; then
                    echo "✅ METRICS VALIDATION: Found valid data - setting has_detailed_metrics=true"
                    echo "has_detailed_metrics=true" >> $GITHUB_OUTPUT
                  else
                    echo "❌ METRICS VALIDATION: All values are N/A - setting has_detailed_metrics=false"
                    echo "has_detailed_metrics=false" >> $GITHUB_OUTPUT
                  fi
                else
                  echo "❌ jq not available for JSON parsing"
                  echo "has_detailed_metrics=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "❌ JSON file is empty or doesn't exist"
                echo "has_detailed_metrics=false" >> $GITHUB_OUTPUT
              fi
              else
                echo "❌ No JSON files found in .lighthouseci directory"
                echo "📂 Available files in .lighthouseci:"
                find .lighthouseci -type f | head -10 || echo "No files found"
                echo "has_detailed_metrics=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ No .lighthouseci directory found"
              echo "📂 Current directory contents:"
              ls -la . | head -10 || echo "Cannot list current directory"
              echo "🔍 Searching for lighthouse-related files globally:"
              find . -name "*lighthouse*" -type f | head -5 || echo "No lighthouse-related files found anywhere"
              echo "has_detailed_metrics=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ LIGHTHOUSE ANALYSIS ENCOUNTERED ISSUES"
            echo "🔧 This is common in CI environments - Chrome headless can be unstable"
            echo "🌐 Manual verification: ${{ needs.build-and-deploy.outputs.preview_url }}"
            echo "has_detailed_metrics=false" >> $GITHUB_OUTPUT
          fi

      - name: Post Lighthouse Results to PR Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.pull_request.number }};
            const previewUrl = "${{ needs.build-and-deploy.outputs.preview_url }}";
            const lighthouseOutcome = "${{ steps.lighthouse-run.outcome }}";
            const hasDetailedMetrics = "${{ steps.lighthouse-results.outputs.has_detailed_metrics }}" === "true";
            
            let commentBody = `## 🚀 Lighthouse Performance Report\n\n`;
            commentBody += `**📊 Target URL**: [${previewUrl}](${previewUrl})\n`;
            commentBody += `**🎯 Context**: PR #${prNumber} Preview Deployment\n`;
            commentBody += `**📅 Tested**: ${new Date().toISOString().split('T')[0]} ${new Date().toTimeString().split(' ')[0]} UTC\n\n`;
            
            // Handle detailed metrics section
            if (hasDetailedMetrics) {
                const performanceScore = "${{ steps.lighthouse-results.outputs.performance_score }}";
                const accessibilityScore = "${{ steps.lighthouse-results.outputs.accessibility_score }}"; 
                const bestPracticesScore = "${{ steps.lighthouse-results.outputs.best_practices_score }}";
                const seoScore = "${{ steps.lighthouse-results.outputs.seo_score }}";
                const fcp = "${{ steps.lighthouse-results.outputs.fcp }}";
                const lcp = "${{ steps.lighthouse-results.outputs.lcp }}";
                const cls = "${{ steps.lighthouse-results.outputs.cls }}";
                const speedIndex = "${{ steps.lighthouse-results.outputs.speed_index }}";
                
                commentBody += `### 📈 Lighthouse Scores\n\n`;
                commentBody += `| Category | Score | Status |\n`;
                commentBody += `|----------|-------|--------|\n`;
                commentBody += `| 🚀 **Performance** | ${performanceScore}% | ${parseFloat(performanceScore) >= 85 ? '✅ Good' : parseFloat(performanceScore) >= 70 ? '⚠️ Needs Improvement' : '❌ Poor'} |\n`;
                commentBody += `| ♿ **Accessibility** | ${accessibilityScore}% | ${parseFloat(accessibilityScore) >= 90 ? '✅ Good' : parseFloat(accessibilityScore) >= 70 ? '⚠️ Needs Improvement' : '❌ Poor'} |\n`;
                commentBody += `| ⚡ **Best Practices** | ${bestPracticesScore}% | ${parseFloat(bestPracticesScore) >= 85 ? '✅ Good' : parseFloat(bestPracticesScore) >= 70 ? '⚠️ Needs Improvement' : '❌ Poor'} |\n`;
                commentBody += `| 🔍 **SEO** | ${seoScore}% | ${parseFloat(seoScore) >= 85 ? '✅ Good' : parseFloat(seoScore) >= 70 ? '⚠️ Needs Improvement' : '❌ Poor'} |\n\n`;
                
                commentBody += `### ⚡ Core Web Vitals\n\n`;
                commentBody += `| Metric | Value | Status |\n`;
                commentBody += `|--------|-------|--------|\n`;
                commentBody += `| **First Contentful Paint** | ${fcp} | ${fcp.includes('s') && parseFloat(fcp) <= 2.5 ? '✅ Good' : '⚠️ Needs Improvement'} |\n`;
                commentBody += `| **Largest Contentful Paint** | ${lcp} | ${lcp.includes('s') && parseFloat(lcp) <= 3.0 ? '✅ Good' : '⚠️ Needs Improvement'} |\n`;
                commentBody += `| **Cumulative Layout Shift** | ${cls} | ${parseFloat(cls) <= 0.1 ? '✅ Good' : '⚠️ Needs Improvement'} |\n`;
                commentBody += `| **Speed Index** | ${speedIndex} | ${speedIndex.includes('s') && parseFloat(speedIndex) <= 3.0 ? '✅ Good' : '⚠️ Needs Improvement'} |\n\n`;
                
                
                commentBody += `### 🔗 Detailed Reports\n\n`;
                
                // Add temporaryPublicStorage URLs if available
                const hasPublicUrls = "${{ steps.lighthouse-results.outputs.has_public_urls }}" === "true";
                const publicReportLinks = "${{ steps.lighthouse-results.outputs.public_report_links }}";
                
                if (hasPublicUrls && publicReportLinks && publicReportLinks.trim() !== "") {
                  commentBody += `🌐 **Google Lighthouse Public Reports** (temporary-public-storage - 7 days):\n\n`;
                  
                  try {
                    // Try to parse as JSON first
                    const reportLinks = JSON.parse(publicReportLinks);
                    if (Array.isArray(reportLinks) && reportLinks.length > 0) {
                      reportLinks.forEach((link, index) => {
                        if (link.startsWith('http')) {
                          commentBody += `${index + 1}. [📊 **Lighthouse Report ${index + 1}**](${link}) - Interactive Google Lighthouse analysis\n`;
                        }
                      });
                    } else if (typeof reportLinks === 'string' && reportLinks.startsWith('http')) {
                      commentBody += `📊 [**Google Lighthouse Public Report**](${reportLinks}) - Full interactive analysis\n`;
                    }
                  } catch (e) {
                    // Not JSON, handle as raw URLs
                    const urls = publicReportLinks.split('\n').filter(line => line.trim().startsWith('http'));
                    if (urls.length > 0) {
                      urls.forEach((url, index) => {
                        commentBody += `${index + 1}. [📊 **Lighthouse Report ${index + 1}**](${url.trim()}) - Interactive Google analysis\n`;
                      });
                    } else if (publicReportLinks.startsWith('http')) {
                      commentBody += `📊 [**Google Lighthouse Public Report**](${publicReportLinks}) - Full interactive analysis\n`;
                    } else {
                      commentBody += `🔗 **Report Data**: ${publicReportLinks}\n`;
                    }
                  }
                  commentBody += `\n💡 **What you get**: Interactive drill-down, detailed recommendations, filmstrip view, and performance waterfall analysis.\n\n`;
                } else {
                  commentBody += `📋 **Lighthouse Reports**: Available in workflow artifacts (check Actions tab)\n`;
                  commentBody += `🔍 **Note**: Public storage URLs not captured - check logs for temporaryPublicStorage details\n\n`;
                }
                
                commentBody += `📊 **Compare with**: [PageSpeed Insights](https://pagespeed.web.dev/analysis/${encodeURIComponent(previewUrl)})\n\n`;
                
                commentBody += `### 💡 Next Steps\n\n`;
                commentBody += `- Review Core Web Vitals scores above\n`;
                commentBody += `- Check [PageSpeed Insights](https://pagespeed.web.dev/analysis/${encodeURIComponent(previewUrl)}) for detailed recommendations\n`;
                commentBody += `- Focus on metrics marked as "Needs Improvement"\n`;
                commentBody += `- Use budget.json thresholds to guide optimizations\n\n`;
                
            } else {
              commentBody += `⚠️ **Lighthouse analysis encountered issues**\n\n`;
              commentBody += `🔧 This is common in CI environments - Chrome headless can be unstable\n`;
              commentBody += `🌐 **Manual verification**: [Test with PageSpeed Insights](https://pagespeed.web.dev/analysis/${encodeURIComponent(previewUrl)})\n\n`;
              commentBody += `### 📊 Alternative Testing\n\n`;
              commentBody += `Since automated Lighthouse failed, please manually verify performance:\n\n`;
              commentBody += `1. **[PageSpeed Insights](https://pagespeed.web.dev/analysis/${encodeURIComponent(previewUrl)})** - Google's official tool\n`;
              commentBody += `2. **[WebPageTest](https://www.webpagetest.org/)** - Advanced performance testing\n`;
              commentBody += `3. **[GTmetrix](https://gtmetrix.com/)** - Performance monitoring\n\n`;
            }
            
            commentBody += `---\n`;
            commentBody += `*🤖 Automated Lighthouse testing on real deployment URL - Updated: ${new Date().toISOString().split('T')[0]} ${new Date().toTimeString().split(' ')[0]} UTC*\n\n`;
            commentBody += `<!-- lighthouse-performance-report-${Date.now()} -->`;
            
            // Find and hide previous Lighthouse reports (Atlantis-style)
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const lighthouseComments = comments.data.filter(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('## 🚀 Lighthouse Performance Report')
            );
            
            let hiddenCount = 0;
            for (const oldComment of lighthouseComments) {
              try {
                const outdatedBody = `<details>\\n<summary>🔒 <strong>Previous Lighthouse Report</strong> - Click to expand</summary>\\n\\n${oldComment.body}\\n\\n---\\n*⚠️ This report has been superseded by a newer Lighthouse analysis.*\\n</details>`;
                
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: oldComment.id,
                  body: outdatedBody,
                });
                hiddenCount++;
              } catch (error) {
                console.log(`⚠️ Could not minimize Lighthouse comment ${oldComment.id}: ${error.message}`);
              }
            }
            
            console.log(`🔒 Minimized ${hiddenCount} previous Lighthouse reports (Atlantis-style)`);
            
            // Post fresh Lighthouse report comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody,
            });
            
            console.log(`✅ Posted comprehensive Lighthouse report to PR #${prNumber} (${hiddenCount} previous reports minimized)`);
            console.log(`🔗 Report includes detailed metrics, Core Web Vitals, and PageSpeed Insights comparison`);

  # Smart Accessibility Testing - Tests real deployed URL
  smart-accessibility-testing:
    name: ♿ Accessibility (Real URL)
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--')
    timeout-minutes: 5
    steps:
      - name: Smart Accessibility Testing
        run: |
          echo "♿ ACCESSIBILITY TESTING - REAL DEPLOYMENT"
          echo "=========================================="
          echo "📋 PURPOSE: WCAG 2.1 AA compliance testing on actual deployed site"
          echo "🎯 TARGET: ${{ needs.build-and-deploy.outputs.preview_url }}"
          echo "📊 CONTEXT: PR Preview #${{ github.event.pull_request.number }}"
          echo "✅ METHODOLOGY: Axe-core accessibility engine"
          echo ""
          
          # Install Axe CLI
          npm install -g @axe-core/cli
          
          # Run accessibility test on real deployment  
          if axe "${{ needs.build-and-deploy.outputs.preview_url }}" --save axe-report.json --chrome-options="--no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage,--disable-extensions,--disable-gpu,--headless=new" --timeout=30000; then
            echo "✅ Axe accessibility test completed successfully"
          else
            echo "⚠️ Accessibility issues found or browser timeout"
            echo "🔧 This is informational - check axe-report.json for details"
          fi
          
          # Ensure report file exists for artifact upload
          if [ ! -f "axe-report.json" ]; then
            echo '{"error": "Axe test failed to generate report", "url": "${{ needs.build-and-deploy.outputs.preview_url }}", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}' > axe-report.json
          fi

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report-pr-${{ github.event.pull_request.number }}
          path: axe-report.json
          retention-days: 7

  preview-info:
    name: PR Preview Information
    runs-on: ubuntu-latest
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--')
    needs: build-and-deploy

    steps:
      - name: Generate PR Preview Summary
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        run: |
          SHORT_SHA="${HEAD_SHA:0:7}"
          SAFE_BRANCH_NAME="${BRANCH_NAME}"
          DEPLOY_URL="https://deploy-preview-${PR_NUMBER}--resume-as-code.netlify.app"

          {
            echo "## 🔍 PR Preview Environment"
            echo ""
            echo "| Resource | URL |"
            echo "|----------|-----|"
            echo "| 🌐 **Live Preview** | [View Preview](${DEPLOY_URL}) |"
            echo "| 📄 **Screen PDF** | [Screen PDF](${DEPLOY_URL}/resume.pdf) |"
            echo "| 🖨️ **Print PDF** | [Print PDF](${DEPLOY_URL}/resume-print.pdf) |"
            echo "| 🤖 **ATS PDF** | [ATS PDF](${DEPLOY_URL}/resume-ats.pdf) |"
            echo ""
            echo "### 📋 Build Information"
            echo "- **PR Number**: #${PR_NUMBER}"
            echo "- **Branch**: \`${SAFE_BRANCH_NAME}\`"
            echo "- **Commit**: \`${SHORT_SHA}\`"
            echo "- **Deploy Status**: ✅ **Ready** - GitHub Actions built & deployed to Netlify"
            echo ""
            echo "### 🧪 Quality Assurance Checklist"
            echo "- [ ] Desktop display validation"
            echo "- [ ] Mobile responsiveness check"
            echo "- [ ] PDF generation verification (all 3 versions)"
            echo "- [ ] Dark/light mode toggle functionality"
            echo "- [ ] QR code display and functionality"
            echo "- [ ] Profile image loading"
            echo "- [ ] Content rendering accuracy"
            echo "- [ ] Browser console error check"
            echo ""
            echo "> 💡 **Tip**: Preview environment automatically updates when you push new commits"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Add PR Preview Comment (Atlantis-style)
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        with:
          script: |
            const prNumber = process.env.PR_NUMBER;
            const headSha = process.env.HEAD_SHA;
            const safeBranchName = process.env.BRANCH_NAME;
            const shortSha = headSha.substring(0, 7);
            const deployUrl = `https://deploy-preview-${prNumber}--resume-as-code.netlify.app`;

            // Generate timestamp for BRT + UTC
            const utcTime = new Date().toISOString().replace('T', ' ').slice(0, 19) + ' UTC';
            const brtTime = new Date().toLocaleString('pt-BR', {
              timeZone: 'America/Sao_Paulo',
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            }).replace(',', '') + ' BRT';
            const timestamp = `${brtTime} (${utcTime})`;

            const commentBody = `## 🔍 PR Preview Environment

            | Preview | URL |
            |---------|-----|
            | 🌐 **Live Preview** | [${deployUrl}](${deployUrl}) |
            | 📄 **Screen PDF** | [Screen PDF](${deployUrl}/resume.pdf) |
            | 🖨️ **Print PDF** | [Print PDF](${deployUrl}/resume-print.pdf) |
            | 🤖 **ATS PDF** | [ATS PDF](${deployUrl}/resume-ats.pdf) |

            ### 📋 Preview Details
            - **PR**: #${prNumber}
            - **Branch**: \`${safeBranchName}\`
            - **Commit**: \`${shortSha}\`
            - **Deploy Status**: ✅ **Ready** - Built by GitHub Actions & deployed to Netlify
            - **Updated**: ${timestamp}

            > **Note**: Preview environment is now live! PDFs include QR codes pointing to this preview URL.

            ### 🧪 Testing Checklist
            - [ ] Resume displays correctly on desktop
            - [ ] Resume displays correctly on mobile
            - [ ] All three PDF versions download successfully
            - [ ] Dark/light mode toggle works
            - [ ] QR code displays and works
            - [ ] Profile image loads correctly
            - [ ] All sections render properly
            - [ ] No console errors

            ---
            *🤖 Auto-updated by GitHub Actions - Last updated: ${timestamp}*

            <!-- atlantis-style-preview-${Date.now()} -->`;

            // 🚀 ATLANTIS-STYLE COMMENT MANAGEMENT FOR PREVIEW COMMENTS
            // Get all comments and find preview environment comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const previewComments = comments.data.filter(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('## 🔍 PR Preview Environment')
            );

            // Hide/minimize ALL previous preview comments (Atlantis behavior)
            let hiddenCount = 0;
            for (const oldComment of previewComments) {
              try {
                const outdatedBody = `<details>\n<summary>🔒 <strong>Outdated Preview Environment</strong> - Click to expand</summary>\n\n${oldComment.body}\n\n---\n*⚠️ This preview environment status has been superseded by a newer deployment.*\n</details>`;

                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: oldComment.id,
                  body: outdatedBody,
                });
                hiddenCount++;
              } catch (error) {
                console.log(`⚠️ Could not minimize preview comment ${oldComment.id}: ${error.message}`);
              }
            }

            console.log(`🔒 Minimized ${hiddenCount} previous preview environment comments (Atlantis-style)`);

            // Always create a fresh comment (never update)
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody,
            });

            console.log(`✅ Created fresh PR preview comment for PR #${prNumber} (${hiddenCount} old comments minimized)`);
            console.log(`🎯 Atlantis-style management: Only latest preview environment visible, previous comments collapsed`);

  update-deployment-status:
    name: Update PR Deployment Status
    needs: build-and-deploy
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--')
    uses: ./.github/workflows/shared-deployment-status.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      deployment_status: ${{ needs.build-and-deploy.result == 'success' && 'ready' || 'failure' }}
      deployment_environment: 'preview'
      deployment_url: ${{ needs.build-and-deploy.result == 'success' && format('https://deploy-preview-{0}--resume-as-code.netlify.app', github.event.pull_request.number) || '' }}
      commit_sha: ${{ github.event.pull_request.head.sha }}
      additional_info: ${{ needs.build-and-deploy.result == 'failure' && 'Deployment failed. Check the logs for details.' || '' }}
    permissions:
      contents: read
      pull-requests: write
      issues: write

  # Comprehensive Testing on Live Preview Environment
  preview-comprehensive-testing:
    name: 🧪 Comprehensive Preview Testing
    needs: [build-and-deploy]
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--') && needs.build-and-deploy.result == 'success'
    uses: ./.github/workflows/shared-comprehensive-testing.yml
    permissions:
      contents: read
      pull-requests: write
      checks: write
      security-events: write
    with:
      target_url: ${{ needs.build-and-deploy.outputs.preview_url }}
      environment_name: 'preview'
      environment_context: 'PR #${{ github.event.pull_request.number }} - ${{ github.head_ref }} branch'
      test_types: 'lighthouse,accessibility,performance'
      lighthouse_budget_path: './budget.json'
      artifact_retention_days: 7
      post_pr_comment: true
      pr_number: '${{ github.event.pull_request.number }}'

  cleanup-on-merge:
    name: Cleanup Preview Comment
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    steps:
      - name: Update Comment on PR Merge/Close
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const isMerged = context.payload.pull_request.merged;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const previewComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('## 📊 Deployment Status')
            );

            if (previewComment) {
              const status = isMerged ? '✅ **Merged**' : '❌ **Closed**';
              const updatedBody = previewComment.body.replace(
                /- \*\*Status\*\*: .*/,
                `- **Status**: ${status} - Preview environment deactivated`
              );

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previewComment.id,
                body: updatedBody,
              });

              const action = isMerged ? 'merged' : 'closed';
              console.log(`Updated deployment status comment for ${action} PR`);
            }
