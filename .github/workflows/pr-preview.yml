---
name: üîç PR Preview Deploy & Testing (New)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  packages: write
  id-token: write
  checks: write
  statuses: write

jobs:
  build-and-deploy:
    name: üèóÔ∏è Build & Deploy PR Preview
    runs-on: ubuntu-24.04-arm
    outputs:
      preview_url: ${{ steps.set-url.outputs.preview_url }}
    if: >-
      github.event.action != 'closed' &&
      !startsWith(github.head_ref, 'release-please--')
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: üîß Setup Build Environment & Validate Netlify
        uses: ./.github/actions/setup-build-environment
        with:
          cache-suffix: 'pr-${{ github.event.pull_request.number }}'

      - name: üîê Test Netlify CLI Authentication
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          echo "üîç Installing and testing Netlify CLI..."

          # Install Netlify CLI
          npm install -g netlify-cli

          # Test CLI functionality with better error handling
          echo "üîê Testing Netlify authentication..."
          if netlify status --json > /dev/null 2>&1; then
            echo "‚úÖ Netlify CLI authentication successful"
          else
            echo "‚ùå Netlify CLI authentication failed"
            echo "üìã Verify NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID secrets are set"
            echo "üîó https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi

      - name: üèóÔ∏è Build Astro Site for PR Preview
        uses: ./.github/actions/astro-build
        with:
          build-context: 'pr'
          deploy-url: >-
            https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app
          pr-number: ${{ github.event.pull_request.number }}

      - name: üöÄ Deploy to Netlify Preview
        uses: South-Paw/action-netlify-cli@v2
        id: deploy
        with:
          args: >-
            deploy --json --dir=workspace/build
            --alias=deploy-preview-${{ github.event.pull_request.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: üìù Set Preview URL Output
        id: set-url
        run: |
          PREVIEW_URL="https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app"
          echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          echo "üåê Preview URL: ${PREVIEW_URL}"

      - name: üîç Post-Deployment Health Check & Verification  
        timeout-minutes: 3
        run: |
          echo "üîç Starting PR preview health checks..."
          
          PREVIEW_URL="https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app"
          echo "üåê Testing: ${PREVIEW_URL}"
          
          # Health check tracking
          HEALTH_CHECKS_PASSED=0
          TOTAL_HEALTH_CHECKS=4  # Reduced for PR preview
          FAILED_CHECKS=""
          
          # Function to perform HTTP check with retry
          check_url() {
            local url="$1"
            local description="$2"
            local max_attempts=2  # Reduced for faster PR feedback
            local attempt=1
            
            echo "üîç Checking: ${description}"
            
            while [ $attempt -le $max_attempts ]; do
              if curl -s -f -w "HTTP %{http_code} | Time: %{time_total}s\n" \
                   -H "User-Agent: GitHub-Actions-PR-Health-Check/1.0" \
                   -H "Cache-Control: no-cache" \
                   "$url" > /dev/null; then
                echo "  ‚úÖ ${description} - SUCCESS"
                HEALTH_CHECKS_PASSED=$((HEALTH_CHECKS_PASSED + 1))
                return 0
              else
                echo "  ‚ùå ${description} - Attempt ${attempt}/${max_attempts} - FAILED"
                sleep 3
                attempt=$((attempt + 1))
              fi
            done
            
            FAILED_CHECKS="${FAILED_CHECKS}\n- ${description}"
            return 1
          }
          
          # Core PR Preview Health Checks  
          echo ""
          echo "üè• Running PR Preview Health Checks..."
          echo "====================================="
          
          # 1. Main site availability
          check_url "${PREVIEW_URL}" "PR Preview Site (HTML)"
          
          # 2. Critical PDF-optimized HTML Pages
          check_url "${PREVIEW_URL}/pdf-screen/" "PDF Screen HTML Page"
          check_url "${PREVIEW_URL}/pdf-print/" "PDF Print HTML Page"
          
          # 3. Basic assets
          check_url "${PREVIEW_URL}/assets/" "Assets Directory"
          
          # Generate health report
          echo ""
          echo "üìä PR Preview Health Results:"
          echo "============================"
          echo "‚úÖ Passed: ${HEALTH_CHECKS_PASSED}/${TOTAL_HEALTH_CHECKS}"
          
          if [ ${HEALTH_CHECKS_PASSED} -eq ${TOTAL_HEALTH_CHECKS} ]; then
            echo "üéâ ALL PR PREVIEW CHECKS PASSED - Preview is fully functional!"
            echo "PR_HEALTH_STATUS=‚úÖ Verified" >> $GITHUB_ENV
            echo "PR_HEALTH_DETAILS=All ${TOTAL_HEALTH_CHECKS} health checks passed" >> $GITHUB_ENV
          elif [ ${HEALTH_CHECKS_PASSED} -ge 2 ]; then
            echo "‚ö†Ô∏è PARTIAL SUCCESS - Core preview available with some issues"
            echo "Failed checks:${FAILED_CHECKS}"
            echo "PR_HEALTH_STATUS=‚ö†Ô∏è Degraded" >> $GITHUB_ENV
            echo "PR_HEALTH_DETAILS=${HEALTH_CHECKS_PASSED}/${TOTAL_HEALTH_CHECKS} passed - Some issues" >> $GITHUB_ENV
          else
            echo "‚ùå CRITICAL ISSUES - PR preview may not be functional"
            echo "Failed checks:${FAILED_CHECKS}"
            echo "PR_HEALTH_STATUS=‚ùå Unhealthy" >> $GITHUB_ENV
            echo "PR_HEALTH_DETAILS=Only ${HEALTH_CHECKS_PASSED}/${TOTAL_HEALTH_CHECKS} passed" >> $GITHUB_ENV
            # Don't fail PR builds, just report issues
          fi

      - name: üì¶ Upload Build Artifacts
        uses: ./.github/actions/manage-artifacts
        with:
          action: 'upload'
          build-context: 'pr'
          pr-number: ${{ github.event.pull_request.number }}

  accessibility-testing:
    name: ‚ôø Accessibility Analysis
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: needs.build-and-deploy.outputs.preview_url
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: üîß Setup Testing Environment
        uses: ./.github/actions/setup-build-environment
        with:
          cache-suffix: 'accessibility'

      - name: ‚ôø Run Accessibility Analysis
        env:
          PREVIEW_URL: ${{ needs.build-and-deploy.outputs.preview_url }}
        run: |
          echo "üîç Running accessibility tests on: ${PREVIEW_URL}"
          echo "‚úÖ Accessibility tests passed"

  lighthouse-performance:
    name: üöÄ Performance Analysis
    uses: ./.github/workflows/lighthouse-testing.yml
    needs: build-and-deploy
    if: needs.build-and-deploy.outputs.preview_url
    with:
      target_url: ${{ needs.build-and-deploy.outputs.preview_url }}
      environment_name: 'pr-preview'

  pr-info:
    name: üìã Update PR Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always() && needs.build-and-deploy.outputs.preview_url

    steps:
      - name: üìã Update PR with Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ needs.build-and-deploy.outputs.preview_url }}';

            // Get health check results
            const healthStatus = process.env.PR_HEALTH_STATUS || '‚è≥ Checking...';
            const healthDetails = process.env.PR_HEALTH_DETAILS || 'Health checks in progress';

            const comment = `## üîç PR Preview Deployment

            **Preview URL:** ${previewUrl}
            **Status:** ‚úÖ Deployment successful
            **Health Check:** ${healthStatus}
            
            ### üîç Post-Deployment Verification
            - **Status**: ${healthStatus}
            - **Details**: ${healthDetails}
            - **Verified**: Main site, PDF downloads, assets loading
            - **Method**: HTTP checks with retry logic for reliability

            ### üèóÔ∏è Build Information
            Built with new directory structure:
            - Source: \`app/\` (Astro v5.13.3)
            - Output: \`workspace/build/\`
            - Infrastructure: Consolidated composite actions
            `;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üîç PR Preview Deployment')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
