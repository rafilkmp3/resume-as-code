name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**'
      - '*.html'
      - '*.json'
      - '*.js'
      - '*.css'
      - 'scripts/**'
      - 'Dockerfile'
      - 'package*.json'

permissions:
  contents: read
  pull-requests: write
  actions: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Build and deploy PR preview to separate branch
  preview-deploy:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: github.event.action != 'closed'
    environment:
      name: github-pages-preview
      url: ${{ steps.deployment.outputs.page_url }}pr-${{ github.event.pull_request.number }}/
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          lfs: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-pr-${{ github.event.pull_request.number }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-pr-${{ github.event.pull_request.number }}-
            ${{ runner.os }}-buildx-pr-
            ${{ runner.os }}-buildx-

      - name: Generate preview URL
        id: preview-url
        run: |
          PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.pull_request.number }}"
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "üì± Preview URL: $PREVIEW_URL"

      - name: Build PR preview
        env:
          PREVIEW_URL: ${{ steps.preview-url.outputs.url }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_REF_NAME: pr-${{ github.event.pull_request.number }}
          NODE_ENV: stage
          BUILD_MODE: stage
        run: |
          echo "üèóÔ∏è Building PR preview with QR code integration"
          echo "üì± Preview URL: $PREVIEW_URL"

          docker buildx build \
            --target prod \
            --platform linux/amd64 \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF_NAME="$GITHUB_REF_NAME" \
            --build-arg PREVIEW_URL="$PREVIEW_URL" \
            --build-arg NODE_ENV=stage \
            --build-arg BUILD_MODE=stage \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --tag pr-preview:${{ github.event.pull_request.number }} \
            --load \
            .

          # Extract preview build from nginx html directory
          mkdir -p pr-preview-build
          docker run --rm -v "$PWD/pr-preview-build:/tmp/dist" pr-preview:${{ github.event.pull_request.number }} sh -c "cp -r /usr/share/nginx/html/* /tmp/dist/"

          # Update cache atomically
          if [[ -d "/tmp/.buildx-cache-new" ]]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

          echo "üìÅ Preview build artifacts:"
          ls -la pr-preview-build/

      - name: Add PR preview banner
        run: |
          echo "üè∑Ô∏è Adding PR preview identification banner"

          # Add PR preview banner to the HTML
          sed -i 's|<body|<body style="border-top: 5px solid #ff6b35;">|g' pr-preview-build/index.html

          # Add PR preview notice at the top of the page
          sed -i 's|<body[^>]*>|&\n<div style="background: linear-gradient(135deg, #ff6b35, #f7931e); color: white; text-align: center; padding: 10px 20px; margin: 0; font-family: -apple-system, BlinkMacSystemFont, sans-serif; font-size: 14px; position: sticky; top: 0; z-index: 1000; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"><strong>üöÄ PR PREVIEW #${{ github.event.pull_request.number }}</strong> - This is a preview deployment for testing. <a href="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}" style="color: white; text-decoration: underline;">View PR ‚Üí</a></div>|g' pr-preview-build/index.html

          echo "‚úÖ PR preview banner added to HTML"

      - name: Deploy to temporary preview repository
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.CROSS_REPO_PAT }}
          repository-name: rafilkmp3/temploy-resume-as-code
          branch: main # The branch the action should deploy to.
          folder: pr-preview-build # The folder the action should deploy.
          clean: true # Automatically remove deleted files from the deploy branch

      - name: Update preview URL with actual deployment
        id: final-preview-url
        run: |
          FINAL_URL="https://rafilkmp3.github.io/temploy-resume-as-code/"
          echo "url=$FINAL_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ PR preview deployed to: $FINAL_URL"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = "${{ steps.final-preview-url.outputs.url }}";
            const prNumber = context.payload.pull_request.number;
            const commentBody = `
            ## üì± Temporary PR Preview Ready!

            Your preview is deployed to a shared, temporary environment:

            ### üåê **[View Preview ‚Üí](${previewUrl})**

            **‚ö†Ô∏è Important Notes:**
            - This is a **shared environment**. The latest pushed PR will overwrite the previous one.
            - This URL is for temporary review and will be replaced by the next PR preview.

            **üìä Preview Details:**
            - **URL**: `${previewUrl}`
            - **Commit**: `${{ github.event.pull_request.head.sha }}`
            - **Branch**: `${{ github.event.pull_request.head.ref }}`

            > üîÑ Pushing a new commit to this PR will update the preview.
            `;

            // Find existing preview comment to update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Preview Ready!')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

  # Note: Cleanup is handled automatically by GitHub Pages deployment
  # Each PR preview deployment overwrites the previous one, so no manual cleanup needed
