name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**'
      - '*.html'
      - '*.json'
      - '*.js'
      - '*.css'
      - 'scripts/**'
      - 'Dockerfile'
      - 'package*.json'

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  actions: read

env:
  NODE_VERSION: '20'

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Build and deploy PR preview
  preview-deploy:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: github.event.action != 'closed'
    environment:
      name: stage-pr-${{ github.event.pull_request.number }}
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.pull_request.number }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          lfs: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-pr-${{ github.event.pull_request.number }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-pr-${{ github.event.pull_request.number }}-
            ${{ runner.os }}-buildx-pr-
            ${{ runner.os }}-buildx-

      - name: Generate preview URL
        id: preview-url
        run: |
          PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.pull_request.number }}"
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "üì± Preview URL: $PREVIEW_URL"

      - name: Build PR preview
        env:
          PREVIEW_URL: ${{ steps.preview-url.outputs.url }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_REF_NAME: pr-${{ github.event.pull_request.number }}
          NODE_ENV: stage
          BUILD_MODE: stage
        run: |
          echo "üèóÔ∏è Building PR preview with QR code integration"
          echo "üì± Preview URL: $PREVIEW_URL"

          docker buildx build \
            --target prod \
            --platform linux/amd64 \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF_NAME="$GITHUB_REF_NAME" \
            --build-arg PREVIEW_URL="$PREVIEW_URL" \
            --build-arg NODE_ENV=stage \
            --build-arg BUILD_MODE=stage \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --tag pr-preview:${{ github.event.pull_request.number }} \
            --load \
            .

          # Extract preview build from nginx html directory
          mkdir -p dist/pr-${{ github.event.pull_request.number }}
          docker run --rm -v "$PWD/dist/pr-${{ github.event.pull_request.number }}:/tmp/dist" pr-preview:${{ github.event.pull_request.number }} sh -c "cp -r /usr/share/nginx/html/* /tmp/dist/"

          # Create a simple index.html that redirects to the PR directory
          cat > dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>PR Preview - Redirecting...</title>
              <meta http-equiv="refresh" content="0; url=./pr-${{ github.event.pull_request.number }}/">
          </head>
          <body>
              <p>Redirecting to <a href="./pr-${{ github.event.pull_request.number }}/">PR #${{ github.event.pull_request.number }} preview</a>...</p>
          </body>
          </html>
          EOF

          # Update cache atomically
          if [[ -d "/tmp/.buildx-cache-new" ]]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

          echo "üìÅ Preview build artifacts:"
          ls -la dist/
          ls -la dist/pr-${{ github.event.pull_request.number }}/

      - name: Run essential tests (Chromium only)
        run: |
          echo "üß™ Running essential PR tests"

          # Quick smoke tests on nginx production container
          docker run --rm pr-preview:${{ github.event.pull_request.number }} sh -c "
            echo 'üêß Container info:'
            cat /etc/os-release | head -3

            # HTML validation (nginx serves from /usr/share/nginx/html)
            if [[ -f '/usr/share/nginx/html/index.html' ]]; then
              echo '‚úÖ HTML file exists in nginx directory'
              grep -q 'Rafael Sathler' /usr/share/nginx/html/index.html && echo '‚úÖ Content validation passed'

              # Check if assets directory exists
              if [[ -d '/usr/share/nginx/html/assets' ]]; then
                echo '‚úÖ Assets directory exists'
                ls -la /usr/share/nginx/html/assets/images/ | head -5
              else
                echo '‚ö†Ô∏è Assets directory missing'
              fi
            else
              echo '‚ùå HTML build failed - file not found in nginx directory'
              echo 'Files in nginx directory:'
              ls -la /usr/share/nginx/html/
              exit 1
            fi
          "

      - name: Setup Pages for PR
        uses: actions/configure-pages@v5

      - name: Add PR preview banner
        run: |
          echo "üè∑Ô∏è Adding PR preview identification banner"

          # Add PR preview banner to the HTML
          sed -i 's|<body|<body style="border-top: 5px solid #ff6b35;">|g' dist/pr-${{ github.event.pull_request.number }}/index.html

          # Add PR preview notice at the top of the page
          sed -i 's|<body[^>]*>|&\n<div style="background: linear-gradient(135deg, #ff6b35, #f7931e); color: white; text-align: center; padding: 10px 20px; margin: 0; font-family: -apple-system, BlinkMacSystemFont, sans-serif; font-size: 14px; position: sticky; top: 0; z-index: 1000; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"><strong>üöÄ PR PREVIEW #${{ github.event.pull_request.number }}</strong> - This is a preview deployment for testing. <a href="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}" style="color: white; text-decoration: underline;">View PR ‚Üí</a></div>|g' dist/pr-${{ github.event.pull_request.number }}/index.html

      - name: Upload PR preview to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          retention-days: 7

      - name: Deploy PR preview to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = "${{ steps.preview-url.outputs.url }}";
            const prNumber = context.payload.pull_request.number;
            const commentBody = `
            ## üì± PR Preview Ready!

            Your preview is deployed with **working QR codes** and **PR identification banner**:

            ### üåê **[View Preview ‚Üí](${previewUrl})**

            **üöÄ Preview Features:**
            - ‚úÖ **PR Banner**: Clear identification this is a preview deployment
            - ‚úÖ **QR Code Integration**: Scan to test on mobile devices
            - ‚úÖ **Mobile Testing**: Perfect for cross-device validation
            - ‚úÖ **Live Changes**: Reflects all changes in this PR
            - ‚úÖ **Git LFS Assets**: Profile images and all assets included

            **üìä Preview Details:**
            - **URL**: \`${previewUrl}\`
            - **Commit**: \`${{ github.event.pull_request.head.sha }}\`
            - **Branch**: \`${{ github.event.pull_request.head.ref }}\`

            **üì± Mobile Testing Workflow:**
            1. Open the preview link above
            2. Look for the orange **"üöÄ PR PREVIEW #${prNumber}"** banner at the top
            3. Click the QR code button in the resume
            4. Scan with your phone for instant mobile testing
            5. QR codes automatically point to this preview! üéØ

            **üîç How to Verify This is the PR Preview:**
            - Orange banner at the top: "üöÄ PR PREVIEW #${prNumber}"
            - URL shows the PR subdirectory: \`/pr-${prNumber}/\`
            - Banner links back to this PR for reference

            > üîÑ Updates automatically when you push new commits
            `;

            // Find existing preview comment to update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Preview Ready!')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

  # Cleanup when PR is closed
  cleanup-preview:
    name: Cleanup PR Preview
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.event.action == 'closed'
    steps:
      - name: Comment cleanup notice
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const cleanupBody = `
            ## üßπ PR Preview Cleaned Up

            Preview deployment has been cleaned up.

            **Status:** ‚úÖ Environment cleaned up
            **Reason:** PR was ${{ github.event.pull_request.merged && 'merged' || 'closed' }}
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: cleanupBody
            });
