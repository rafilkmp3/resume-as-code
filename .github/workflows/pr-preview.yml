---
name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  packages: write
  id-token: write

jobs:
  build-and-deploy:
    name: Build & Deploy Preview
    runs-on: ubuntu-latest
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--') && !startsWith(github.head_ref, 'release-please--')
    timeout-minutes: 15
    env:
      DOCKER_BUILDKIT: 1
      BUILDX_NO_DEFAULT_ATTESTATIONS: 1
      # Preview environment variables
      NETLIFY: 'true'
      NETLIFY_ENV: 'deploy-preview'
      REVIEW_ID: ${{ github.event.pull_request.number }}
      HEAD: ${{ github.event.pull_request.head.ref }}
      BRANCH: ${{ github.event.pull_request.head.ref }}
      CONTEXT: 'deploy-preview'
      DEPLOY_URL: 'https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app'
      NODE_ENV: 'preview'
      GITHUB_PAGES: 'false'

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure Git for CI
        run: |
          # Configure git to suppress warnings
          git config --global init.defaultBranch main
          git config --global advice.defaultBranchName false
          git config --global advice.detachedHead false

      - name: Validate Netlify Configuration  # pragma: allowlist secret
        timeout-minutes: 1
        run: |
          echo "🔍 Validating Netlify deployment configuration..." # pragma: allowlist secret
          echo "✅ NETLIFY_AUTH_TOKEN secret configured"
          echo "✅ NETLIFY_SITE_ID secret configured"
          echo "🎉 Netlify deployment ready"

      - name: Setup Node.js for Netlify CLI test
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Test Netlify CLI functionality
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}  # pragma: allowlist secret
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}  # pragma: allowlist secret
        timeout-minutes: 2
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: status --json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure Node.js for CI
        run: |
          # Suppress Node.js deprecation warnings
          echo "NODE_OPTIONS=--no-deprecation --no-warnings" >> "$GITHUB_ENV"
          echo "NODE_NO_WARNINGS=1" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry for cache
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-preview-${{ hashFiles('package*.json', 'docker/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Calculate commits ahead for version display
        id: version_info
        run: |
          # Get latest release tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          
          # Calculate commits ahead of latest release
          COMMITS_AHEAD=$(git rev-list --count ${LATEST_TAG}..HEAD 2>/dev/null || echo "0")
          echo "commits_ahead=${COMMITS_AHEAD}" >> $GITHUB_OUTPUT
          
          echo "🔖 Version Information:"
          echo "  Latest Release: ${LATEST_TAG}"
          echo "  Commits Ahead: ${COMMITS_AHEAD}"

      - name: Build Preview with Docker
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          LATEST_TAG: ${{ steps.version_info.outputs.latest_tag }}
          COMMITS_AHEAD: ${{ steps.version_info.outputs.commits_ahead }}
        run: |
          echo "🏗️ Building preview for PR #${PR_NUMBER}"
          echo "📊 Version: ${LATEST_TAG} +${COMMITS_AHEAD} commits ahead"
          echo "🔗 Git Info: ${HEAD_SHA:0:7} on ${HEAD_REF}"
          
          docker buildx build \
            --file docker/Dockerfile \
            --target builder \
            --platform linux/amd64 \
            --build-arg GITHUB_SHA="${HEAD_SHA}" \
            --build-arg GITHUB_REF_NAME="${HEAD_REF}" \
            --build-arg BUILD_CONTEXT=pr \
            --build-arg PR_NUMBER="${PR_NUMBER}" \
            --build-arg NODE_ENV=preview \
            --build-arg NETLIFY=true \
            --build-arg NETLIFY_ENV=deploy-preview \
            --build-arg CONTEXT=deploy-preview \
            --build-arg DEPLOY_URL="${DEPLOY_URL}" \
            --build-arg COMMITS_SINCE_RELEASE="${COMMITS_AHEAD}" \
            --build-arg LAST_RELEASE_TAG="${LATEST_TAG}" \
            --build-arg GITHUB_RUN_ID="${{ github.run_id }}" \
            --build-arg GITHUB_RUN_NUMBER="${{ github.run_number }}" \
            --build-arg APP_VERSION="${LATEST_TAG}" \
            --cache-from type=registry,ref=ghcr.io/${{ github.repository }}-cache:golden-base \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --tag "resume:preview-${PR_NUMBER}" \
            --load \
            .

          # Update cache atomically
          if [[ -d "/tmp/.buildx-cache-new" ]]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      - name: Extract build artifacts
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          mkdir -p dist
          docker run --rm -v "$PWD/dist:/tmp/dist" "resume:preview-${PR_NUMBER}" sh -c "cp -r /app/dist/* /tmp/dist/"
          echo "📁 Preview build artifacts:"
          ls -la dist/

      - name: Start build timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}  # pragma: allowlist secret
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}  # pragma: allowlist secret
          PR_NUMBER: ${{ github.event.pull_request.number }}
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: deploy --json --dir=dist --alias=deploy-preview-${{ env.PR_NUMBER }}


      - name: Calculate build duration
        if: always()
        run: |
          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          echo "BUILD_DURATION=${BUILD_DURATION}s" >> $GITHUB_ENV

      - name: Upload build artifacts
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        uses: actions/upload-artifact@v4
        with:
          name: preview-build-${{ env.PR_NUMBER }}-${{ env.HEAD_SHA }}
          path: dist/
          retention-days: 7

  preview-info:
    name: PR Preview Information
    runs-on: ubuntu-latest
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--')
    needs: build-and-deploy

    steps:
      - name: Generate PR Preview Summary
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        run: |
          SHORT_SHA="${HEAD_SHA:0:7}"
          SAFE_BRANCH_NAME="${BRANCH_NAME}"
          DEPLOY_URL="https://deploy-preview-${PR_NUMBER}--resume-as-code.netlify.app"

          {
            echo "## 🔍 PR Preview Environment"
            echo ""
            echo "| Resource | URL |"
            echo "|----------|-----|"
            echo "| 🌐 **Live Preview** | [View Preview](${DEPLOY_URL}) |"
            echo "| 📄 **Screen PDF** | [Screen PDF](${DEPLOY_URL}/resume.pdf) |"
            echo "| 🖨️ **Print PDF** | [Print PDF](${DEPLOY_URL}/resume-print.pdf) |"
            echo "| 🤖 **ATS PDF** | [ATS PDF](${DEPLOY_URL}/resume-ats.pdf) |"
            echo ""
            echo "### 📋 Build Information"
            echo "- **PR Number**: #${PR_NUMBER}"
            echo "- **Branch**: \`${SAFE_BRANCH_NAME}\`"
            echo "- **Commit**: \`${SHORT_SHA}\`"
            echo "- **Deploy Status**: ✅ **Ready** - GitHub Actions built & deployed to Netlify"
            echo ""
            echo "### 🧪 Quality Assurance Checklist"
            echo "- [ ] Desktop display validation"
            echo "- [ ] Mobile responsiveness check"
            echo "- [ ] PDF generation verification (all 3 versions)"
            echo "- [ ] Dark/light mode toggle functionality"
            echo "- [ ] QR code display and functionality"
            echo "- [ ] Profile image loading"
            echo "- [ ] Content rendering accuracy"
            echo "- [ ] Browser console error check"
            echo ""
            echo "> 💡 **Tip**: Preview environment automatically updates when you push new commits"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Add PR Preview Comment (Atlantis-style)
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        with:
          script: |
            const prNumber = process.env.PR_NUMBER;
            const headSha = process.env.HEAD_SHA;
            const safeBranchName = process.env.BRANCH_NAME;
            const shortSha = headSha.substring(0, 7);
            const deployUrl = `https://deploy-preview-${prNumber}--resume-as-code.netlify.app`;

            // Generate timestamp for BRT + UTC
            const utcTime = new Date().toISOString().replace('T', ' ').slice(0, 19) + ' UTC';
            const brtTime = new Date().toLocaleString('pt-BR', {
              timeZone: 'America/Sao_Paulo',
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            }).replace(',', '') + ' BRT';
            const timestamp = `${brtTime} (${utcTime})`;

            const commentBody = `## 🔍 PR Preview Environment

            | Preview | URL |
            |---------|-----|
            | 🌐 **Live Preview** | [${deployUrl}](${deployUrl}) |
            | 📄 **Screen PDF** | [Screen PDF](${deployUrl}/resume.pdf) |
            | 🖨️ **Print PDF** | [Print PDF](${deployUrl}/resume-print.pdf) |
            | 🤖 **ATS PDF** | [ATS PDF](${deployUrl}/resume-ats.pdf) |

            ### 📋 Preview Details
            - **PR**: #${prNumber}
            - **Branch**: \`${safeBranchName}\`
            - **Commit**: \`${shortSha}\`
            - **Deploy Status**: ✅ **Ready** - Built by GitHub Actions & deployed to Netlify
            - **Updated**: ${timestamp}

            > **Note**: Preview environment is now live! PDFs include QR codes pointing to this preview URL.

            ### 🧪 Testing Checklist
            - [ ] Resume displays correctly on desktop
            - [ ] Resume displays correctly on mobile
            - [ ] All three PDF versions download successfully
            - [ ] Dark/light mode toggle works
            - [ ] QR code displays and works
            - [ ] Profile image loads correctly
            - [ ] All sections render properly
            - [ ] No console errors

            ---
            *🤖 Auto-updated by GitHub Actions - Last updated: ${timestamp}*

            <!-- atlantis-style-preview-${Date.now()} -->`;

            // 🚀 ATLANTIS-STYLE COMMENT MANAGEMENT FOR PREVIEW COMMENTS
            // Get all comments and find preview environment comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const previewComments = comments.data.filter(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('## 🔍 PR Preview Environment')
            );

            // Hide/minimize ALL previous preview comments (Atlantis behavior)
            let hiddenCount = 0;
            for (const oldComment of previewComments) {
              try {
                const outdatedBody = `<details>\n<summary>🔒 <strong>Outdated Preview Environment</strong> - Click to expand</summary>\n\n${oldComment.body}\n\n---\n*⚠️ This preview environment status has been superseded by a newer deployment.*\n</details>`;

                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: oldComment.id,
                  body: outdatedBody,
                });
                hiddenCount++;
              } catch (error) {
                console.log(`⚠️ Could not minimize preview comment ${oldComment.id}: ${error.message}`);
              }
            }

            console.log(`🔒 Minimized ${hiddenCount} previous preview environment comments (Atlantis-style)`);

            // Always create a fresh comment (never update)
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody,
            });

            console.log(`✅ Created fresh PR preview comment for PR #${prNumber} (${hiddenCount} old comments minimized)`);
            console.log(`🎯 Atlantis-style management: Only latest preview environment visible, previous comments collapsed`);

  update-deployment-status:
    name: Update PR Deployment Status
    needs: build-and-deploy
    if: github.event.action != 'closed' && !startsWith(github.head_ref, 'release-please--')
    uses: ./.github/workflows/shared-deployment-status.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      deployment_status: ${{ needs.build-and-deploy.result == 'success' && 'ready' || 'failure' }}
      deployment_environment: 'preview'
      deployment_url: ${{ needs.build-and-deploy.result == 'success' && format('https://deploy-preview-{0}--resume-as-code.netlify.app', github.event.pull_request.number) || '' }}
      commit_sha: ${{ github.event.pull_request.head.sha }}
      additional_info: ${{ needs.build-and-deploy.result == 'failure' && 'Deployment failed. Check the logs for details.' || '' }}
    permissions:
      contents: read
      pull-requests: write
      issues: write

  cleanup-on-merge:
    name: Cleanup Preview Comment
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    steps:
      - name: Update Comment on PR Merge/Close
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const isMerged = context.payload.pull_request.merged;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const previewComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('## 📊 Deployment Status')
            );

            if (previewComment) {
              const status = isMerged ? '✅ **Merged**' : '❌ **Closed**';
              const updatedBody = previewComment.body.replace(
                /- \*\*Status\*\*: .*/,
                `- **Status**: ${status} - Preview environment deactivated`
              );

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previewComment.id,
                body: updatedBody,
              });

              const action = isMerged ? 'merged' : 'closed';
              console.log(`Updated deployment status comment for ${action} PR`);
            }
