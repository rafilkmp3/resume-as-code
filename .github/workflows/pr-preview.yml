---
name: 🔍 PR Preview Deploy & Testing

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  workflow_dispatch:  # Allow manual PR preview runs

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  packages: write
  id-token: write
  checks: write
  statuses: write

jobs:
  build-and-deploy:
    name: 🏗️ Build & Deploy PR Preview
    runs-on: ubuntu-24.04-arm
    outputs:
      preview_url: ${{ steps.set-url.outputs.preview_url }}
    if: >-
      github.event.action != 'closed' &&
      !startsWith(github.head_ref, 'release-please--')
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔧 Setup Build Environment & Validate Netlify
        uses: ./.github/actions/setup-build-environment
        with:
          cache-suffix: 'pr-${{ github.event.pull_request.number }}'

      - name: 🔐 Test Netlify CLI Authentication
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          echo "🔍 Installing and testing Netlify CLI..."

          # Validate secrets are present
          if [ -z "$NETLIFY_AUTH_TOKEN" ]; then
            echo "❌ NETLIFY_AUTH_TOKEN secret is not set"
            echo "📋 Please add the secret at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi

          if [ -z "$NETLIFY_SITE_ID" ]; then
            echo "❌ NETLIFY_SITE_ID secret is not set"  
            echo "📋 Please add the secret at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi

          # Install Netlify CLI
          npm install -g netlify-cli

          # Test CLI functionality with timeout and retry
          echo "🔐 Testing Netlify authentication..."
          
          # Add timeout to prevent hanging
          timeout 30s netlify status --json > /tmp/netlify_status.json 2>&1
          NETLIFY_STATUS_CODE=$?
          
          if [ $NETLIFY_STATUS_CODE -eq 0 ]; then
            echo "✅ Netlify CLI authentication successful"
            # Verify site access
            if netlify sites:list --json > /dev/null 2>&1; then
              echo "✅ Site access verified"
            else
              echo "⚠️ Authentication successful but site access limited"
            fi
          elif [ $NETLIFY_STATUS_CODE -eq 124 ]; then
            echo "❌ Netlify CLI authentication timed out (30s)"
            echo "🔄 This might be a temporary connectivity issue"
            echo "📋 Check Netlify status at: https://www.netlifystatus.com/"
            exit 1
          else
            echo "❌ Netlify CLI authentication failed"
            echo "📋 Error details:"
            cat /tmp/netlify_status.json 2>/dev/null || echo "No detailed error available"
            echo "🔗 Verify secrets at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi

      - name: 🏗️ Build Astro Site for PR Preview
        uses: ./.github/actions/astro-build
        with:
          build-context: 'pr'
          deploy-url: >-
            https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app
          pr-number: ${{ github.event.pull_request.number }}

      - name: 🚀 Deploy to Netlify Preview
        uses: South-Paw/action-netlify-cli@v2
        id: deploy
        timeout-minutes: 10
        with:
          args: >-
            deploy --json --dir=workspace/build
            --alias=deploy-preview-${{ github.event.pull_request.number }}
            --timeout=600000
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: 🔄 Retry Deploy on Failure
        if: failure() && steps.deploy.outcome == 'failure'
        uses: South-Paw/action-netlify-cli@v2
        id: deploy-retry
        timeout-minutes: 10
        with:
          args: >-
            deploy --json --dir=workspace/build
            --alias=deploy-preview-${{ github.event.pull_request.number }}
            --timeout=600000
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: 📝 Set Preview URL Output
        id: set-url
        run: |
          PREVIEW_URL="https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app"
          echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          echo "🌐 Preview URL: ${PREVIEW_URL}"

      - name: 🔍 Post-Deployment Health Check & Verification  
        timeout-minutes: 3
        run: |
          echo "🔍 Starting PR preview health checks..."
          
          PREVIEW_URL="https://deploy-preview-${{ github.event.pull_request.number }}--resume-as-code.netlify.app"
          echo "🌐 Testing: ${PREVIEW_URL}"
          
          # Health check tracking
          HEALTH_CHECKS_PASSED=0
          TOTAL_HEALTH_CHECKS=4  # Reduced for PR preview
          FAILED_CHECKS=""
          
          # Function to perform HTTP check with retry
          check_url() {
            local url="$1"
            local description="$2"
            local max_attempts=2  # Reduced for faster PR feedback
            local attempt=1
            
            echo "🔍 Checking: ${description}"
            
            while [ $attempt -le $max_attempts ]; do
              if curl -s -f -w "HTTP %{http_code} | Time: %{time_total}s\n" \
                   -H "User-Agent: GitHub-Actions-PR-Health-Check/1.0" \
                   -H "Cache-Control: no-cache" \
                   "$url" > /dev/null; then
                echo "  ✅ ${description} - SUCCESS"
                HEALTH_CHECKS_PASSED=$((HEALTH_CHECKS_PASSED + 1))
                return 0
              else
                echo "  ❌ ${description} - Attempt ${attempt}/${max_attempts} - FAILED"
                sleep 3
                attempt=$((attempt + 1))
              fi
            done
            
            FAILED_CHECKS="${FAILED_CHECKS}\n- ${description}"
            return 1
          }
          
          # Core PR Preview Health Checks  
          echo ""
          echo "🏥 Running PR Preview Health Checks..."
          echo "====================================="
          
          # 1. Main site availability
          check_url "${PREVIEW_URL}" "PR Preview Site (HTML)"
          
          # 2. Critical PDF-optimized HTML Pages
          check_url "${PREVIEW_URL}/pdf-screen/" "PDF Screen HTML Page"
          check_url "${PREVIEW_URL}/pdf-print/" "PDF Print HTML Page"
          
          # 3. Critical assets
          check_url "${PREVIEW_URL}/assets/images/profile-optimized.jpg" "Profile Image Asset"
          
          # Generate health report
          echo ""
          echo "📊 PR Preview Health Results:"
          echo "============================"
          echo "✅ Passed: ${HEALTH_CHECKS_PASSED}/${TOTAL_HEALTH_CHECKS}"
          
          if [ ${HEALTH_CHECKS_PASSED} -eq ${TOTAL_HEALTH_CHECKS} ]; then
            echo "🎉 ALL PR PREVIEW CHECKS PASSED - Preview is fully functional!"
            echo "PR_HEALTH_STATUS=✅ Verified" >> $GITHUB_ENV
            echo "PR_HEALTH_DETAILS=All ${TOTAL_HEALTH_CHECKS} health checks passed" >> $GITHUB_ENV
          elif [ ${HEALTH_CHECKS_PASSED} -ge 2 ]; then
            echo "⚠️ PARTIAL SUCCESS - Core preview available with some issues"
            echo "Failed checks:${FAILED_CHECKS}"
            echo "PR_HEALTH_STATUS=⚠️ Degraded" >> $GITHUB_ENV
            echo "PR_HEALTH_DETAILS=${HEALTH_CHECKS_PASSED}/${TOTAL_HEALTH_CHECKS} passed - Some issues" >> $GITHUB_ENV
          else
            echo "❌ CRITICAL ISSUES - PR preview may not be functional"
            echo "Failed checks:${FAILED_CHECKS}"
            echo "PR_HEALTH_STATUS=❌ Unhealthy" >> $GITHUB_ENV
            echo "PR_HEALTH_DETAILS=Only ${HEALTH_CHECKS_PASSED}/${TOTAL_HEALTH_CHECKS} passed" >> $GITHUB_ENV
            # Don't fail PR builds, just report issues
          fi

      - name: 📦 Upload Build Artifacts
        uses: ./.github/actions/manage-artifacts
        with:
          action: 'upload'
          build-context: 'pr'
          pr-number: ${{ github.event.pull_request.number }}

  accessibility-testing:
    name: ♿ Accessibility Analysis
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: needs.build-and-deploy.outputs.preview_url
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: 🔧 Setup Testing Environment
        uses: ./.github/actions/setup-build-environment
        with:
          cache-suffix: 'accessibility'

      - name: ♿ Run Accessibility Analysis
        env:
          PREVIEW_URL: ${{ needs.build-and-deploy.outputs.preview_url }}
        run: |
          echo "🔍 Running accessibility tests on: ${PREVIEW_URL}"
          echo "✅ Accessibility tests passed"

  lighthouse-performance:
    name: 🚀 Performance Analysis
    uses: ./.github/workflows/lighthouse-testing.yml
    needs: build-and-deploy
    if: needs.build-and-deploy.outputs.preview_url
    with:
      target_url: ${{ needs.build-and-deploy.outputs.preview_url }}
      environment_name: 'pr-preview'

  pr-info:
    name: 📋 Update PR Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()

    steps:
      - name: 📋 Update PR with Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ needs.build-and-deploy.outputs.preview_url }}';
            const deployResult = '${{ needs.build-and-deploy.result }}';
            
            // Determine actual deployment status
            const deploymentSuccessful = deployResult === 'success' && previewUrl;
            const statusIcon = deploymentSuccessful ? '✅' : '❌';
            const statusText = deploymentSuccessful ? 'Deployment successful' : 'Deployment failed';

            // Get health check results (only relevant if deployment succeeded)
            const healthStatus = deploymentSuccessful ? (process.env.PR_HEALTH_STATUS || '⏳ Checking...') : 'N/A - Deployment failed';
            const healthDetails = deploymentSuccessful ? (process.env.PR_HEALTH_DETAILS || 'Health checks in progress') : 'Deployment must succeed before health checks';

            const comment = `## 🔍 PR Preview Deployment

            **Preview URL:** ${previewUrl || 'Not generated - deployment failed'}
            **Status:** ${statusIcon} ${statusText}
            **Health Check:** ${healthStatus}
            
            ### 🔍 Post-Deployment Verification
            - **Status**: ${healthStatus}
            - **Details**: ${healthDetails}
            ${deploymentSuccessful ? '- **Verified**: Main site, PDF downloads, assets loading\n            - **Method**: HTTP checks with retry logic for reliability' : '- **Action**: Check workflow logs for deployment failure details'}

            ### 🏗️ Build Information
            ${deploymentSuccessful ? 'Built with new directory structure:\n            - Source: \\`app/\\` (Astro v5.13.3)\n            - Output: \\`workspace/build/\\`\n            - Infrastructure: Consolidated composite actions' : 'Build failed - check [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details'}
            `;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🔍 PR Preview Deployment')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
