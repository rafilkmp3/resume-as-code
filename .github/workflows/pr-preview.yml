name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
    paths:
      - 'src/**'
      - 'assets/**'
      - '*.html'
      - '*.json'
      - '*.js'
      - '*.css'
      - 'scripts/**'
      - 'Dockerfile'
      - 'package*.json'

permissions:
  contents: write  # Need write to update pr-previews branch
  pull-requests: write
  actions: read

env:
  NODE_VERSION: '20'

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Build and deploy PR preview to separate branch
  preview-deploy:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: github.event.action != 'closed'
    environment:
      name: stage-pr-${{ github.event.pull_request.number }}
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.pull_request.number }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          lfs: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-pr-${{ github.event.pull_request.number }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-pr-${{ github.event.pull_request.number }}-
            ${{ runner.os }}-buildx-pr-
            ${{ runner.os }}-buildx-

      - name: Generate preview URL
        id: preview-url
        run: |
          PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.pull_request.number }}"
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "üì± Preview URL: $PREVIEW_URL"

      - name: Build PR preview
        env:
          PREVIEW_URL: ${{ steps.preview-url.outputs.url }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_REF_NAME: pr-${{ github.event.pull_request.number }}
          NODE_ENV: stage
          BUILD_MODE: stage
        run: |
          echo "üèóÔ∏è Building PR preview with QR code integration"
          echo "üì± Preview URL: $PREVIEW_URL"

          docker buildx build \
            --target prod \
            --platform linux/amd64 \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF_NAME="$GITHUB_REF_NAME" \
            --build-arg PREVIEW_URL="$PREVIEW_URL" \
            --build-arg NODE_ENV=stage \
            --build-arg BUILD_MODE=stage \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --tag pr-preview:${{ github.event.pull_request.number }} \
            --load \
            .

          # Extract preview build from nginx html directory
          mkdir -p pr-preview-build
          docker run --rm -v "$PWD/pr-preview-build:/tmp/dist" pr-preview:${{ github.event.pull_request.number }} sh -c "cp -r /usr/share/nginx/html/* /tmp/dist/"

          # Update cache atomically
          if [[ -d "/tmp/.buildx-cache-new" ]]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

          echo "üìÅ Preview build artifacts:"
          ls -la pr-preview-build/

      - name: Add PR preview banner
        run: |
          echo "üè∑Ô∏è Adding PR preview identification banner"

          # Add PR preview banner to the HTML
          sed -i 's|<body|<body style="border-top: 5px solid #ff6b35;">|g' pr-preview-build/index.html

          # Add PR preview notice at the top of the page
          sed -i 's|<body[^>]*>|&\n<div style="background: linear-gradient(135deg, #ff6b35, #f7931e); color: white; text-align: center; padding: 10px 20px; margin: 0; font-family: -apple-system, BlinkMacSystemFont, sans-serif; font-size: 14px; position: sticky; top: 0; z-index: 1000; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"><strong>üöÄ PR PREVIEW #${{ github.event.pull_request.number }}</strong> - This is a preview deployment for testing. <a href="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}" style="color: white; text-decoration: underline;">View PR ‚Üí</a></div>|g' pr-preview-build/index.html

          echo "‚úÖ PR preview banner added to HTML"

      - name: Deploy to pr-previews branch (production-safe)
        run: |
          echo "üöÄ Deploying PR preview to separate pr-previews branch (production stays at /)"

          # Store the build directory path (absolute) before switching branches
          BUILD_DIR="$(pwd)/pr-preview-build"
          echo "üìÅ Build directory: $BUILD_DIR"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Fetch pr-previews branch or create if doesn't exist
          if git fetch origin pr-previews; then
            git checkout pr-previews
            echo "üìÇ Checked out existing pr-previews branch"
          else
            # Create new orphan pr-previews branch
            git checkout --orphan pr-previews
            git rm -rf .
            echo "üìÇ Created new pr-previews branch"

            # Create initial index.html for PR previews root
            cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>PR Previews - Resume as Code</title>
              <meta name="description" content="PR Preview Area - Resume as Code">
              <style>
                body {
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                  text-align: center;
                  padding: 2rem;
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  color: white;
                  min-height: 100vh;
                  margin: 0;
                }
                .container {
                  max-width: 800px;
                  margin: 0 auto;
                  background: rgba(255,255,255,0.1);
                  padding: 2rem;
                  border-radius: 12px;
                  backdrop-filter: blur(10px);
                  box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                }
                h1 { color: white; margin-bottom: 0.5rem; font-size: 2.5rem; }
                .subtitle { color: rgba(255,255,255,0.9); margin-bottom: 2rem; font-size: 1.2rem; }
                .btn {
                  display: inline-block;
                  padding: 12px 24px;
                  background: rgba(255,255,255,0.2);
                  color: white;
                  text-decoration: none;
                  border-radius: 8px;
                  font-weight: 600;
                  border: 2px solid rgba(255,255,255,0.3);
                  transition: all 0.3s ease;
                }
                .btn:hover {
                  background: rgba(255,255,255,0.3);
                  transform: translateY(-2px);
                }
                .notice {
                  margin: 2rem 0;
                  padding: 1.5rem;
                  background: rgba(255,255,255,0.1);
                  border-radius: 8px;
                  border: 1px solid rgba(255,255,255,0.2);
                }
                .pr-list {
                  margin-top: 2rem;
                  text-align: left;
                  background: rgba(0,0,0,0.1);
                  border-radius: 8px;
                  padding: 1.5rem;
                }
                .pr-item {
                  padding: 0.5rem 0;
                  border-bottom: 1px solid rgba(255,255,255,0.1);
                }
                .pr-item:last-child { border-bottom: none; }
                .pr-item a { color: #87CEEB; text-decoration: none; }
                .pr-item a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ PR Previews</h1>
                  <div class="subtitle">Pull Request Preview Environment</div>

                  <div class="notice">
                      <strong>üìã This is the PR preview staging area</strong><br>
                      Production site is always at the <strong>root URL</strong> and unaffected by PRs.
                  </div>

                  <a href="../" class="btn">‚Üê Back to Production Site</a>

                  <div class="pr-list">
                      <h3>üî¨ Active PR Previews</h3>
                      <p><em>Active PR previews will be automatically listed here...</em></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
            git add index.html
            git commit -m "Initialize pr-previews branch with directory listing"
          fi

          # Clean up old PR directory if it exists
          if [ -d "pr-${{ github.event.pull_request.number }}" ]; then
            rm -rf "pr-${{ github.event.pull_request.number }}"
            echo "üßπ Cleaned up existing PR #${{ github.event.pull_request.number }} directory"
          fi

          # Copy PR preview build to subdirectory using absolute path
          mkdir -p "pr-${{ github.event.pull_request.number }}"
          cp -r "$BUILD_DIR"/* "pr-${{ github.event.pull_request.number }}/"

          echo "üìÅ PR preview structure:"
          ls -la "pr-${{ github.event.pull_request.number }}"/

          # Add and commit PR preview
          git add "pr-${{ github.event.pull_request.number }}/"
          git commit -m "feat: add PR #${{ github.event.pull_request.number }} preview

          üöÄ PR Preview Deployment (Production-Safe)

          - **PR**: #${{ github.event.pull_request.number }}
          - **Branch**: ${{ github.event.pull_request.head.ref }}
          - **Commit**: ${{ github.event.pull_request.head.sha }}
          - **Preview URL**: ${{ steps.preview-url.outputs.url }}
          - **Production**: Unaffected (stays at root /)

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          # Push to pr-previews branch
          git push origin pr-previews

          echo "‚úÖ PR preview deployed to: ${{ steps.preview-url.outputs.url }}"
          echo "üõ°Ô∏è Production site remains unaffected at root URL"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = "${{ steps.preview-url.outputs.url }}";
            const prNumber = context.payload.pull_request.number;
            const commentBody = `
            ## üì± PR Preview Ready! (Production-Safe)

            Your preview is deployed with **complete isolation** from production:

            ### üåê **[View Preview ‚Üí](${previewUrl})**

            **üõ°Ô∏è Production Protection:**
            - ‚úÖ **Production Unaffected**: Main site stays at root URL
            - ‚úÖ **Multiple PR Support**: Each PR gets its own subdirectory
            - ‚úÖ **Isolated Deployment**: Uses separate \`pr-previews\` branch
            - ‚úÖ **Recruiter-Safe**: Sent URLs remain stable and working

            **üöÄ Preview Features:**
            - ‚úÖ **PR Banner**: Clear identification this is a preview deployment
            - ‚úÖ **QR Code Integration**: Scan to test on mobile devices
            - ‚úÖ **Mobile Testing**: Perfect for cross-device validation
            - ‚úÖ **Live Changes**: Reflects all changes in this PR
            - ‚úÖ **Git LFS Assets**: Profile images and all assets included

            **üìä Preview Details:**
            - **URL**: \`${previewUrl}\`
            - **Commit**: \`${{ github.event.pull_request.head.sha }}\`
            - **Branch**: \`${{ github.event.pull_request.head.ref }}\`
            - **Deployment**: Separate from production (safe)

            **üì± Mobile Testing Workflow:**
            1. Open the preview link above
            2. Look for the orange **"üöÄ PR PREVIEW #${prNumber}"** banner at the top
            3. Click the QR code button in the resume
            4. Scan with your phone for instant mobile testing
            5. QR codes automatically point to this preview! üéØ

            **üîç How to Verify This is the PR Preview:**
            - Orange banner at the top: "üöÄ PR PREVIEW #${prNumber}"
            - URL shows the PR subdirectory: \`/pr-${prNumber}/\`
            - Banner links back to this PR for reference

            > üîÑ Updates automatically when you push new commits
            >
            > üõ°Ô∏è **Production guarantee**: Main site at root URL never affected
            `;

            // Find existing preview comment to update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Preview Ready!')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

  # Cleanup when PR is closed
  cleanup-preview:
    name: Cleanup PR Preview
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.action == 'closed'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove PR preview from pr-previews branch
        run: |
          echo "üßπ Removing PR #${{ github.event.pull_request.number }} preview (production stays safe)"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Checkout pr-previews branch
          if git fetch origin pr-previews && git checkout pr-previews; then
            # Remove PR directory if it exists
            if [ -d "pr-${{ github.event.pull_request.number }}" ]; then
              rm -rf "pr-${{ github.event.pull_request.number }}"
              git add -A
              git commit -m "cleanup: remove PR #${{ github.event.pull_request.number }} preview

              üßπ PR Preview Cleanup (Production-Safe)

              - **PR**: #${{ github.event.pull_request.number }} (${{ github.event.pull_request.merged && 'merged' || 'closed' }})
              - **Branch**: ${{ github.event.pull_request.head.ref }}
              - **Production**: Unaffected (always at root)

              ü§ñ Generated with [Claude Code](https://claude.ai/code)

              Co-Authored-By: Claude <noreply@anthropic.com>"
              git push origin pr-previews
              echo "‚úÖ PR preview directory removed from pr-previews branch"
            else
              echo "‚ÑπÔ∏è PR preview directory not found - may have been already cleaned up"
            fi
          else
            echo "‚ÑπÔ∏è pr-previews branch not found - nothing to clean up"
          fi

      - name: Comment cleanup notice
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const cleanupBody = `
            ## üßπ PR Preview Cleaned Up (Production-Safe)

            Preview deployment has been cleaned up from the staging area.

            **Status:** ‚úÖ Environment cleaned up
            **Reason:** PR was ${{ github.event.pull_request.merged && 'merged' || 'closed' }}
            **URL:** \`https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${prNumber}\` (no longer accessible)

            **üõ°Ô∏è Production Protection:** Main site at root URL remains completely unaffected.
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: cleanupBody
            });
