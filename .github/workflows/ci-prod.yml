name: Production CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'assets/**' 
      - 'config/**'
      - '*.html'
      - '*.json'
      - '*.js'
      - '*.css'
      - 'scripts/**'
      - 'docker/Dockerfile'
      - '.github/workflows/ci-prod.yml'
      - 'Makefile'
      - 'package*.json'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Semantic versioning job - runs first to potentially create new version
  version-check:
    name: Check for Version Bump
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version-bumped: ${{ steps.version.outputs.bumped }}
      new-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for version analysis
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
      - name: Run semantic version check
        id: version
        run: |
          echo "üîç Checking if version bump is needed..."
          
          # Run version bump in dry-run mode first to see what would happen
          if npm run version:auto 2>/dev/null; then
            echo "bumped=true" >> $GITHUB_OUTPUT
            # Get the new version from package.json
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Version bumped to: $NEW_VERSION"
            
            # Push the version bump and tag
            git push origin main
            git push origin --tags
            
            # Create GitHub Release with proper changelog
            echo "üè∑Ô∏è Creating GitHub Release for v$NEW_VERSION..."
            gh release create "v$NEW_VERSION" \
              --title "Release v$NEW_VERSION" \
              --notes-from-tag \
              --generate-notes \
              --latest
            
          else
            echo "bumped=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No version bump needed"
          fi

  # Essential build job - guaranteed to work
  build:
    name: Build Resume
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: version-check
    env:
      DOCKER_BUILDKIT: 1
      BUILDX_NO_DEFAULT_ATTESTATIONS: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js (for version injection)
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Inject version into documentation
        run: |
          echo "üîÑ Injecting current version into documentation placeholders..."
          if [ -f "scripts/inject-version.js" ]; then
            node scripts/inject-version.js || {
              echo "‚ö†Ô∏è  Version injection failed, but continuing with build"
              echo "üí° This is non-critical - build will proceed without version placeholders"
              exit 0
            }
          else
            echo "‚ö†Ô∏è  Version injection script not found, skipping"
            echo "üí° Build will continue without version placeholder injection"
          fi
        
      - name: Display runtime info
        run: |
          echo "::group::Runtime Environment"
          echo "GitHub Runner: ${{ runner.os }} ${{ runner.arch }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref_name }}"
          echo "SHA: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Actor: ${{ github.actor }}"
          echo "::endgroup::"
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
          driver-opts: |
            image=moby/buildkit:latest
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('package*.json', 'docker/Dockerfile*') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Optimized Docker Build
        run: |
          echo "::group::üöÄ Optimized Docker build with advanced caching"
          START_TIME=$(date +%s)
          
          # Calculate cache hash to avoid unnecessary rebuilds
          CACHE_KEY=$(echo "${{ hashFiles('package*.json', 'template.html', 'resume-data.json', 'scripts/**', 'assets/**') }}" | head -c 12)
          echo "üìã Content cache key: $CACHE_KEY"
          
          # Check if we can skip build entirely
          if docker manifest inspect "resume-cache:$CACHE_KEY" >/dev/null 2>&1; then
            echo "üéØ Cache hit! Using pre-built image"
            docker tag "resume-cache:$CACHE_KEY" "resume-build:${{ github.sha }}"
          else
            echo "üî® Cache miss, building with optimized caching"
            docker buildx build \
              --file docker/Dockerfile.fallback \
              --target builder \
              --platform linux/amd64 \
              --build-arg GITHUB_SHA=${{ github.sha }} \
              --build-arg GITHUB_REF_NAME=${{ github.ref_name }} \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --tag "resume-build:${{ github.sha }}" \
              --tag "resume-cache:$CACHE_KEY" \
              --load \
              .
            
            # Update cache (atomic operation)
            if [[ -d "/tmp/.buildx-cache-new" ]]; then
              rm -rf /tmp/.buildx-cache
              mv /tmp/.buildx-cache-new /tmp/.buildx-cache
            fi
          fi
          
          # Extract artifacts (single operation)
          mkdir -p dist
          docker run --rm -v "$PWD/dist:/tmp/dist" "resume-build:${{ github.sha }}" sh -c "cp -r /app/dist/* /tmp/dist/"
          
          END_TIME=$(date +%s)
          echo "‚úÖ Build completed in $((END_TIME - START_TIME))s"
          ls -la dist/
          echo "::endgroup::"
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ github.sha }}
          path: dist/
          retention-days: 30
          compression-level: 6

  # Alpha testing - informational only, never blocks deployment
  test-alpha:
    name: Alpha Tests (Informational)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, security]
    env:
      CI: true
      NODE_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
        continue-on-error: true
      
      - name: Install dependencies
        run: |
          echo "::group::Installing npm dependencies"
          npm ci --prefer-offline --no-audit || echo "Dependency installation failed, skipping tests"
          echo "::endgroup::"
        continue-on-error: true

      - name: Run alpha tests (informational only)
        run: |
          echo "üî¨ Running alpha tests - results are informational only"
          echo "‚ö†Ô∏è These tests CANNOT block deployment"
          
          case "${{ matrix.test-type }}" in
            unit) 
              echo "::group::üß™ Running unit tests (alpha)"
              if command -v npm >/dev/null 2>&1; then
                npm run test:unit || echo "‚ùå Unit tests failed (non-blocking)"
              else
                echo "‚ùå npm not available, skipping unit tests"
              fi
              echo "::endgroup::"
              ;;
            security)
              echo "::group::üîí Running security audit (alpha)"
              if command -v npm >/dev/null 2>&1; then
                npm audit --audit-level=high --prefer-offline || echo "‚ùå Security audit found issues (non-blocking)"
              else
                echo "‚ùå npm not available, skipping security audit"
              fi
              echo "::endgroup::"
              ;;
          esac
        continue-on-error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alpha-${{ matrix.test-type }}-results-${{ github.sha }}
          path: |
            coverage/
            test-results/
          retention-days: 7
          include-hidden-files: true
        continue-on-error: true

  # Production deployment - guaranteed to work, independent of tests
  deploy:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build]  # Only depends on build, not tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ github.sha }}
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Generate production deployment summary
        if: always()
        run: |
          echo "# üöÄ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìä Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Actor** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run ID** | [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üåê Live Resume" >> $GITHUB_STEP_SUMMARY
          echo "### üì± [**View Production Resume**](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **URL**: \`${{ steps.deployment.outputs.page_url }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ‚úÖ Production Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è **Build**: Resume HTML/PDF generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "- üî¨ **Alpha Tests**: Informational testing (results don't affect deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Deploy**: Published to GitHub Pages (Production)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üî¨ Alpha Test Philosophy" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö†Ô∏è **Non-blocking**: Tests run for information only" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Deploy First**: Deployment is independent of test results" >> $GITHUB_STEP_SUMMARY
          echo "- üìä **Learn**: Test results help improve future reliability" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Production resume successfully deployed!**" >> $GITHUB_STEP_SUMMARY
