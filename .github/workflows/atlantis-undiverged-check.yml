---
name: 🌊 Atlantis-Style Undiverged Check

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull request number to check'
        required: true
        type: string
      base_branch:
        description: 'Base branch name (usually main)'
        required: false
        type: string
        default: 'main'
      auto_update:
        description: 'Automatically update diverged branches'
        required: false
        type: boolean
        default: false
      block_on_diverged:
        description: 'Fail the workflow if branch is diverged'
        required: false
        type: boolean
        default: true
    outputs:
      is_diverged:
        description: 'Whether the PR branch is diverged from base'
        value: ${{ jobs.undiverged-check.outputs.is_diverged }}
      commits_behind:
        description: 'Number of commits the PR is behind base'
        value: ${{ jobs.undiverged-check.outputs.commits_behind }}
      base_sha:
        description: 'Current base branch SHA'
        value: ${{ jobs.undiverged-check.outputs.base_sha }}
      pr_base_sha:
        description: 'PR base branch SHA'
        value: ${{ jobs.undiverged-check.outputs.pr_base_sha }}

permissions:
  contents: read
  pull-requests: write

jobs:
  undiverged-check:
    name: 🌊 Atlantis Undiverged Validation
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 5
    outputs:
      is_diverged: ${{ steps.divergence-check.outputs.is_diverged }}
      commits_behind: ${{ steps.divergence-check.outputs.commits_behind }}
      base_sha: ${{ steps.divergence-check.outputs.base_sha }}
      pr_base_sha: ${{ steps.divergence-check.outputs.pr_base_sha }}

    steps:
      - name: 🔍 Checkout Repository  
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history needed for divergence analysis
          token: ${{ github.token }}

      - name: 🌊 Atlantis-Style Divergence Check
        id: divergence-check
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ inputs.pr_number }}
          BASE_BRANCH: ${{ inputs.base_branch }}
        run: |
          echo "## 🌊 Atlantis-Style Undiverged Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "**Base Branch:** $BASE_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get PR details
          PR_INFO=$(gh pr view "$PR_NUMBER" --json baseRefOid,headRefOid,title,headRefName)
          PR_BASE_SHA=$(echo "$PR_INFO" | jq -r '.baseRefOid')
          PR_HEAD_SHA=$(echo "$PR_INFO" | jq -r '.headRefOid')
          PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
          PR_HEAD_REF=$(echo "$PR_INFO" | jq -r '.headRefName')
          
          echo "📋 **PR Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Title: $PR_TITLE" >> $GITHUB_STEP_SUMMARY
          echo "- Head Branch: $PR_HEAD_REF" >> $GITHUB_STEP_SUMMARY
          echo "- PR Base SHA: \`${PR_BASE_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get current base branch SHA
          CURRENT_BASE_SHA=$(git rev-parse "$BASE_BRANCH")
          echo "🎯 **Current $BASE_BRANCH HEAD:** \`${CURRENT_BASE_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if diverged (PR base SHA != current base SHA)
          IS_DIVERGED="false"
          COMMITS_BEHIND=0
          
          if [ "$PR_BASE_SHA" != "$CURRENT_BASE_SHA" ]; then
            IS_DIVERGED="true"
            COMMITS_BEHIND=$(git rev-list --count "${PR_BASE_SHA}..${CURRENT_BASE_SHA}")
            
            echo "🚨 **DIVERGED BRANCH DETECTED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Status | ❌ **DIVERGED** |" >> $GITHUB_STEP_SUMMARY
            echo "| Commits Behind | **$COMMITS_BEHIND** commits |" >> $GITHUB_STEP_SUMMARY
            echo "| PR Base | \`${PR_BASE_SHA:0:8}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Current $BASE_BRANCH | \`${CURRENT_BASE_SHA:0:8}\` |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### 🔧 Recent Commits in $BASE_BRANCH" >> $GITHUB_STEP_SUMMARY
            echo "The following commits were added to $BASE_BRANCH since this PR was created:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            git log --oneline "${PR_BASE_SHA}..${CURRENT_BASE_SHA}" | head -10 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "✅ **BRANCH IS UP-TO-DATE**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Status | ✅ **UP-TO-DATE** |" >> $GITHUB_STEP_SUMMARY
            echo "| Commits Behind | **0** commits |" >> $GITHUB_STEP_SUMMARY
            echo "| Branch SHA | \`${CURRENT_BASE_SHA:0:8}\` |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Set outputs
          echo "is_diverged=$IS_DIVERGED" >> $GITHUB_OUTPUT
          echo "commits_behind=$COMMITS_BEHIND" >> $GITHUB_OUTPUT
          echo "base_sha=$CURRENT_BASE_SHA" >> $GITHUB_OUTPUT
          echo "pr_base_sha=$PR_BASE_SHA" >> $GITHUB_OUTPUT

      - name: 🔄 Auto-Update Branch (if enabled)
        if: steps.divergence-check.outputs.is_diverged == 'true' && inputs.auto_update == true
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ inputs.pr_number }}
        run: |
          echo "### 🔄 Auto-Updating Branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if gh pr view "$PR_NUMBER" --json mergeable | jq -r '.mergeable' | grep -q "MERGEABLE"; then
            echo "🔄 Updating branch for PR #$PR_NUMBER..." >> $GITHUB_STEP_SUMMARY
            
            if gh api \
              --method PUT \
              "/repos/${{ github.repository }}/pulls/$PR_NUMBER/update-branch" \
              --field expected_head_sha="${{ steps.divergence-check.outputs.pr_head_sha }}" 2>/dev/null; then
              echo "✅ **Branch updated successfully**" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Failed to update branch** - may have conflicts" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Manual action required:** Please update the branch manually or resolve conflicts" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Cannot auto-update** - PR has merge conflicts" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🛡️ Atlantis-Style Protection (Fail on Diverged)
        if: steps.divergence-check.outputs.is_diverged == 'true' && inputs.block_on_diverged == true
        run: |
          echo "## 🛡️ Atlantis Protection: BLOCKED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **This workflow is blocked because the PR branch is diverged from main.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Required Actions" >> $GITHUB_STEP_SUMMARY
          echo "1. **Update Branch**: Click 'Update branch' button on PR page" >> $GITHUB_STEP_SUMMARY
          echo "2. **Manual Update**: \`git pull origin main\` and push to PR branch" >> $GITHUB_STEP_SUMMARY
          echo "3. **Wait for CI**: Re-run this workflow after branch is updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌊 Atlantis Undiverged Requirement" >> $GITHUB_STEP_SUMMARY
          echo "This follows the [Atlantis undiverged requirement](https://www.runatlantis.io/docs/command-requirements#undiverged)" >> $GITHUB_STEP_SUMMARY
          echo "which ensures PR branches are current with the base branch before allowing operations." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commits behind:** ${{ steps.divergence-check.outputs.commits_behind }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current status:** ❌ DIVERGED" >> $GITHUB_STEP_SUMMARY
          
          exit 1

      - name: ✅ Atlantis Protection: Passed  
        if: steps.divergence-check.outputs.is_diverged == 'false'
        run: |
          echo "### ✅ Atlantis Protection: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Branch is up-to-date with main** - proceeding with operations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ UP-TO-DATE" >> $GITHUB_STEP_SUMMARY
          echo "**Atlantis Undiverged:** ✅ PASSED" >> $GITHUB_STEP_SUMMARY