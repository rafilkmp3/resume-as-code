name: Docker Images

on:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'config/playwright.config*.js'
      - '.github/workflows/docker-images.yml'
  pull_request:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'config/playwright.config*.js'
      - '.github/workflows/docker-images.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: docker-images-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Detect which images need to be rebuilt
  detect-changes:
    name: Detect Changed Images
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.actor != 'dependabot[bot]'
    outputs:
      chromium-changed: ${{ steps.changes.outputs.chromium }}
      firefox-changed: ${{ steps.changes.outputs.firefox }}
      webkit-changed: ${{ steps.changes.outputs.webkit }}
      any-changed: ${{ steps.changes.outputs.any }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        id: changes
        run: |
          echo "Detecting changes for efficient Docker builds..."

          # Force rebuild if requested
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "🔄 Force rebuild requested"
            echo "base=true" >> $GITHUB_OUTPUT
            echo "chromium=true" >> $GITHUB_OUTPUT
            echo "firefox=true" >> $GITHUB_OUTPUT
            echo "webkit=true" >> $GITHUB_OUTPUT
            echo "any=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for changes in specific Dockerfiles or dependencies
          BASE_CHANGED=false
          CHROMIUM_CHANGED=false
          FIREFOX_CHANGED=false
          WEBKIT_CHANGED=false

          # Get changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || echo "docker/Dockerfile.browsers")
          fi

          echo "Changed files: $CHANGED_FILES"

          # Check for changes in unified Dockerfile or shared dependencies
          if echo "$CHANGED_FILES" | grep -qE "(Dockerfile|package\.json|package-lock\.json|\.github/workflows/docker-images\.yml)"; then
            BASE_CHANGED=true
            CHROMIUM_CHANGED=true
            FIREFOX_CHANGED=true
            WEBKIT_CHANGED=true
          fi

          # Set outputs
          echo "chromium=$CHROMIUM_CHANGED" >> $GITHUB_OUTPUT
          echo "firefox=$FIREFOX_CHANGED" >> $GITHUB_OUTPUT
          echo "webkit=$WEBKIT_CHANGED" >> $GITHUB_OUTPUT

          ANY_CHANGED=false
          if [ "$CHROMIUM_CHANGED" = "true" ] || [ "$FIREFOX_CHANGED" = "true" ] || [ "$WEBKIT_CHANGED" = "true" ]; then
            ANY_CHANGED=true
          fi
          echo "any=$ANY_CHANGED" >> $GITHUB_OUTPUT

          echo "📊 Change Detection Results:"
          echo "  Chromium: $CHROMIUM_CHANGED"
          echo "  Firefox: $FIREFOX_CHANGED"
          echo "  WebKit: $WEBKIT_CHANGED"
          echo "  Any: $ANY_CHANGED"

  # Build and test images in parallel
  build-images:
    name: Build & Test (${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: chromium
            dockerfile: Dockerfile
            target: chromium
            should-build: ${{ needs.detect-changes.outputs.chromium-changed }}
          - browser: firefox
            dockerfile: Dockerfile
            target: firefox
            should-build: ${{ needs.detect-changes.outputs.firefox-changed }}
          - browser: webkit
            dockerfile: Dockerfile
            target: webkit
            should-build: ${{ needs.detect-changes.outputs.webkit-changed }}
    env:
      DOCKER_BUILDKIT: 1
      BUILDX_NO_DEFAULT_ATTESTATIONS: 1
    steps:
      - name: Skip if no changes
        if: matrix.should-build != 'true'
        run: |
          echo "⏭️ Skipping ${{ matrix.browser }} - no changes detected"
          exit 0

      - name: Checkout
        if: matrix.should-build == 'true'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: matrix.should-build == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Get package version
        if: matrix.should-build == 'true'
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "Package version: $PACKAGE_VERSION"

      - name: Log in to Container Registry
        if: matrix.should-build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: matrix.should-build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.browser }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.PACKAGE_VERSION }},enable=true

      - name: Build AMD64 image for testing
        if: matrix.should-build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          platforms: linux/amd64
          push: false
          load: true
          tags: test-${{ matrix.browser }}:local
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=golden-base-${{ github.ref_name }}
            type=gha,scope=golden-base-main
            type=gha,scope=${{ matrix.browser }}-${{ github.ref_name }}
            type=gha,scope=${{ matrix.browser }}-main
          cache-to: |
            type=gha,mode=max,scope=golden-base-${{ github.ref_name }}
            type=gha,mode=max,scope=${{ matrix.browser }}-${{ github.ref_name }}

      - name: Run smoke tests
        if: matrix.should-build == 'true'
        run: |
          echo "🧪 Running smoke tests for ${{ matrix.browser }} (AMD64 - Multi-arch will be built during push)"

          # Use local test tag for smoke tests
          IMAGE_TAG="test-${{ matrix.browser }}:local"
          echo "Testing image: $IMAGE_TAG"

          # Test 1: Basic container startup
          echo "  ✓ Testing container startup..."
          docker run --rm $IMAGE_TAG echo "Container started successfully"

          # Test 2: Node.js and npm are available
          echo "  ✓ Testing Node.js environment..."
          docker run --rm $IMAGE_TAG node --version
          docker run --rm $IMAGE_TAG npm --version

          # Test 3: Playwright is installed
          echo "  ✓ Testing Playwright installation..."
          docker run --rm $IMAGE_TAG npx playwright --version

          # Test 4: Verify testuser permissions and browser accessibility
          echo "  ✓ Verifying testuser can access browser files..."
          docker run --rm $IMAGE_TAG sh -c "whoami && id && test -r /opt/playwright && echo 'Browser directory accessible to testuser'"

          # Test 5: Verify browser installation and basic functionality
          echo "  🎭 Testing ${{ matrix.browser }} browser installation..."
          case "${{ matrix.browser }}" in
            chromium)
              echo "    Testing Chromium browser startup"
              docker run --rm $IMAGE_TAG node -e "const { chromium } = require('playwright'); (async () => { const browser = await chromium.launch({headless: true}); console.log('✅ Chromium browser launched successfully'); await browser.close(); })()"
              ;;
            firefox)
              echo "    Testing Firefox browser startup"
              docker run --rm $IMAGE_TAG node -e "const { firefox } = require('playwright'); (async () => { const browser = await firefox.launch({headless: true}); console.log('✅ Firefox browser launched successfully'); await browser.close(); })()"
              ;;
            webkit)
              echo "    Testing WebKit browser startup"
              docker run --rm $IMAGE_TAG node -e "const { webkit } = require('playwright'); (async () => { const browser = await webkit.launch({headless: true}); console.log('✅ WebKit browser launched successfully'); await browser.close(); })()"
              ;;
          esac

          echo "✅ All smoke tests and Hello World test passed for ${{ matrix.browser }}"

      - name: Push image
        if: matrix.should-build == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=golden-base-${{ github.ref_name }}
            type=gha,scope=golden-base-main
            type=gha,scope=${{ matrix.browser }}-${{ github.ref_name }}
            type=gha,scope=${{ matrix.browser }}-main
          cache-to: |
            type=gha,mode=max,scope=golden-base-${{ github.ref_name }}
            type=gha,mode=max,scope=${{ matrix.browser }}-${{ github.ref_name }}

      - name: Image summary
        if: matrix.should-build == 'true'
        run: |
          echo "## 🐳 ${{ matrix.browser }} Browser Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Image details
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Browser** | ${{ matrix.browser }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Base Image** | Multi-stage from \`node:22-slim\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Architecture** | AMD64 + ARM64 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Registry** | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.browser }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tags** | \`${{ github.ref_name }}\`, \`latest\`, \`${{ github.ref_name }}-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Published** | ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test results
          echo "### 🧪 Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Container startup**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Node.js/npm environment**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Playwright installation**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **User permissions**: testuser (uid=1001) configured" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 **Hello World test**: Browser functionality verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Usage instructions
          echo "### 🚀 Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the image (use specific version for reproducibility)" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.browser }}:${{ env.PACKAGE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "# Run embedded hello world test" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.browser }}:${{ env.PACKAGE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "# Run custom tests" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -v \"\$(pwd):/workspace\" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.browser }}:${{ env.PACKAGE_VERSION }} npx playwright test --project=desktop-${{ matrix.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Summary job
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [detect-changes, build-images]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# 🐳 Docker Browser Images Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build information
          echo "## 📊 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch/Ref** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Actor** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run ID** | [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.any-changed }}" != "true" ]; then
            echo "## ℹ️ No Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "All Docker images are up to date. No builds were necessary." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💡 Tip" >> $GITHUB_STEP_SUMMARY
            echo "Use **workflow_dispatch** with **force_rebuild=true** to rebuild all images regardless of changes." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "## 🎯 Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | Changed | Status | Architecture | Hello World Test |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|--------|--------------|------------------|" >> $GITHUB_STEP_SUMMARY

          # Check each image status
          for image in chromium firefox webkit; do
            case $image in
              chromium) changed="${{ needs.detect-changes.outputs.chromium-changed }}" ;;
              firefox) changed="${{ needs.detect-changes.outputs.firefox-changed }}" ;;
              webkit) changed="${{ needs.detect-changes.outputs.webkit-changed }}" ;;
            esac

            if [ "$changed" = "true" ]; then
              if [ "${{ needs.build-images.result }}" = "success" ]; then
                status="✅ Success"
                arch="AMD64 + ARM64"
                hello_test="🎭 Verified"
              else
                status="❌ Failed"
                arch="N/A"
                hello_test="❌ Failed"
              fi
            else
              status="⏭️ Skipped"
              arch="N/A"
              hello_test="⏭️ Skipped"
            fi

            echo "| **$image** | $changed | $status | $arch | $hello_test |" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-images.result }}" = "success" ]; then
            echo "## 🚀 Published Images" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "Multi-architecture images (AMD64/ARM64) published to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              for image in chromium firefox webkit; do
                case $image in
                  chromium) changed="${{ needs.detect-changes.outputs.chromium-changed }}" ;;
                  firefox) changed="${{ needs.detect-changes.outputs.firefox-changed }}" ;;
                  webkit) changed="${{ needs.detect-changes.outputs.webkit-changed }}" ;;
                esac
                if [ "$changed" = "true" ]; then
                  echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$image:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
                fi
              done
            else
              echo "Images built but not published (PR or manual trigger without push)." >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY

            echo "## 🎭 Embedded Tests" >> $GITHUB_STEP_SUMMARY
            echo "Each image includes embedded Hello World tests that verify:" >> $GITHUB_STEP_SUMMARY
            echo "- Browser functionality and binary execution" >> $GITHUB_STEP_SUMMARY
            echo "- Playwright integration and test runner" >> $GITHUB_STEP_SUMMARY
            echo "- User permissions (testuser uid=1001)" >> $GITHUB_STEP_SUMMARY
            echo "- Basic page interactions and DOM manipulation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run with: \`docker run --rm <image-name>\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "Some images failed to build. Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi
