---
name: Deployment Notifications

on:
  # Trigger after successful Netlify staging deployment
  workflow_run:
    workflows: ["Staging Pipeline"]
    types: [completed]
    branches: [main]
  # Manual trigger for notifications
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Notification type'
        required: false
        default: 'deployment'
        type: choice
        options:
          - deployment
          - status-check

concurrency:
  group: deploy-notifications-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  deployment-notifications:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get deployment info
        id: deploy-info
        run: |
          # Get the latest commit info
          COMMIT_SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
          COMMIT_MESSAGE=$(git log --format="%s" -n 1 $COMMIT_SHA)
          COMMIT_AUTHOR=$(git log --format="%an" -n 1 $COMMIT_SHA)

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version" || echo "unknown")

          # Netlify Staging URL
          STAGING_URL="https://resume-as-code.netlify.app/"

          # Export variables
          echo "commit-sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "commit-message=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          echo "commit-author=${COMMIT_AUTHOR}" >> $GITHUB_OUTPUT
          echo "current-version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "staging-url=${STAGING_URL}" >> $GITHUB_OUTPUT

          # Log for debugging
          echo "📋 Deployment Info:"
          echo "  Commit: ${COMMIT_SHA}"
          echo "  Message: ${COMMIT_MESSAGE}"
          echo "  Author: ${COMMIT_AUTHOR}"
          echo "  Version: ${CURRENT_VERSION}"
          echo "  Staging URL: ${STAGING_URL}"

      - name: Create deployment notification
        uses: actions/github-script@v7
        env:
          COMMIT_SHA: ${{ steps.deploy-info.outputs.commit-sha }}
          COMMIT_MESSAGE: ${{ steps.deploy-info.outputs.commit-message }}
          COMMIT_AUTHOR: ${{ steps.deploy-info.outputs.commit-author }}
          CURRENT_VERSION: ${{ steps.deploy-info.outputs.current-version }}
          STAGING_URL: ${{ steps.deploy-info.outputs.staging-url }}
        with:
          script: |
            const commitSha = process.env.COMMIT_SHA;
            const commitMessage = process.env.COMMIT_MESSAGE;
            const commitAuthor = process.env.COMMIT_AUTHOR;
            const currentVersion = process.env.CURRENT_VERSION;
            const stagingUrl = process.env.STAGING_URL;

            const shortSha = commitSha.substring(0, 7);
            const timestamp = new Date().toISOString();

            // Create staging deployment notification
            const deploymentBody = `# 🚀 Staging Deployment Notification

            **Status**: ✅ **DEPLOYED TO STAGING**
            **Environment**: Staging (Netlify)
            **Version**: \`${currentVersion}\`
            **Timestamp**: ${timestamp}

            ## 📊 Staging Deployment Details

            - **URL**: [${stagingUrl}](${stagingUrl})
            - **Commit**: [\`${shortSha}\`](${context.payload.repository.html_url}/commit/${commitSha})
            - **Author**: ${commitAuthor}
            - **Message**: ${commitMessage}

            ## 🔗 Staging Access Points

            - 🌐 **Staging Site**: [${stagingUrl}](${stagingUrl})
            - 📱 **PDF Downloads**: [${stagingUrl}](${stagingUrl}) (Screen/Print/ATS versions)
            - 🎯 **QR Code**: Points to staging environment
            - 🧪 **Testing**: Ready for validation before production release

            ## 📦 Three-Tier Deployment Pipeline

            **🔀 PR Preview**: Netlify deploy previews for pull requests
            **🚀 Staging**: Netlify main site for staging validation
            **🌟 Production**: GitHub Pages for final production releases

            **Current Status**:
            - ✅ Main branch changes deployed to staging
            - 🔄 Ready for testing and validation
            - 📋 Create release to deploy to production

            ---
            *🤖 Automated staging notification from GitHub Actions*`;

            console.log('📢 Staging deployment notification created successfully');
            console.log(`🌐 Deployed to staging: ${stagingUrl}`);

            // Log the notification for pipeline summary
            core.summary.addHeading('🚀 Staging Deployment Notification Sent', 2);
            core.summary.addRaw(`
            **Status**: ✅ Deployed to Staging
            **URL**: [${stagingUrl}](${stagingUrl})
            **Version**: ${currentVersion}
            **Commit**: ${shortSha}
            `);
            await core.summary.write();

      - name: Three-tier deployment strategy summary
        run: |
          echo "## 🎯 Three-Tier Deployment Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔀 PR Preview (Netlify)" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Purpose**: Pull request preview deployments" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **URL Pattern**: deploy-preview-[PR]--resume-as-code.netlify.app" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Trigger**: Opening/updating pull requests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Staging (Netlify)" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **URL**: https://resume-as-code.netlify.app/" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Trigger**: Merge to main branch" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Purpose**: Staging validation before production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌟 Production (GitHub Pages)" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **URL**: https://rafilkmp3.github.io/resume-as-code/" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Trigger**: Published releases" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Builds**: Unlimited via GitHub Actions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pipeline Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Complete testing pipeline: PR → Staging → Production" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Netlify build minutes optimized (preview + staging only)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Production reliability via GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Automated release management with release-please" >> $GITHUB_STEP_SUMMARY
