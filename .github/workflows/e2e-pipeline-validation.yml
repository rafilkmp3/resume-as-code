name: üß™ E2E Pipeline Validation (Master Controller)

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to execute'
        required: true
        type: choice
        options:
          - 'full-cycle'
          - 'pr-flow-only'
          - 'staging-only'
          - 'release-flow-only'
          - 'endpoints-only'
        default: 'full-cycle'
      skip_pr_creation:
        description: 'Skip automated PR creation (use existing PR)'
        required: false
        type: boolean
        default: false
      pr_number:
        description: 'Existing PR number (if skip_pr_creation is true)'
        required: false
        type: string
        default: ''
      dry_run:
        description: 'Dry run mode (validate only, no real operations)'
        required: false
        type: boolean
        default: false

concurrency:
  group: e2e-pipeline-${{ github.ref }}-${{ inputs.test_scope }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  actions: write
  deployments: read

env:
  E2E_TEST_IDENTIFIER: "e2e-test-${{ github.run_id }}"
  E2E_BRANCH_NAME: "e2e/pipeline-test-${{ github.run_id }}"

jobs:
  initialize-e2e-controller:
    name: üöÄ Initialize E2E Pipeline Controller
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      test_branch: ${{ steps.setup.outputs.test_branch }}
      test_pr_number: ${{ steps.setup.outputs.test_pr_number }}
      validation_id: ${{ steps.setup.outputs.validation_id }}
      endpoints_to_test: ${{ steps.setup.outputs.endpoints_to_test }}
      should_run_pr_flow: ${{ steps.scope.outputs.should_run_pr_flow }}
      should_run_staging: ${{ steps.scope.outputs.should_run_staging }}
      should_run_release: ${{ steps.scope.outputs.should_run_release }}
      should_run_endpoints: ${{ steps.scope.outputs.should_run_endpoints }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine Test Scope
        id: scope
        run: |
          echo "üéØ Determining test scope: ${{ inputs.test_scope }}"
          
          case "${{ inputs.test_scope }}" in
            "full-cycle")
              echo "should_run_pr_flow=true" >> $GITHUB_OUTPUT
              echo "should_run_staging=true" >> $GITHUB_OUTPUT
              echo "should_run_release=true" >> $GITHUB_OUTPUT
              echo "should_run_endpoints=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Full cycle testing enabled"
              ;;
            "pr-flow-only")
              echo "should_run_pr_flow=true" >> $GITHUB_OUTPUT
              echo "should_run_staging=false" >> $GITHUB_OUTPUT
              echo "should_run_release=false" >> $GITHUB_OUTPUT
              echo "should_run_endpoints=true" >> $GITHUB_OUTPUT
              echo "‚úÖ PR flow testing only"
              ;;
            "staging-only")
              echo "should_run_pr_flow=false" >> $GITHUB_OUTPUT
              echo "should_run_staging=true" >> $GITHUB_OUTPUT
              echo "should_run_release=false" >> $GITHUB_OUTPUT
              echo "should_run_endpoints=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Staging testing only"
              ;;
            "release-flow-only")
              echo "should_run_pr_flow=false" >> $GITHUB_OUTPUT
              echo "should_run_staging=false" >> $GITHUB_OUTPUT
              echo "should_run_release=true" >> $GITHUB_OUTPUT
              echo "should_run_endpoints=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Release flow testing only"
              ;;
            "endpoints-only")
              echo "should_run_pr_flow=false" >> $GITHUB_OUTPUT
              echo "should_run_staging=false" >> $GITHUB_OUTPUT
              echo "should_run_release=false" >> $GITHUB_OUTPUT
              echo "should_run_endpoints=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Endpoint monitoring only"
              ;;
          esac

      - name: Setup E2E Test Environment
        id: setup
        run: |
          echo "üîß Setting up E2E test environment..."
          
          VALIDATION_ID="e2e-$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"
          TEST_BRANCH="${{ env.E2E_BRANCH_NAME }}"
          
          echo "validation_id=$VALIDATION_ID" >> $GITHUB_OUTPUT
          echo "test_branch=$TEST_BRANCH" >> $GITHUB_OUTPUT
          
          # Determine PR number
          if [[ "${{ inputs.skip_pr_creation }}" == "true" && -n "${{ inputs.pr_number }}" ]]; then
            echo "test_pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "üìã Using existing PR: #${{ inputs.pr_number }}"
          else
            echo "test_pr_number=" >> $GITHUB_OUTPUT
            echo "üìã Will create new test PR"
          fi
          
          # Setup endpoints to test based on scope
          ENDPOINTS='["https://resume-as-code.netlify.app/version.json", "https://rafilkmp3.github.io/resume-as-code/version.json"]'
          echo "endpoints_to_test=$ENDPOINTS" >> $GITHUB_OUTPUT
          
          echo "‚úÖ E2E Controller initialized with ID: $VALIDATION_ID"

      - name: Validate Current Environment State
        run: |
          echo "üîç Validating current environment state..."
          
          # Check GitHub CLI authentication
          if ! gh auth status > /dev/null 2>&1; then
            echo "‚ùå GitHub CLI not authenticated"
            exit 1
          fi
          
          # Check repository permissions
          if ! gh api repos/${{ github.repository }} --jq '.permissions' > /dev/null 2>&1; then
            echo "‚ùå Insufficient repository permissions"
            exit 1
          fi
          
          # Validate workflow files exist
          REQUIRED_WORKFLOWS=(
            ".github/workflows/pr-preview.yml"
            ".github/workflows/staging-deployment.yml"
            ".github/workflows/release-please.yml"
          )
          
          for workflow in "${REQUIRED_WORKFLOWS[@]}"; do
            if [[ ! -f "$workflow" ]]; then
              echo "‚ùå Required workflow missing: $workflow"
              exit 1
            fi
          done
          
          echo "‚úÖ Environment validation passed"
        env:
          GH_TOKEN: ${{ github.token }}

  pr-flow-validator:
    name: üîÑ PR Flow Validator
    needs: initialize-e2e-controller
    if: needs.initialize-e2e-controller.outputs.should_run_pr_flow == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      pr_number: ${{ steps.pr-creation.outputs.pr_number }}
      preview_url: ${{ steps.preview-validation.outputs.preview_url }}
      pr_status: ${{ steps.pr-validation.outputs.status }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create Test Branch and PR
        id: pr-creation
        if: needs.initialize-e2e-controller.outputs.test_pr_number == ''
        run: |
          echo "üåø Creating test branch: ${{ needs.initialize-e2e-controller.outputs.test_branch }}"
          
          # Create test branch
          git checkout -b "${{ needs.initialize-e2e-controller.outputs.test_branch }}"
          
          # Make test changes to trigger workflows
          TEST_CONTENT="E2E Pipeline Test - ${{ needs.initialize-e2e-controller.outputs.validation_id }}"
          
          # Create a valid JSON modification - add test info to resume data
          node -e "
          const fs = require('fs');
          const resumeData = JSON.parse(fs.readFileSync('src/resume-data.json', 'utf8'));
          resumeData.e2eTestInfo = '$TEST_CONTENT';
          resumeData.e2eTestTimestamp = new Date().toISOString();
          fs.writeFileSync('src/resume-data.json', JSON.stringify(resumeData, null, 2));
          "
          
          # Commit test changes
          git config user.name "E2E Pipeline Bot"
          git config user.email "e2e-pipeline@github.actions"
          git add src/resume-data.json
          git commit -m "test: e2e pipeline validation - ${{ needs.initialize-e2e-controller.outputs.validation_id }}"
          
          # Push test branch
          git push origin "${{ needs.initialize-e2e-controller.outputs.test_branch }}"
          
          # Create PR
          PR_BODY="## üß™ E2E Pipeline Validation
          
          **Validation ID**: \`${{ needs.initialize-e2e-controller.outputs.validation_id }}\`
          **Test Scope**: ${{ inputs.test_scope }}
          **Dry Run**: ${{ inputs.dry_run }}
          
          This PR is created automatically by the E2E Pipeline Validation workflow to test:
          - ‚úÖ PR Preview deployment
          - ‚úÖ Staging deployment (after merge)
          - ‚úÖ Version endpoint generation
          - ‚úÖ Workflow orchestration
          
          **‚ö†Ô∏è Auto-generated PR - Safe to merge for testing**"
          
          PR_NUMBER=$(gh pr create \
            --title "üß™ E2E Pipeline Test - ${{ needs.initialize-e2e-controller.outputs.validation_id }}" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ needs.initialize-e2e-controller.outputs.test_branch }}" \
            --label "automated" | grep -o '#[0-9]*' | tr -d '#')
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "‚úÖ Created test PR: #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Wait for PR Preview Deployment
        id: preview-validation
        run: |
          PR_NUM="${{ steps.pr-creation.outputs.pr_number || needs.initialize-e2e-controller.outputs.test_pr_number }}"
          echo "‚è≥ Waiting for PR #$PR_NUM preview deployment..."
          
          MAX_ATTEMPTS=20
          ATTEMPT=1
          PREVIEW_URL=""
          
          while [[ $ATTEMPT -le $MAX_ATTEMPTS ]]; do
            echo "üîç Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking PR preview status..."
            
            # Check PR status and deployments
            PR_INFO=$(gh pr view "$PR_NUM" --json url,statusCheckRollup)
            
            # Look for Netlify preview deployment
            if echo "$PR_INFO" | jq -e '.statusCheckRollup[] | select(.name | contains("netlify"))' > /dev/null; then
              NETLIFY_STATUS=$(echo "$PR_INFO" | jq -r '.statusCheckRollup[] | select(.name | contains("netlify")) | .state')
              if [[ "$NETLIFY_STATUS" == "SUCCESS" ]]; then
                PREVIEW_URL="https://deploy-preview-${PR_NUM}--resume-as-code.netlify.app"
                echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
                echo "‚úÖ PR preview deployed: $PREVIEW_URL"
                break
              fi
            fi
            
            if [[ $ATTEMPT -eq $MAX_ATTEMPTS ]]; then
              echo "‚ö†Ô∏è Preview deployment not detected after $MAX_ATTEMPTS attempts"
              echo "preview_url=" >> $GITHUB_OUTPUT
            fi
            
            echo "‚è≥ Waiting 30 seconds before retry..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Validate PR Preview
        id: pr-validation
        run: |
          PREVIEW_URL="${{ steps.preview-validation.outputs.preview_url }}"
          
          if [[ -n "$PREVIEW_URL" ]]; then
            echo "üîç Validating PR preview: $PREVIEW_URL"
            
            # Test preview accessibility
            if curl -f -s -L "$PREVIEW_URL" > /dev/null; then
              echo "‚úÖ PR preview is accessible"
              
              # Test version endpoint
              if curl -f -s "$PREVIEW_URL/version.json" | jq . > /dev/null; then
                echo "‚úÖ Preview version endpoint is functional"
                echo "status=success" >> $GITHUB_OUTPUT
              else
                echo "‚ö†Ô∏è Preview version endpoint not accessible"
                echo "status=partial" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ùå PR preview is not accessible"
              echo "status=failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå No preview URL available for validation"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

  staging-environment-validator:
    name: üéØ Staging Environment Validator
    needs: [initialize-e2e-controller, pr-flow-validator]
    if: needs.initialize-e2e-controller.outputs.should_run_staging == 'true' && (success() || needs.initialize-e2e-controller.outputs.should_run_pr_flow == 'false')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      staging_deployment_status: ${{ steps.staging-validation.outputs.status }}
      staging_version_check: ${{ steps.version-validation.outputs.status }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Merge Test PR (if created)
        if: needs.pr-flow-validator.outputs.pr_number != '' && inputs.dry_run == false
        run: |
          PR_NUMBER="${{ needs.pr-flow-validator.outputs.pr_number }}"
          echo "üîÄ Merging test PR #$PR_NUMBER to trigger staging deployment..."
          
          # Wait for PR to be ready for merge
          echo "‚è≥ Waiting for PR checks to complete..."
          gh pr ready "$PR_NUMBER" --undo 2>/dev/null || true
          
          # Merge PR
          gh pr merge "$PR_NUMBER" --merge --delete-branch
          echo "‚úÖ Test PR merged successfully"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Monitor Staging Deployment
        id: staging-validation
        run: |
          echo "üìä Monitoring staging deployment workflow..."
          
          MAX_ATTEMPTS=15
          ATTEMPT=1
          DEPLOYMENT_FOUND=false
          
          while [[ $ATTEMPT -le $MAX_ATTEMPTS ]]; do
            echo "üîç Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking staging deployment..."
            
            # Get recent workflow runs for staging deployment
            RECENT_RUNS=$(gh run list --workflow="staging-deployment.yml" --limit=3 --json status,conclusion,url)
            
            # Check if any recent run is in progress or completed
            if echo "$RECENT_RUNS" | jq -e '.[] | select(.status == "in_progress" or .conclusion == "success")' > /dev/null; then
              DEPLOYMENT_FOUND=true
              echo "‚úÖ Staging deployment detected"
              break
            fi
            
            if [[ $ATTEMPT -eq $MAX_ATTEMPTS ]]; then
              echo "‚ö†Ô∏è No staging deployment detected after $MAX_ATTEMPTS attempts"
            fi
            
            echo "‚è≥ Waiting 1 minute before retry..."
            sleep 60
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [[ "$DEPLOYMENT_FOUND" == "true" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Validate Version Against Git and Node
        id: version-validation
        run: |
          echo "üîç Validating version information against git and node commands..."
          
          # Get current git information
          GIT_COMMIT=$(git rev-parse HEAD)
          GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          GIT_SHORT_COMMIT=$(git rev-parse --short HEAD)
          
          # Get package.json version
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "üìã Local Environment Information:"
          echo "  Git Commit: $GIT_COMMIT"
          echo "  Git Branch: $GIT_BRANCH"
          echo "  Package Version: $PACKAGE_VERSION"
          echo ""
          
          # Test staging version.json
          STAGING_URL="https://resume-as-code.netlify.app"
          echo "üìã Testing $STAGING_URL/version.json..."
          
          if curl -f -s "$STAGING_URL/version.json" | jq . > /dev/null; then
            VERSION_DATA=$(curl -s "$STAGING_URL/version.json")
            echo "‚úÖ Staging version.json is accessible"
            echo "üìÑ Version data: $VERSION_DATA"
            
            # Extract version information from endpoint
            ENDPOINT_VERSION=$(echo "$VERSION_DATA" | jq -r '.version // "unknown"')
            ENDPOINT_COMMIT=$(echo "$VERSION_DATA" | jq -r '.commitHash // "unknown"')
            ENDPOINT_BRANCH=$(echo "$VERSION_DATA" | jq -r '.buildBranch // "unknown"')
            ENDPOINT_ENV=$(echo "$VERSION_DATA" | jq -r '.environment // "unknown"')
            
            echo ""
            echo "üìã Version Endpoint Information:"
            echo "  Version: $ENDPOINT_VERSION"
            echo "  Commit: $ENDPOINT_COMMIT"
            echo "  Branch: $ENDPOINT_BRANCH"
            echo "  Environment: $ENDPOINT_ENV"
            echo ""
            
            # Validation logic
            VALIDATION_ISSUES=0
            
            # Check if version matches package.json
            if [[ "$ENDPOINT_VERSION" == "$PACKAGE_VERSION" ]]; then
              echo "‚úÖ Version matches package.json ($PACKAGE_VERSION)"
            else
              echo "‚ö†Ô∏è Version mismatch: endpoint=$ENDPOINT_VERSION, package.json=$PACKAGE_VERSION"
              VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            fi
            
            # Check if commit hash matches (at least first 7 characters)
            if [[ "$ENDPOINT_COMMIT" == "$GIT_SHORT_COMMIT"* ]] || [[ "$ENDPOINT_COMMIT" == "$GIT_COMMIT" ]]; then
              echo "‚úÖ Commit hash matches git ($GIT_SHORT_COMMIT)"
            else
              echo "‚ö†Ô∏è Commit hash mismatch: endpoint=$ENDPOINT_COMMIT, git=$GIT_SHORT_COMMIT"
              VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            fi
            
            # Check environment field exists
            if [[ "$ENDPOINT_ENV" != "unknown" ]]; then
              echo "‚úÖ Environment field present ($ENDPOINT_ENV)"
            else
              echo "‚ö†Ô∏è Environment field missing"
              VALIDATION_ISSUES=$((VALIDATION_ISSUES + 1))
            fi
            
            # Final validation result
            if [[ $VALIDATION_ISSUES -eq 0 ]]; then
              echo "‚úÖ All version validation checks passed"
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è $VALIDATION_ISSUES validation issue(s) found"
              echo "status=partial" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "‚ùå Staging version endpoint not accessible"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

  endpoint-monitor:
    name: üåê Endpoint Monitor
    needs: initialize-e2e-controller
    if: needs.initialize-e2e-controller.outputs.should_run_endpoints == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      monitoring_results: ${{ steps.endpoint-check.outputs.results }}
    steps:
      - name: Monitor All Endpoints
        id: endpoint-check
        run: |
          echo "üåê Monitoring all deployment endpoints..."
          
          # Simple endpoint monitoring without complex JSON construction
          STAGING_URL="https://resume-as-code.netlify.app/version.json"
          PROD_URL="https://rafilkmp3.github.io/resume-as-code/version.json"
          
          echo "üîç Testing staging endpoint: $STAGING_URL"
          if curl -f -s -L "$STAGING_URL" > /dev/null; then
            echo "‚úÖ Staging endpoint is accessible"
            STAGING_STATUS="success"
          else
            echo "‚ùå Staging endpoint is not accessible"
            STAGING_STATUS="failed"
          fi
          
          echo "üîç Testing production endpoint: $PROD_URL"
          if curl -f -s -L "$PROD_URL" > /dev/null; then
            echo "‚úÖ Production endpoint is accessible"
            PROD_STATUS="success"
          else
            echo "‚ùå Production endpoint is not accessible (expected for non-release branches)"
            PROD_STATUS="expected_fail"
          fi
          
          # Create simple JSON results
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "results={\"staging\":\"$STAGING_STATUS\",\"production\":\"$PROD_STATUS\",\"timestamp\":\"$TIMESTAMP\"}" >> $GITHUB_OUTPUT
          echo "üìä Endpoint monitoring completed"

  e2e-summary-report:
    name: üìä E2E Pipeline Summary
    needs: [initialize-e2e-controller, pr-flow-validator, staging-environment-validator, endpoint-monitor]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Generate E2E Pipeline Report
        run: |
          echo "üìä Generating E2E Pipeline Validation Report"
          echo "============================================="
          echo ""
          echo "**Validation ID**: ${{ needs.initialize-e2e-controller.outputs.validation_id }}"
          echo "**Test Scope**: ${{ inputs.test_scope }}"
          echo "**Dry Run**: ${{ inputs.dry_run }}"
          echo "**Execution Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "## üéØ Test Results Summary"
          echo ""
          
          # PR Flow Results
          if [[ "${{ needs.initialize-e2e-controller.outputs.should_run_pr_flow }}" == "true" ]]; then
            echo "### üîÑ PR Flow Validation"
            if [[ "${{ needs.pr-flow-validator.result }}" == "success" ]]; then
              echo "- ‚úÖ **Status**: PASSED"
              echo "- üìã **PR Number**: #${{ needs.pr-flow-validator.outputs.pr_number }}"
              echo "- üåê **Preview URL**: ${{ needs.pr-flow-validator.outputs.preview_url }}"
            else
              echo "- ‚ùå **Status**: FAILED"
            fi
            echo ""
          fi
          
          # Staging Results
          if [[ "${{ needs.initialize-e2e-controller.outputs.should_run_staging }}" == "true" ]]; then
            echo "### üéØ Staging Environment Validation"
            if [[ "${{ needs.staging-environment-validator.result }}" == "success" ]]; then
              echo "- ‚úÖ **Status**: PASSED"
              echo "- üöÄ **Deployment**: ${{ needs.staging-environment-validator.outputs.staging_deployment_status }}"
              echo "- üìÑ **Version Check**: ${{ needs.staging-environment-validator.outputs.staging_version_check }}"
            else
              echo "- ‚ùå **Status**: FAILED"
            fi
            echo ""
          fi
          
          # Endpoint Monitoring Results
          if [[ "${{ needs.initialize-e2e-controller.outputs.should_run_endpoints }}" == "true" ]]; then
            echo "### üåê Endpoint Monitoring"
            if [[ "${{ needs.endpoint-monitor.result }}" == "success" ]]; then
              echo "- ‚úÖ **Status**: PASSED"
              echo "- üìä **Results**: Available in job logs"
            else
              echo "- ‚ùå **Status**: FAILED"
            fi
            echo ""
          fi
          
          # Overall Status
          echo "## üèÅ Overall E2E Pipeline Status"
          OVERALL_STATUS="‚úÖ PASSED"
          
          if [[ "${{ needs.pr-flow-validator.result }}" == "failure" ]] || \
             [[ "${{ needs.staging-environment-validator.result }}" == "failure" ]] || \
             [[ "${{ needs.endpoint-monitor.result }}" == "failure" ]]; then
            OVERALL_STATUS="‚ùå FAILED"
          fi
          
          echo "**$OVERALL_STATUS**"
          echo ""
          echo "---"
          echo "*Generated by E2E Pipeline Validation Controller*"

      - name: Cleanup Test Resources
        if: always() && inputs.dry_run == false
        run: |
          echo "üßπ Cleaning up test resources..."
          
          # Clean up test branch if created
          TEST_BRANCH="${{ needs.initialize-e2e-controller.outputs.test_branch }}"
          if git ls-remote --heads origin "$TEST_BRANCH" | grep -q "$TEST_BRANCH"; then
            echo "üóëÔ∏è Deleting test branch: $TEST_BRANCH"
            git push origin --delete "$TEST_BRANCH" 2>/dev/null || echo "‚ö†Ô∏è Test branch may have been already deleted"
          fi
          
          echo "‚úÖ Cleanup completed"
        env:
          GH_TOKEN: ${{ github.token }}