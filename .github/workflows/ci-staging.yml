name: Staging CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'tests/**'
      - 'Dockerfile*'
      - 'playwright.config*.js'
      - '.github/workflows/ci-staging.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_e2e:
        description: 'Force run E2E tests'
        required: false
        default: 'false'
        type: boolean
      run_visual:
        description: 'Force run visual tests'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

jobs:
  # Check if Docker images are available for E2E testing
  check-images:
    name: Check Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      images-available: ${{ steps.check.outputs.available }}
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check image availability
        id: check
        run: |
          echo "🔍 Checking Docker image availability..."

          IMAGES=(
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-chromium:${{ github.ref_name }}"
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-firefox:${{ github.ref_name }}"
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-webkit:${{ github.ref_name }}"
          )

          AVAILABLE=true
          for image in "${IMAGES[@]}"; do
            echo "  Checking: $image"
            if docker manifest inspect "$image" >/dev/null 2>&1; then
              echo "    ✅ Available"
            else
              echo "    ❌ Not found"
              AVAILABLE=false
            fi
          done

          echo "available=$AVAILABLE" >> $GITHUB_OUTPUT

          if [ "$AVAILABLE" = "true" ]; then
            echo "✅ All Docker images are available"
          else
            echo "⚠️ Some Docker images are missing - E2E tests will be skipped"
            echo "💡 Run the 'Docker Images' workflow to build missing images"
          fi

  # Get build artifacts from production pipeline or build minimal version
  prepare-build:
    name: Prepare Build Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      has-artifacts: ${{ steps.check-artifacts.outputs.available }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for existing production build
        id: check-artifacts
        run: |
          echo "🔍 Looking for production build artifacts..."

          # Try to download from recent production builds
          AVAILABLE=false

          # For PRs or manual runs, we need to build
          if [ "${{ github.event_name }}" = "pull_request" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "available=false" >> $GITHUB_OUTPUT
            echo "📝 PR or manual run - will build fresh artifacts"
          else
            # Check if production CI recently ran
            echo "available=false" >> $GITHUB_OUTPUT
            echo "📝 Will build staging artifacts"
          fi

      - name: Set up Docker Buildx
        if: steps.check-artifacts.outputs.available != 'true'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build staging artifacts
        if: steps.check-artifacts.outputs.available != 'true'
        run: |
          echo "::group::🚀 Building staging artifacts"

          # Use buildx for consistent architecture with new unified Dockerfile
          if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
            echo "Using unified Dockerfile with builder target"
            docker buildx build --target builder --platform linux/amd64 -t staging-builder --load .
            mkdir -p dist
            docker run --rm -v "$PWD/dist:/tmp/dist" staging-builder sh -c "cp -r /app/dist/* /tmp/dist/" || {
              echo "Docker build failed, trying make build"
              make build || npm run build
            }
          else
            echo "Docker not available, using make build"
            make build || npm run build
          fi

          echo "📁 Staging build completed:"
          ls -la dist/
          echo "::endgroup::"
        continue-on-error: true

      - name: Upload staging build artifacts
        if: steps.check-artifacts.outputs.available != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: staging-build-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Experimental E2E tests - can fail without blocking
  test-e2e-experimental:
    name: E2E Tests (Experimental)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [check-images, prepare-build]
    if: |
      (needs.check-images.outputs.images-available == 'true' && github.event_name == 'pull_request') ||
      github.event.inputs.run_e2e == 'true'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium] # Start with just Chromium to reduce complexity
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    container:
      image: ghcr.io/${{ github.repository }}-${{ matrix.browser }}:${{ github.ref_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-build-${{ github.sha }}
          path: dist/
        continue-on-error: true

      - name: Run experimental E2E tests
        run: |
          echo "::group::🎭 Running experimental ${{ matrix.browser }} E2E tests"
          echo "Browser: ${{ matrix.browser }}"
          echo "Mode: Experimental - failures won't block deployment"

          # Run with relaxed settings
          npx playwright test \
            --project=desktop-chrome \
            --workers=1 \
            --max-failures=3 \
            --reporter=line \
            || echo "⚠️ E2E tests failed (non-blocking for staging)"
          echo "::endgroup::"
        continue-on-error: true

      - name: Upload experimental test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: experimental-e2e-${{ matrix.browser }}-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7
        continue-on-error: true

  # Visual regression tests - experimental
  test-visual-experimental:
    name: Visual Tests (Experimental)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [check-images, prepare-build]
    if: |
      (needs.check-images.outputs.images-available == 'true' && github.event_name == 'pull_request') ||
      github.event.inputs.run_visual == 'true'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    container:
      image: ghcr.io/${{ github.repository }}-chromium:${{ github.ref_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-build-${{ github.sha }}
          path: dist/
        continue-on-error: true

      - name: Run experimental visual tests
        run: |
          echo "::group::📸 Running experimental visual tests"
          echo "Mode: Experimental - for insights, not blocking"

          # Run visual tests with relaxed thresholds
          npx playwright test tests/visual-regression.spec.js \
            --project=desktop-chrome \
            --workers=1 \
            --reporter=html \
            || echo "⚠️ Visual tests failed (non-blocking for staging)"
          echo "::endgroup::"
        continue-on-error: true

      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: experimental-visual-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7
        continue-on-error: true

  # Staging summary
  staging-summary:
    name: Staging Summary
    runs-on: ubuntu-latest
    needs:
      [
        check-images,
        prepare-build,
        test-e2e-experimental,
        test-visual-experimental,
      ]
    if: always()
    steps:
      - name: Generate staging summary
        run: |
          echo "# 🧪 Staging Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📊 Pipeline Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | Staging (Experimental) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Event** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🧪 Experimental Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status | Impact |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          # Docker Images
          if [ "${{ needs.check-images.outputs.images-available }}" = "true" ]; then
            echo "| Docker Images | ✅ Available | Tests can run |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Images | ❌ Missing | Tests skipped |" >> $GITHUB_STEP_SUMMARY
          fi

          # E2E Tests
          if [ "${{ needs.test-e2e-experimental.result }}" = "success" ]; then
            echo "| E2E Tests | ✅ Passed | Good to go |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-e2e-experimental.result }}" = "failure" ]; then
            echo "| E2E Tests | ⚠️ Failed | Non-blocking |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| E2E Tests | ⏭️ Skipped | Not triggered |" >> $GITHUB_STEP_SUMMARY
          fi

          # Visual Tests
          if [ "${{ needs.test-visual-experimental.result }}" = "success" ]; then
            echo "| Visual Tests | ✅ Passed | Good to go |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-visual-experimental.result }}" = "failure" ]; then
            echo "| Visual Tests | ⚠️ Failed | Non-blocking |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Visual Tests | ⏭️ Skipped | Not triggered |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 💡 Staging Notes" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Purpose**: Test experimental features without blocking production" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **Production**: Handled by separate production pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **Failures**: All staging failures are non-blocking" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Insights**: Use results to improve test reliability" >> $GITHUB_STEP_SUMMARY
