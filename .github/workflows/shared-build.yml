name: 'Shared Build System'

on:
  workflow_dispatch:  # Allow manual builds
    inputs:
      build-context:
        description: 'Build context (dev, staging, production, pr)'
        required: true
        type: string
      deploy-url:
        description: 'Target deployment URL'
        required: false
        type: string
        default: ''
      pr-number:
        description: 'PR number for preview builds'
        required: false
        type: string
        default: ''
      cache-key-suffix:
        description: 'Cache key suffix'
        required: false
        type: string
        default: 'manual'
  workflow_call:
    inputs:
      build-context:
        description: 'Build context (dev, staging, production, pr)'
        required: true
        type: string
      deploy-url:
        description: 'Target deployment URL'
        required: false
        type: string
        default: ''
      pr-number:
        description: 'PR number for preview builds'
        required: false
        type: string
        default: ''
      cache-key-suffix:
        description: 'Additional cache key suffix'
        required: false
        type: string
        default: 'default'
      skip-artifact-upload:
        description: 'Skip uploading build artifacts'
        required: false
        type: boolean
        default: false
    outputs:
      build-duration:
        description: 'Build duration in seconds'
        value: ${{ jobs.build.outputs.build-duration }}
      build-size:
        description: 'Build output size'
        value: ${{ jobs.build.outputs.build-size }}

jobs:
  build:
    name: 'üîß Shared Build'
    runs-on: ubuntu-latest
    outputs:
      build-duration: ${{ steps.build-timer.outputs.duration }}
      build-size: ${{ steps.build-info.outputs.size }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Configure Git for CI'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: 'üöÄ Speedlight Caching (Dependencies + Build Artifacts)'
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache
            node_modules
            node_modules/.cache
            workspace/build/assets/images
            workspace/build/assets/optimized
          key: ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-${{ hashFiles('package-lock.json') }}-src-${{ hashFiles('app/**', 'public/**', 'astro.config.mjs', 'tailwind.config.mjs', 'tsconfig.json', 'infrastructure/scripts/**') }}
          restore-keys: |
            ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-${{ hashFiles('package-lock.json') }}-src-
            ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-
            ${{ runner.os }}-shared-build-
            
      - name: 'Setup Node.js (Speedlight)'
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          
      - name: 'Configure Node.js for CI'
        run: |
          echo "NODE_NO_WARNINGS=1" >> $GITHUB_ENV
          
      - name: '‚ö° Install Dependencies (with speedlight cache)'
        run: |
          echo "üì¶ Installing dependencies with speedlight cache..."
          if [ -d "node_modules" ] && [ -f "package-lock.json" ]; then
            echo "‚úÖ Found cached node_modules, validating..."
            npm ci --prefer-offline --no-audit
          else
            echo "üì• Fresh dependency installation..."
            npm ci --no-audit
          fi
          
      - name: 'Start build timer'
        id: build-start
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
        
      - name: 'üßπ Clean Build Environment'
        run: |
          echo "üßπ Cleaning workspace/build/ directory..."
          rm -rf workspace/build/
          
      - name: '‚ö° Execute Build'
        env:
          NETLIFY: ${{ inputs.build-context == 'pr' || inputs.build-context == 'staging' }}
          NETLIFY_ENV: ${{ inputs.build-context == 'pr' && 'deploy-preview' || inputs.build-context == 'staging' && 'production' || 'development' }}
          CONTEXT: ${{ inputs.build-context == 'pr' && 'deploy-preview' || inputs.build-context }}
          DEPLOY_URL: ${{ inputs.deploy-url }}
          REVIEW_ID: ${{ inputs.pr-number }}
          NODE_ENV: ${{ inputs.build-context == 'dev' && 'development' || 'production' }}
          NODE_OPTIONS: --max-old-space-size=4096
          GITHUB_PAGES: ${{ inputs.build-context == 'production' }}
          BUILD_CONTEXT: ${{ inputs.build-context }}
        run: |
          echo "üöÄ SHARED BUILD: ${{ inputs.build-context }} (#${{ inputs.pr-number || 'N/A' }})"
          echo "=========================================="
          echo "üìã Build Context: ${{ inputs.build-context }}"
          echo "üéØ Target URL: ${{ inputs.deploy-url || 'N/A' }}"
          echo "‚ö° Astro v5.13.3 with workspace/build/ output"
          echo ""
          
          # üîç Pre-build Environment Validation
          echo "üîç Pre-build diagnostics..."
          echo "  üìÅ Working Directory: $(pwd)"
          echo "  üì¶ Node.js: $(node --version)"
          echo "  üì¶ npm: $(npm --version)"
          echo "  üíæ Available Memory: $(free -h | grep '^Mem:' | awk '{print $2}' || echo 'N/A')"
          echo "  üíæ Available Disk: $(df -h . | tail -1 | awk '{print $4}' || echo 'N/A')"
          echo ""
          
          # üèóÔ∏è Execute Build with Enhanced Error Handling
          echo "üèóÔ∏è Building with optimized settings..."
          if time npm run build; then
            echo "‚úÖ Build completed successfully"
          else
            BUILD_EXIT_CODE=$?
            echo ""
            echo "‚ùå BUILD FAILED - Enhanced Debugging Information"
            echo "================================================"
            echo "üîç Exit Code: $BUILD_EXIT_CODE"
            echo "üìÅ Current Directory: $(pwd)"
            echo "üìÅ Build Directory Status:"
            [ -d "workspace/build" ] && ls -la workspace/build/ || echo "  ‚ùå workspace/build/ does not exist"
            echo ""
            echo "üì¶ Package.json scripts:"
            cat package.json | grep -A 10 '"scripts"' || echo "  ‚ùå Could not read package.json scripts"
            echo ""
            echo "üîß Environment Variables:"
            echo "  NODE_ENV: $NODE_ENV"
            echo "  BUILD_CONTEXT: $BUILD_CONTEXT" 
            echo "  NETLIFY: $NETLIFY"
            echo "  NODE_OPTIONS: $NODE_OPTIONS"
            echo ""
            echo "üí° Common Build Failure Solutions:"
            echo "  1. Check app/ directory for syntax errors"
            echo "  2. Verify all imports are correct in app/components/"
            echo "  3. Ensure astro.config.mjs is valid"
            echo "  4. Check resume-data.json format in app/data/"
            echo "  5. Verify all assets exist in public/ directory"
            echo ""
            exit $BUILD_EXIT_CODE
          fi
          
      - name: 'Calculate build duration'
        id: build-timer
        run: |
          BUILD_END=$(date +%s)
          DURATION=$((BUILD_END - BUILD_START))
          echo "duration=${DURATION}" >> $GITHUB_OUTPUT
          echo "üìä Build completed in ${DURATION} seconds"
          
      - name: 'üìä Build Information & Validation'
        id: build-info
        run: |
          echo "üìÅ Build artifacts (workspace/build/):"
          ls -la workspace/build/
          
          # Calculate build size
          if [ -d "workspace/build" ]; then
            BUILD_SIZE=$(du -sh workspace/build/ | cut -f1)
            echo "size=${BUILD_SIZE}" >> $GITHUB_OUTPUT
            echo "üì¶ Total build size: ${BUILD_SIZE}"
            
            # üîç Enhanced Build Validation
            echo ""
            echo "üîç Build Quality Validation:"
            echo "==========================="
            
            # Critical files validation
            VALIDATION_PASSED=0
            TOTAL_VALIDATIONS=5
            
            # 1. HTML validation
            if [ -f "workspace/build/index.html" ]; then
              HTML_SIZE=$(ls -lh workspace/build/index.html | awk '{print $5}')
              echo "  ‚úÖ HTML: index.html - ${HTML_SIZE}"
              VALIDATION_PASSED=$((VALIDATION_PASSED + 1))
            else
              echo "  ‚ùå Missing index.html (critical failure)"
            fi
            
            # 2. CSS/Assets validation 
            if [ -d "workspace/build/assets" ]; then
              ASSET_COUNT=$(find workspace/build/assets -type f | wc -l)
              echo "  ‚úÖ Assets: ${ASSET_COUNT} files in assets/ directory"
              VALIDATION_PASSED=$((VALIDATION_PASSED + 1))
            else
              echo "  ‚ùå Missing assets/ directory"
            fi
            
            # 3. PDF validation
            PDF_COUNT=0
            for pdf in workspace/build/resume.pdf workspace/build/resume-print.pdf workspace/build/resume-ats.pdf; do
              if [ -f "$pdf" ]; then
                PDF_SIZE=$(ls -lh "$pdf" | awk '{print $5}')
                echo "  ‚úÖ PDF: $(basename "$pdf") - ${PDF_SIZE}"
                PDF_COUNT=$((PDF_COUNT + 1))
              fi
            done
            if [ $PDF_COUNT -gt 0 ]; then
              VALIDATION_PASSED=$((VALIDATION_PASSED + 1))
              echo "  üìÑ Generated ${PDF_COUNT} PDF variant(s)"
            else
              echo "  ‚ö†Ô∏è  No PDFs generated (may be expected for draft builds)"
            fi
            
            # 4. Image optimization validation
            if [ -d "workspace/build/assets/images" ]; then
              IMG_COUNT=$(find workspace/build/assets/images -name "*.webp" -o -name "*.jpg" -o -name "*.png" | wc -l)
              echo "  ‚úÖ Images: ${IMG_COUNT} optimized image files"
              VALIDATION_PASSED=$((VALIDATION_PASSED + 1))
            else
              echo "  ‚ö†Ô∏è  No optimized images found"
            fi
            
            # 5. Size validation (reasonable build size)
            BUILD_SIZE_KB=$(du -sk workspace/build/ | cut -f1)
            if [ $BUILD_SIZE_KB -lt 100000 ]; then  # Less than 100MB
              echo "  ‚úÖ Size: Build size is reasonable (${BUILD_SIZE})"
              VALIDATION_PASSED=$((VALIDATION_PASSED + 1))
            else
              echo "  ‚ö†Ô∏è  Build size is large (${BUILD_SIZE}) - consider optimization"
            fi
            
            # Summary
            echo ""
            echo "üìä Build Validation Summary: ${VALIDATION_PASSED}/${TOTAL_VALIDATIONS} checks passed"
            if [ $VALIDATION_PASSED -ge 3 ]; then
              echo "‚úÖ Build quality is acceptable"
            else
              echo "‚ö†Ô∏è  Build quality issues detected - review above warnings"
            fi
            
          else
            echo "‚ùå Build directory not found!"
            exit 1
          fi
          
      - name: 'Upload Build Artifacts'
        if: ${{ !inputs.skip-artifact-upload }}
        uses: ./.github/actions/manage-artifacts
        with:
          action: 'upload'
          build-context: ${{ inputs.build-context }}
          pr-number: ${{ inputs.pr-number }}
          retention-days: 7