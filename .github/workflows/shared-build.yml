name: 'Shared Build System'

on:
  workflow_call:
    inputs:
      build-context:
        description: 'Build context (dev, staging, production, pr)'
        required: true
        type: string
      deploy-url:
        description: 'Target deployment URL'
        required: false
        type: string
        default: ''
      pr-number:
        description: 'PR number for preview builds'
        required: false
        type: string
        default: ''
      cache-key-suffix:
        description: 'Additional cache key suffix'
        required: false
        type: string
        default: 'default'
      skip-artifact-upload:
        description: 'Skip uploading build artifacts'
        required: false
        type: boolean
        default: false
    outputs:
      build-duration:
        description: 'Build duration in seconds'
        value: ${{ jobs.build.outputs.build-duration }}
      build-size:
        description: 'Build output size'
        value: ${{ jobs.build.outputs.build-size }}

jobs:
  build:
    name: 'üîß Shared Build'
    runs-on: ubuntu-latest
    outputs:
      build-duration: ${{ steps.build-timer.outputs.duration }}
      build-size: ${{ steps.build-info.outputs.size }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Configure Git for CI'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: 'üöÄ Speedlight Caching (Dependencies + Build Artifacts)'
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache
            node_modules
            node_modules/.cache
            workspace/build/assets/images
            workspace/build/assets/optimized
          key: ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-${{ hashFiles('package-lock.json') }}-src-${{ hashFiles('app/**', 'public/**', 'astro.config.mjs', 'tailwind.config.mjs', 'tsconfig.json', 'infrastructure/scripts/**') }}
          restore-keys: |
            ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-${{ hashFiles('package-lock.json') }}-src-
            ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-shared-build-${{ inputs.cache-key-suffix }}-
            ${{ runner.os }}-shared-build-
            
      - name: 'Setup Node.js (Speedlight)'
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          
      - name: 'Configure Node.js for CI'
        run: |
          echo "NODE_NO_WARNINGS=1" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=4096" >> $GITHUB_ENV
          
      - name: '‚ö° Install Dependencies (with speedlight cache)'
        run: |
          echo "üì¶ Installing dependencies with speedlight cache..."
          if [ -d "node_modules" ] && [ -f "package-lock.json" ]; then
            echo "‚úÖ Found cached node_modules, validating..."
            npm ci --prefer-offline --no-audit
          else
            echo "üì• Fresh dependency installation..."
            npm ci --no-audit
          fi
          
      - name: 'Start build timer'
        id: build-start
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
        
      - name: 'üßπ Clean Build Environment'
        run: |
          echo "üßπ Cleaning workspace/build/ directory..."
          rm -rf workspace/build/
          
      - name: '‚ö° Execute Build'
        env:
          NETLIFY: ${{ inputs.build-context == 'pr' || inputs.build-context == 'staging' }}
          NETLIFY_ENV: ${{ inputs.build-context == 'pr' && 'deploy-preview' || inputs.build-context == 'staging' && 'production' || 'development' }}
          CONTEXT: ${{ inputs.build-context == 'pr' && 'deploy-preview' || inputs.build-context }}
          DEPLOY_URL: ${{ inputs.deploy-url }}
          REVIEW_ID: ${{ inputs.pr-number }}
          NODE_ENV: ${{ inputs.build-context == 'dev' && 'development' || 'production' }}
          GITHUB_PAGES: ${{ inputs.build-context == 'production' }}
          BUILD_CONTEXT: ${{ inputs.build-context }}
        run: |
          echo "üöÄ SHARED BUILD: ${{ inputs.build-context }} (#${{ inputs.pr-number || 'N/A' }})"
          echo "=========================================="
          echo "üìã Build Context: ${{ inputs.build-context }}"
          echo "üéØ Target URL: ${{ inputs.deploy-url || 'N/A' }}"
          echo "‚ö° Astro v5.13.3 with workspace/build/ output"
          echo ""
          
          echo "üèóÔ∏è Building with optimized settings..."
          time npm run build
          
      - name: 'Calculate build duration'
        id: build-timer
        run: |
          BUILD_END=$(date +%s)
          DURATION=$((BUILD_END - BUILD_START))
          echo "duration=${DURATION}" >> $GITHUB_OUTPUT
          echo "üìä Build completed in ${DURATION} seconds"
          
      - name: 'üìä Build Information'
        id: build-info
        run: |
          echo "üìÅ Build artifacts (workspace/build/):"
          ls -la workspace/build/
          
          # Calculate build size
          if [ -d "workspace/build" ]; then
            BUILD_SIZE=$(du -sh workspace/build/ | cut -f1)
            echo "size=${BUILD_SIZE}" >> $GITHUB_OUTPUT
            echo "üì¶ Total build size: ${BUILD_SIZE}"
            
            # Validate critical files
            if [ -f "workspace/build/index.html" ]; then
              echo "  ‚úÖ HTML: $(ls -lh workspace/build/index.html | awk '{print $5}')"
            else
              echo "  ‚ùå Missing index.html"
            fi
            
            # Check for PDFs (if they exist)
            for pdf in workspace/build/resume.pdf workspace/build/resume-print.pdf workspace/build/resume-ats.pdf; do
              if [ -f "$pdf" ]; then
                echo "  ‚úÖ PDF: $(basename "$pdf") - $(ls -lh "$pdf" | awk '{print $5}')"
              fi
            done
          else
            echo "‚ùå Build directory not found!"
            exit 1
          fi
          
      - name: 'Upload Build Artifacts'
        if: ${{ !inputs.skip-artifact-upload }}
        uses: ./.github/actions/manage-artifacts
        with:
          action: 'upload'
          build-context: ${{ inputs.build-context }}
          pr-number: ${{ inputs.pr-number }}
          retention-days: 7