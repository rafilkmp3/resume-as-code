name: CI/CD Pipeline (DISABLED - Use ci-prod.yml)

on:
  # DISABLED: Use ci-prod.yml for production builds and ci-staging.yml for experimental features
  workflow_dispatch:
    inputs:
      emergency_override:
        description: 'Emergency override to run legacy CI'
        required: true
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  # Emergency message about workflow migration
  migration-notice:
    name: Workflow Migration Notice
    runs-on: ubuntu-latest
    if: github.event.inputs.emergency_override != 'true'
    steps:
      - name: Display migration notice
        run: |
          echo "# ‚ö†Ô∏è Workflow Migration Notice" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üö® This workflow has been disabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The original CI/CD pipeline has been split into optimized workflows:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ For Production Builds & Deployment:" >> $GITHUB_STEP_SUMMARY
          echo "**Use:** \`.github/workflows/ci-prod.yml\`" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Reliable**: Only proven, working components" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è **Build**: Docker-based HTML/PDF generation" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ **Tests**: Essential unit and security tests" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Deploy**: GitHub Pages deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üß™ For Experimental Features:" >> $GITHUB_STEP_SUMMARY
          echo "**Use:** \`.github/workflows/ci-staging.yml\`" >> $GITHUB_STEP_SUMMARY
          echo "- üé≠ **E2E Tests**: Browser-based testing (when Docker images available)" >> $GITHUB_STEP_SUMMARY
          echo "- üì∏ **Visual Tests**: Screenshot-based regression testing" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö†Ô∏è **Non-blocking**: Failures don't prevent deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üí° Benefits of New Architecture:" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Faster**: Production builds no longer blocked by experimental tests" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **Reliable**: Deployment guaranteed to work" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ **Flexible**: Experiment with new features without risk" >> $GITHUB_STEP_SUMMARY
          echo "- üìä **Clear**: Separate concerns for production vs testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*To run this legacy workflow in emergencies, set emergency_override=true*" >> $GITHUB_STEP_SUMMARY
          
          echo "‚ö†Ô∏è This workflow has been disabled. Use ci-prod.yml for production builds."
          exit 1

  # Emergency override - original workflow (if absolutely needed)
  check-images:
    name: Check Docker Images (Emergency Only)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.inputs.emergency_override == 'true'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      images-available: ${{ steps.check.outputs.available }}
      image-chromium: ${{ steps.check.outputs.chromium }}
      image-firefox: ${{ steps.check.outputs.firefox }}
      image-webkit: ${{ steps.check.outputs.webkit }}
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check image availability
        id: check
        run: |
          echo "üîç Checking Docker image availability..."
          
          # Define expected images
          IMAGES=(
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-chromium:${{ github.ref_name }}"
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-firefox:${{ github.ref_name }}"
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-webkit:${{ github.ref_name }}"
          )
          
          # Check each image
          AVAILABLE=true
          for image in "${IMAGES[@]}"; do
            echo "  Checking: $image"
            if docker manifest inspect "$image" >/dev/null 2>&1; then
              echo "    ‚úÖ Available"
            else
              echo "    ‚ùå Not found"
              AVAILABLE=false
            fi
          done
          
          # Set outputs
          echo "available=$AVAILABLE" >> $GITHUB_OUTPUT
          echo "chromium=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-chromium:${{ github.ref_name }}" >> $GITHUB_OUTPUT  
          echo "firefox=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-firefox:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "webkit=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-webkit:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          
          if [ "$AVAILABLE" = "true" ]; then
            echo "‚úÖ All Docker images are available"
          else
            echo "‚ö†Ô∏è Some Docker images are missing - E2E tests will be skipped"
            echo "üí° Trigger the 'Docker Images' workflow to build missing images"
          fi

  # Build first - needed for all tests
  build:
    name: Build Resume (Emergency Only)  
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.emergency_override == 'true'
    env:
      DOCKER_BUILDKIT: 1
      BUILDX_NO_DEFAULT_ATTESTATIONS: 1
      COMPOSE_BAKE: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Display runtime info
        run: |
          echo "::group::Runtime Environment"
          echo "GitHub Runner: ${{ runner.os }} ${{ runner.arch }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref_name }}"
          echo "SHA: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Actor: ${{ github.actor }}"
          echo "CPU Cores: $(nproc)"
          echo "Memory: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "Disk: $(df -h / | awk 'NR==2 {print $4}')"
          echo "::endgroup::"
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build with Docker (with caching)
        run: |
          echo "::group::üöÄ Building with Docker layer caching"
          echo "Runner: ${{ runner.os }} ${{ runner.arch }}"
          echo "Commit: ${{ github.sha }}"
          echo "Ref: ${{ github.ref_name }}"
          START_TIME=$(date +%s)
          
          docker buildx create --use --driver docker-container --name builder-${{ github.run_id }} || true
          docker buildx build \
            --target builder \
            --cache-from type=gha,scope=${{ github.ref_name }} \
            --cache-to type=gha,mode=max,scope=${{ github.ref_name }} \
            --tag resume-as-code:builder-${{ github.sha }} \
            --load \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            .
          mkdir -p dist
          docker run --rm -v "$PWD/dist:/tmp/dist" resume-as-code:builder-${{ github.sha }} sh -c "cp -r /app/dist/* /tmp/dist/"
          
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "‚úÖ Build completed with caching in ${BUILD_TIME}s"
          echo "üìÅ Generated files:"
          ls -la dist/
          echo "::endgroup::"
        env:
          DOCKER_BUILDKIT: 1
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}-${{ runner.os }}-${{ runner.arch }}
          path: dist/
          retention-days: ${{ github.event_name == 'pull_request' && '7' || '30' }}
          compression-level: 6

  # Browser-specific e2e tests
  test-e2e:
    name: E2E Tests (${{ matrix.browser }}) (Emergency Only)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, check-images]
    if: github.event.inputs.emergency_override == 'true' && needs.check-images.outputs.images-available == 'true'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            image: ${{ needs.check-images.outputs.image-chromium }}
            project: desktop-chrome
          - browser: firefox
            image: ${{ needs.check-images.outputs.image-firefox }}
            project: desktop-firefox
          - browser: webkit
            image: ${{ needs.check-images.outputs.image-webkit }}
            project: desktop-webkit
    container:
      image: ${{ matrix.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      CI: true
      NODE_ENV: test
      FORCE_COLOR: 3
      PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}-Linux-X64
          path: dist/

      - name: Run E2E tests
        run: |
          echo "::group::üé≠ Running ${{ matrix.browser }} E2E tests"
          echo "‚úÖ Using browser-specific Docker image"
          echo "Browser: ${{ matrix.browser }}"
          echo "Image: ${{ matrix.image }}"
          echo "Project: ${{ matrix.project }}"
          npx playwright test --project=${{ matrix.project }} --workers=1
          echo "::endgroup::"
        env:
          PWTEST_SKIP_TEST_OUTPUT: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-${{ matrix.browser }}-results-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
          retention-days: ${{ github.event_name == 'pull_request' && '7' || '30' }}
          include-hidden-files: true

  # Unit and security tests
  test:
    name: Test (${{ matrix.test-type }}) (Emergency Only)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.event.inputs.emergency_override == 'true'
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, security]
    env:
      CI: true
      NODE_ENV: test
      FORCE_COLOR: 3
      COMPOSE_BAKE: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Cache Playwright browsers
        if: matrix.test-type == 'playwright'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-${{ runner.arch }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-playwright-
            ${{ runner.os }}-playwright-
      
      - name: Install dependencies
        run: |
          echo "::group::Installing npm dependencies"
          npm ci --prefer-offline --no-audit
          echo "::endgroup::"
          
          if [ "${{ matrix.test-type }}" = "playwright" ]; then
            echo "::group::Installing Playwright browsers"
            npx playwright install --with-deps chromium
            echo "::endgroup::"
          fi
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: ${{ matrix.test-type != 'playwright' && 'true' || 'false' }}

      - name: Download build artifacts (for Playwright tests)
        if: matrix.test-type == 'playwright'
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}-${{ runner.os }}-${{ runner.arch }}
          path: dist/

      - name: Run tests
        run: |
          case "${{ matrix.test-type }}" in
            unit) 
              echo "::group::üß™ Running unit tests"
              npm run test:unit
              echo "::endgroup::"
              ;;
            playwright)
              echo "::group::üé≠ Running Playwright tests"
              echo "‚úÖ Using build artifacts from build job"
              echo "Runner: ${{ runner.os }} ${{ runner.arch }}"
              echo "Workers: ${{ runner.os == 'Linux' && '2' || '1' }}"
              npx playwright test --workers=${{ runner.os == 'Linux' && '2' || '1' }}
              echo "::endgroup::"
              ;;
            security)
              echo "::group::üîí Running security audit"
              npm audit --audit-level=high --prefer-offline
              echo "::endgroup::"
              ;;
          esac
        env:
          PWTEST_SKIP_TEST_OUTPUT: true
          CI_COMMIT_SHA: ${{ github.sha }}
          CI_COMMIT_REF_NAME: ${{ github.ref_name }}
          CI_JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-type }}-results-${{ github.sha }}-${{ runner.os }}-${{ runner.arch }}
          path: |
            coverage/
            test-results/
            playwright-report/
          retention-days: ${{ github.event_name == 'pull_request' && '7' || '30' }}
          include-hidden-files: true

  # Deploy only after all tests pass
  deploy:
    name: Deploy to GitHub Pages (Emergency Only)
    if: github.event.inputs.emergency_override == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    needs: [build, test, test-e2e]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}-Linux-X64
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Generate job summary
        if: always()
        run: |
          echo "# üöÄ Resume CI/CD Pipeline - Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìä Pipeline Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Event** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch/Ref** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Actor** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run ID** | [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üåê Live Resume" >> $GITHUB_STEP_SUMMARY
          echo "Your resume has been successfully deployed and is available at:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± [**View Resume**](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **URL**: \`${{ steps.deployment.outputs.page_url }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ‚úÖ Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è **Build**: Resume HTML/PDF generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ **Tests**: Unit and security tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- üé≠ **E2E Tests**: Multi-browser testing completed using prebuilt Docker images" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Deploy**: Published to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Resume successfully built, tested, and deployed!**" >> $GITHUB_STEP_SUMMARY
