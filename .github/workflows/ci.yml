name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Build first - needed for all tests
  build:
    name: Build Resume
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile', '**/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
        
      - name: Build with Docker (with caching)
        run: |
          echo "üöÄ Building with Docker layer caching..."
          START_TIME=$(date +%s)
          
          docker buildx create --use --driver docker-container --name builder || true
          docker buildx build \
            --target builder \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag resume-as-code:builder \
            --load \
            .
          mkdir -p dist
          docker run --rm -v "$PWD/dist:/tmp/dist" resume-as-code:builder sh -c "cp -r /app/dist/* /tmp/dist/"
          
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "‚úÖ Build completed with caching in ${BUILD_TIME}s"
          echo "üìÅ Generated files:"
          ls -la dist/
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Tests that actually exist and work
  test:
    name: Test (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, playwright, security]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Cache Playwright browsers
        if: matrix.test-type == 'playwright'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Install dependencies
        run: |
          npm ci
          if [ "${{ matrix.test-type }}" = "playwright" ]; then
            npx playwright install --with-deps chromium
          fi

      - name: Download build artifacts (for Playwright tests)
        if: matrix.test-type == 'playwright'
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/

      - name: Run tests
        run: |
          case "${{ matrix.test-type }}" in
            unit) 
              echo "üß™ Running unit tests..."
              npm run test:unit
              ;;
            playwright)
              echo "üé≠ Running Playwright tests (E2E, Visual, Accessibility, Performance)..."
              echo "‚úÖ Using build artifacts from build job"
              npx playwright test
              ;;
            security)
              echo "üîí Running security audit..."
              npm audit --audit-level=high
              ;;
          esac
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-type }}-results-${{ github.sha }}
          path: |
            coverage/
            test-results/
            playwright-report/
          retention-days: 7

  # Deploy only after all tests pass
  deploy:
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
