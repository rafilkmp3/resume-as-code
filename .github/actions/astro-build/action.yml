name: 'Astro Build with New Structure'
description: 'Execute Astro build with workspace/build/ output and proper environment configuration'
inputs:
  build-context:
    description: 'Build context (dev, pr, staging, production)'
    required: true
  deploy-url:
    description: 'Target deployment URL'
    required: false
    default: ''
  pr-number:
    description: 'PR number for preview builds'
    required: false
    default: ''
  clean-build:
    description: 'Clean workspace/build/ before building'
    required: false
    default: 'true'

outputs:
  build-duration:
    description: 'Build duration in seconds'
    value: ${{ steps.timer.outputs.duration }}
  build-size:
    description: 'Build output size'
    value: ${{ steps.info.outputs.size }}

runs:
  using: 'composite'
  steps:
    - name: 'Start Build Timer'
      id: start
      shell: bash
      run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
      
    - name: 'üßπ Clean Build Environment'
      if: inputs.clean-build == 'true'
      shell: bash
      run: |
        echo "üßπ Cleaning workspace/build/ directory..."
        rm -rf workspace/build/
        
    - name: '‚ö° Execute Astro Build'
      shell: bash
      env:
        NETLIFY: ${{ inputs.build-context == 'pr' || inputs.build-context == 'staging' }}
        NETLIFY_ENV: ${{ inputs.build-context == 'pr' && 'deploy-preview' || inputs.build-context == 'staging' && 'production' || 'development' }}
        CONTEXT: ${{ inputs.build-context == 'pr' && 'deploy-preview' || inputs.build-context }}
        DEPLOY_URL: ${{ inputs.deploy-url }}
        REVIEW_ID: ${{ inputs.pr-number }}
        NODE_ENV: ${{ inputs.build-context == 'dev' && 'development' || 'production' }}
        GITHUB_PAGES: ${{ inputs.build-context == 'production' }}
        BUILD_CONTEXT: ${{ inputs.build-context }}
      run: |
        echo "üöÄ ASTRO BUILD: ${{ inputs.build-context }} (#${{ inputs.pr-number || 'N/A' }})"
        echo "=========================================="
        echo "üìã Build Context: ${{ inputs.build-context }}"
        echo "üéØ Target URL: ${{ inputs.deploy-url || 'N/A' }}"
        echo "üèóÔ∏è Output: workspace/build/ (new structure)"
        echo ""
        
        echo "üèóÔ∏è Building with Astro v5.13.3..."
        time npm run build
        
    - name: 'Calculate Build Duration'
      id: timer
      shell: bash
      run: |
        BUILD_END=$(date +%s)
        DURATION=$((BUILD_END - BUILD_START))
        echo "duration=${DURATION}" >> $GITHUB_OUTPUT
        echo "üìä Build completed in ${DURATION} seconds"
        
    - name: 'üìä Build Information & Validation'
      id: info
      shell: bash
      run: |
        echo "üìÅ Build artifacts (workspace/build/):"
        ls -la workspace/build/
        
        # Calculate build size
        if [ -d "workspace/build" ]; then
          BUILD_SIZE=$(du -sh workspace/build/ | cut -f1)
          echo "size=${BUILD_SIZE}" >> $GITHUB_OUTPUT
          echo "üì¶ Total build size: ${BUILD_SIZE}"
          
          # Validate critical files
          if [ -f "workspace/build/index.html" ]; then
            echo "  ‚úÖ HTML: $(ls -lh workspace/build/index.html | awk '{print $5}')"
          else
            echo "  ‚ùå Missing index.html"
            exit 1
          fi
          
          # Check for PDFs (if they exist)
          for pdf in workspace/build/resume.pdf workspace/build/resume-print.pdf workspace/build/resume-ats.pdf; do
            if [ -f "$pdf" ]; then
              echo "  ‚úÖ PDF: $(basename "$pdf") - $(ls -lh "$pdf" | awk '{print $5}')"
            fi
          done
          
          echo "‚úÖ Build validation passed"
        else
          echo "‚ùå Build directory not found!"
          exit 1
        fi