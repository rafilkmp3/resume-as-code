name: 'Setup Chrome for ARM64'
description: 'Install and configure Chromium Browser for ARM64 architecture with CI/CD optimizations (Chrome not available for ARM64)'
author: 'Resume-as-Code'

inputs:
  chrome-version:
    description: 'Chromium version to install (stable, beta, dev) - Note: only stable available on ARM64'
    required: false
    default: 'stable'
  install-chromedriver:
    description: 'Whether to install ChromeDriver'
    required: false
    default: 'false'

outputs:
  chrome-path:
    description: 'Path to Chrome executable'
    value: ${{ steps.setup.outputs.chrome-path }}
  chrome-version:
    description: 'Installed Chrome version'
    value: ${{ steps.setup.outputs.chrome-version }}
  chromedriver-path:
    description: 'Path to ChromeDriver executable (if installed)'
    value: ${{ steps.setup.outputs.chromedriver-path }}

runs:
  using: 'composite'
  steps:
    - name: üöÄ Cache Chrome Dependencies & Installation
      uses: actions/cache@v4
      id: chrome-cache
      with:
        path: |
          /var/cache/apt/archives
          /usr/bin/chromium-browser
          /usr/lib/chromium-browser
          /usr/share/chromium-browser
          /etc/chromium-browser
        key: chrome-arm64-${{ runner.os }}-${{ inputs.chrome-version }}-${{ hashFiles('/usr/bin/chromium-browser') }}
        restore-keys: |
          chrome-arm64-${{ runner.os }}-${{ inputs.chrome-version }}-
          chrome-arm64-${{ runner.os }}-
          
    - name: Install Chrome and Configure for CI/CD
      id: setup
      shell: bash
      run: |
        echo "üîß Setting up Chrome ${{ inputs.chrome-version }} for ARM64..."
        
        # Check if Chrome is already cached and working
        if [[ "${{ steps.chrome-cache.outputs.cache-hit }}" == "true" ]] && [[ -f "/usr/bin/chromium-browser" ]] && /usr/bin/chromium-browser --version >/dev/null 2>&1; then
          echo "‚ö° Chrome cache hit - installation skipped!"
          CHROME_BIN="/usr/bin/chromium-browser"
          CHROME_VERSION=$(/usr/bin/chromium-browser --version 2>/dev/null | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' | head -1 || echo "Unknown")
        else
          echo "üì• Installing Chrome dependencies and browser..."
          
          # Update package lists only if needed
          if [[ ! -f "/var/lib/apt/periodic/update-success-stamp" ]] || [[ $(find /var/lib/apt/periodic/update-success-stamp -mtime +1) ]]; then
            sudo apt-get update -qq
          fi
          
          # Install dependencies in batch with optimizations  
          sudo apt-get install -y --no-install-recommends -qq \
            wget \
            gnupg \
            software-properties-common \
            apt-transport-https \
            ca-certificates \
            fonts-liberation \
            libappindicator3-1 \
            libasound2t64 \
            libatk-bridge2.0-0 \
            libdrm2 \
            libgtk-3-0 \
            libnspr4 \
            libnss3 \
            libx11-xcb1 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            xdg-utils \
            libxss1 \
            libglib2.0-0 \
            libxcb1
        
          # Install Chromium Browser with optimizations
          echo "üìù Note: Google Chrome is not available for ARM64 Linux"
          echo "üîÑ Installing Chromium Browser (open-source Chrome base) instead"
          
          case "${{ inputs.chrome-version }}" in
            "stable")
              sudo apt-get install -y --no-install-recommends -qq chromium-browser
              CHROME_BIN="/usr/bin/chromium-browser"
              ;;
            "beta"|"dev")
              echo "‚ö†Ô∏è Beta/Dev versions not available for Chromium on Ubuntu"
              echo "üîÑ Installing stable Chromium instead"
              sudo apt-get install -y --no-install-recommends -qq chromium-browser
              CHROME_BIN="/usr/bin/chromium-browser"
              ;;
            *)
              echo "‚ùå Invalid Chrome version: ${{ inputs.chrome-version }}"
              exit 1
              ;;
          esac
          
          # Get Chromium version
          CHROME_VERSION=$($CHROME_BIN --version 2>/dev/null | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' | head -1 || echo "Unknown")
        fi
        
        # Verify Chromium installation
        if [[ ! -f "$CHROME_BIN" ]]; then
          echo "‚ùå Chromium installation failed - executable not found: $CHROME_BIN"
          exit 1
        fi
        
        # Get Chromium version
        CHROME_VERSION=$($CHROME_BIN --version 2>/dev/null | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' | head -1 || echo "Unknown")
        
        # Create Chrome wrapper script with CI/CD optimized flags for ARM64 stability
        cat > /tmp/chrome-wrapper << 'EOF'
        #!/bin/bash
        exec CHROME_BIN_PLACEHOLDER "$@" \
          --no-sandbox \
          --disable-setuid-sandbox \
          --disable-dev-shm-usage \
          --disable-extensions \
          --disable-plugins \
          --disable-gpu \
          --headless=new \
          --disable-background-timer-throttling \
          --disable-backgrounding-occluded-windows \
          --disable-features=TranslateUI,VizDisplayCompositor \
          --disable-component-extensions-with-background-pages \
          --no-first-run \
          --no-default-browser-check \
          --disable-default-apps \
          --disable-popup-blocking \
          --disable-translate \
          --disable-background-networking \
          --disable-sync \
          --metrics-recording-only \
          --no-pings \
          --mute-audio \
          --disable-ipc-flooding-protection \
          --memory-pressure-off \
          --disable-software-rasterizer \
          --disable-background-media-suspend \
          --disable-renderer-backgrounding \
          --disable-field-trial-config \
          --disable-back-forward-cache \
          --disable-hang-monitor \
          --disable-prompt-on-repost \
          --disable-client-side-phishing-detection \
          --disable-component-update \
          --disable-domain-reliability \
          --disable-features=AudioServiceOutOfProcess,VizDisplayCompositor \
          --aggressive-cache-discard \
          --force-color-profile=srgb \
          --disable-threaded-animation \
          --disable-threaded-scrolling \
          --disable-checker-imaging \
          --disable-new-content-rendering-timeout \
          --disable-partial-raster \
          --disable-image-animation-resync
        EOF
        
        # Replace placeholder with actual Chrome binary path
        sed "s|CHROME_BIN_PLACEHOLDER|$CHROME_BIN|g" /tmp/chrome-wrapper > /tmp/chrome-ci
        chmod +x /tmp/chrome-ci
        sudo mv /tmp/chrome-ci /usr/local/bin/chrome-ci
        
        # Set environment variables for various tools
        echo "CHROME_BIN=$CHROME_BIN" >> $GITHUB_ENV
        echo "PUPPETEER_EXECUTABLE_PATH=$CHROME_BIN" >> $GITHUB_ENV
        echo "CHROME_PATH=$CHROME_BIN" >> $GITHUB_ENV
        echo "CHROMIUM_PATH=$CHROME_BIN" >> $GITHUB_ENV
        
        # Lighthouse CI configuration
        echo "LHCI_CHROME_PATH=$CHROME_BIN" >> $GITHUB_ENV
        
        # Output values
        echo "chrome-path=$CHROME_BIN" >> $GITHUB_OUTPUT
        echo "chrome-version=$CHROME_VERSION" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Chromium $CHROME_VERSION installed and configured for CI/CD"
        echo "üìÅ Chromium executable: $CHROME_BIN"
        echo "üîß CI wrapper available at: /usr/local/bin/chrome-ci"
    
    - name: üöÄ Cache ChromeDriver
      if: inputs.install-chromedriver == 'true'
      uses: actions/cache@v4
      id: chromedriver-cache
      with:
        path: |
          /usr/local/bin/chromedriver
        key: chromedriver-arm64-${{ steps.setup.outputs.chrome-version }}-${{ runner.os }}
        restore-keys: |
          chromedriver-arm64-${{ runner.os }}-
        
    - name: Install ChromeDriver (Optional)
      if: inputs.install-chromedriver == 'true'
      shell: bash
      run: |
        echo "üöó Installing ChromeDriver for ARM64..."
        
        # Check if ChromeDriver is already cached and working
        if [[ "${{ steps.chromedriver-cache.outputs.cache-hit }}" == "true" ]] && [[ -f "/usr/local/bin/chromedriver" ]] && /usr/local/bin/chromedriver --version >/dev/null 2>&1; then
          echo "‚ö° ChromeDriver cache hit - installation skipped!"
          CHROMEDRIVER_VERSION_ACTUAL=$(/usr/local/bin/chromedriver --version | cut -d ' ' -f2)
        else
          echo "üì• Installing fresh ChromeDriver..."
          
          # Get Chrome version for ChromeDriver compatibility
          CHROME_VERSION=${{ steps.setup.outputs.chrome-version }}
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
          
          echo "üîç Finding compatible ChromeDriver for Chrome $CHROME_MAJOR_VERSION..."
          
          # Use ChromeDriver's latest release API to get compatible version
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_MAJOR_VERSION")
          
          if [[ -z "$CHROMEDRIVER_VERSION" ]]; then
            echo "‚ö†Ô∏è Could not determine ChromeDriver version for Chrome $CHROME_MAJOR_VERSION, using latest"
            CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE")
          fi
          
          echo "üì• Downloading ChromeDriver $CHROMEDRIVER_VERSION for ARM64..."
          
          # Check if ARM64 ChromeDriver is available, fallback to x64 with emulation
          CHROMEDRIVER_URL_ARM64="https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux-arm64/chromedriver-linux-arm64.zip"
          CHROMEDRIVER_URL_X64="https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
          
          echo "üîç Checking for ARM64 ChromeDriver availability..."
          if curl --head --silent --fail "$CHROMEDRIVER_URL_ARM64" >/dev/null 2>&1; then
            echo "‚úÖ ARM64 ChromeDriver available, downloading native binary..."
            wget -q -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL_ARM64"
            CHROMEDRIVER_ARCH="linux-arm64"
          else
            echo "‚ö†Ô∏è ARM64 ChromeDriver not available, using x64 version with emulation"
            echo "üì• Installing QEMU for x86_64 emulation..."
            sudo apt-get update -qq
            sudo apt-get install -y -qq qemu-user-static binfmt-support
            
            # Download x64 version
            wget -q -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL_X64"
            CHROMEDRIVER_ARCH="linux64"
          fi
          
          unzip -q /tmp/chromedriver.zip -d /tmp/
          chmod +x /tmp/chromedriver-$CHROMEDRIVER_ARCH/chromedriver
          sudo mv /tmp/chromedriver-$CHROMEDRIVER_ARCH/chromedriver /usr/local/bin/chromedriver
          
          # Verify ChromeDriver
          CHROMEDRIVER_VERSION_ACTUAL=$(/usr/local/bin/chromedriver --version | cut -d ' ' -f2)
          
          # Cleanup
          rm -rf /tmp/chromedriver.zip /tmp/chromedriver-$CHROMEDRIVER_ARCH/
        fi
        
        # Set environment variables
        echo "CHROMEDRIVER_PATH=/usr/local/bin/chromedriver" >> $GITHUB_ENV
        echo "chromedriver-path=/usr/local/bin/chromedriver" >> $GITHUB_OUTPUT
        
        echo "‚úÖ ChromeDriver $CHROMEDRIVER_VERSION_ACTUAL installed"
        echo "üìÅ ChromeDriver path: /usr/local/bin/chromedriver"
    
    - name: Verify Setup and Display Summary
      shell: bash
      run: |
        echo "üîç Verifying Chrome installation and configuration..."
        
        CHROME_PATH="${{ steps.setup.outputs.chrome-path }}"
        CHROME_VERSION="${{ steps.setup.outputs.chrome-version }}"
        
        # Test Chrome execution
        if $CHROME_PATH --version > /dev/null 2>&1; then
          echo "‚úÖ Chrome executable working correctly"
        else
          echo "‚ùå Chrome executable test failed"
          exit 1
        fi
        
        # Test CI wrapper
        if /usr/local/bin/chrome-ci --version > /dev/null 2>&1; then
          echo "‚úÖ Chrome CI wrapper working correctly"
        else
          echo "‚ùå Chrome CI wrapper test failed"
          exit 1
        fi
        
        echo ""
        echo "üìã Chromium Setup Summary:"
        echo "  Version: $CHROME_VERSION"
        echo "  Executable: $CHROME_PATH"
        echo "  CI Wrapper: /usr/local/bin/chrome-ci"
        echo "  Architecture: $(uname -m)"
        echo ""
        echo "üîß Environment Variables Set:"
        echo "  CHROME_BIN=$CHROME_PATH"
        echo "  PUPPETEER_EXECUTABLE_PATH=$CHROME_PATH"
        echo "  CHROME_PATH=$CHROME_PATH"
        echo "  LHCI_CHROME_PATH=$CHROME_PATH"
        
        if [[ "${{ inputs.install-chromedriver }}" == "true" ]]; then
          CHROMEDRIVER_PATH="${{ steps.chromedriver.outputs.chromedriver-path }}"
          echo "  CHROMEDRIVER_PATH=$CHROMEDRIVER_PATH"
        fi
